package api

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/profiles"
)

// CandidateControlFeederMock implements CandidateControlFeeder
type CandidateControlFeederMock struct {
	t minimock.Tester

	funcPickNextJoinCandidate          func() (c1 profiles.CandidateProfile, d1 cryptkit.DigestHolder)
	inspectFuncPickNextJoinCandidate   func()
	afterPickNextJoinCandidateCounter  uint64
	beforePickNextJoinCandidateCounter uint64
	PickNextJoinCandidateMock          mCandidateControlFeederMockPickNextJoinCandidate

	funcRemoveJoinCandidate          func(candidateAdded bool, nodeID insolar.ShortNodeID) (b1 bool)
	inspectFuncRemoveJoinCandidate   func(candidateAdded bool, nodeID insolar.ShortNodeID)
	afterRemoveJoinCandidateCounter  uint64
	beforeRemoveJoinCandidateCounter uint64
	RemoveJoinCandidateMock          mCandidateControlFeederMockRemoveJoinCandidate
}

// NewCandidateControlFeederMock returns a mock for CandidateControlFeeder
func NewCandidateControlFeederMock(t minimock.Tester) *CandidateControlFeederMock {
	m := &CandidateControlFeederMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.PickNextJoinCandidateMock = mCandidateControlFeederMockPickNextJoinCandidate{mock: m}

	m.RemoveJoinCandidateMock = mCandidateControlFeederMockRemoveJoinCandidate{mock: m}
	m.RemoveJoinCandidateMock.callArgs = []*CandidateControlFeederMockRemoveJoinCandidateParams{}

	return m
}

type mCandidateControlFeederMockPickNextJoinCandidate struct {
	mock               *CandidateControlFeederMock
	defaultExpectation *CandidateControlFeederMockPickNextJoinCandidateExpectation
	expectations       []*CandidateControlFeederMockPickNextJoinCandidateExpectation
}

// CandidateControlFeederMockPickNextJoinCandidateExpectation specifies expectation struct of the CandidateControlFeeder.PickNextJoinCandidate
type CandidateControlFeederMockPickNextJoinCandidateExpectation struct {
	mock *CandidateControlFeederMock

	results *CandidateControlFeederMockPickNextJoinCandidateResults
	Counter uint64
}

// CandidateControlFeederMockPickNextJoinCandidateResults contains results of the CandidateControlFeeder.PickNextJoinCandidate
type CandidateControlFeederMockPickNextJoinCandidateResults struct {
	c1 profiles.CandidateProfile
	d1 cryptkit.DigestHolder
}

// Expect sets up expected params for CandidateControlFeeder.PickNextJoinCandidate
func (mmPickNextJoinCandidate *mCandidateControlFeederMockPickNextJoinCandidate) Expect() *mCandidateControlFeederMockPickNextJoinCandidate {
	if mmPickNextJoinCandidate.mock.funcPickNextJoinCandidate != nil {
		mmPickNextJoinCandidate.mock.t.Fatalf("CandidateControlFeederMock.PickNextJoinCandidate mock is already set by Set")
	}

	if mmPickNextJoinCandidate.defaultExpectation == nil {
		mmPickNextJoinCandidate.defaultExpectation = &CandidateControlFeederMockPickNextJoinCandidateExpectation{}
	}

	return mmPickNextJoinCandidate
}

// Inspect accepts an inspector function that has same arguments as the CandidateControlFeeder.PickNextJoinCandidate
func (mmPickNextJoinCandidate *mCandidateControlFeederMockPickNextJoinCandidate) Inspect(f func()) *mCandidateControlFeederMockPickNextJoinCandidate {
	if mmPickNextJoinCandidate.mock.inspectFuncPickNextJoinCandidate != nil {
		mmPickNextJoinCandidate.mock.t.Fatalf("Inspect function is already set for CandidateControlFeederMock.PickNextJoinCandidate")
	}

	mmPickNextJoinCandidate.mock.inspectFuncPickNextJoinCandidate = f

	return mmPickNextJoinCandidate
}

// Return sets up results that will be returned by CandidateControlFeeder.PickNextJoinCandidate
func (mmPickNextJoinCandidate *mCandidateControlFeederMockPickNextJoinCandidate) Return(c1 profiles.CandidateProfile, d1 cryptkit.DigestHolder) *CandidateControlFeederMock {
	if mmPickNextJoinCandidate.mock.funcPickNextJoinCandidate != nil {
		mmPickNextJoinCandidate.mock.t.Fatalf("CandidateControlFeederMock.PickNextJoinCandidate mock is already set by Set")
	}

	if mmPickNextJoinCandidate.defaultExpectation == nil {
		mmPickNextJoinCandidate.defaultExpectation = &CandidateControlFeederMockPickNextJoinCandidateExpectation{mock: mmPickNextJoinCandidate.mock}
	}
	mmPickNextJoinCandidate.defaultExpectation.results = &CandidateControlFeederMockPickNextJoinCandidateResults{c1, d1}
	return mmPickNextJoinCandidate.mock
}

//Set uses given function f to mock the CandidateControlFeeder.PickNextJoinCandidate method
func (mmPickNextJoinCandidate *mCandidateControlFeederMockPickNextJoinCandidate) Set(f func() (c1 profiles.CandidateProfile, d1 cryptkit.DigestHolder)) *CandidateControlFeederMock {
	if mmPickNextJoinCandidate.defaultExpectation != nil {
		mmPickNextJoinCandidate.mock.t.Fatalf("Default expectation is already set for the CandidateControlFeeder.PickNextJoinCandidate method")
	}

	if len(mmPickNextJoinCandidate.expectations) > 0 {
		mmPickNextJoinCandidate.mock.t.Fatalf("Some expectations are already set for the CandidateControlFeeder.PickNextJoinCandidate method")
	}

	mmPickNextJoinCandidate.mock.funcPickNextJoinCandidate = f
	return mmPickNextJoinCandidate.mock
}

// PickNextJoinCandidate implements CandidateControlFeeder
func (mmPickNextJoinCandidate *CandidateControlFeederMock) PickNextJoinCandidate() (c1 profiles.CandidateProfile, d1 cryptkit.DigestHolder) {
	mm_atomic.AddUint64(&mmPickNextJoinCandidate.beforePickNextJoinCandidateCounter, 1)
	defer mm_atomic.AddUint64(&mmPickNextJoinCandidate.afterPickNextJoinCandidateCounter, 1)

	if mmPickNextJoinCandidate.inspectFuncPickNextJoinCandidate != nil {
		mmPickNextJoinCandidate.inspectFuncPickNextJoinCandidate()
	}

	if mmPickNextJoinCandidate.PickNextJoinCandidateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmPickNextJoinCandidate.PickNextJoinCandidateMock.defaultExpectation.Counter, 1)

		results := mmPickNextJoinCandidate.PickNextJoinCandidateMock.defaultExpectation.results
		if results == nil {
			mmPickNextJoinCandidate.t.Fatal("No results are set for the CandidateControlFeederMock.PickNextJoinCandidate")
		}
		return (*results).c1, (*results).d1
	}
	if mmPickNextJoinCandidate.funcPickNextJoinCandidate != nil {
		return mmPickNextJoinCandidate.funcPickNextJoinCandidate()
	}
	mmPickNextJoinCandidate.t.Fatalf("Unexpected call to CandidateControlFeederMock.PickNextJoinCandidate.")
	return
}

// PickNextJoinCandidateAfterCounter returns a count of finished CandidateControlFeederMock.PickNextJoinCandidate invocations
func (mmPickNextJoinCandidate *CandidateControlFeederMock) PickNextJoinCandidateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPickNextJoinCandidate.afterPickNextJoinCandidateCounter)
}

// PickNextJoinCandidateBeforeCounter returns a count of CandidateControlFeederMock.PickNextJoinCandidate invocations
func (mmPickNextJoinCandidate *CandidateControlFeederMock) PickNextJoinCandidateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmPickNextJoinCandidate.beforePickNextJoinCandidateCounter)
}

// MinimockPickNextJoinCandidateDone returns true if the count of the PickNextJoinCandidate invocations corresponds
// the number of defined expectations
func (m *CandidateControlFeederMock) MinimockPickNextJoinCandidateDone() bool {
	for _, e := range m.PickNextJoinCandidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PickNextJoinCandidateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPickNextJoinCandidateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPickNextJoinCandidate != nil && mm_atomic.LoadUint64(&m.afterPickNextJoinCandidateCounter) < 1 {
		return false
	}
	return true
}

// MinimockPickNextJoinCandidateInspect logs each unmet expectation
func (m *CandidateControlFeederMock) MinimockPickNextJoinCandidateInspect() {
	for _, e := range m.PickNextJoinCandidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateControlFeederMock.PickNextJoinCandidate")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.PickNextJoinCandidateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterPickNextJoinCandidateCounter) < 1 {
		m.t.Error("Expected call to CandidateControlFeederMock.PickNextJoinCandidate")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcPickNextJoinCandidate != nil && mm_atomic.LoadUint64(&m.afterPickNextJoinCandidateCounter) < 1 {
		m.t.Error("Expected call to CandidateControlFeederMock.PickNextJoinCandidate")
	}
}

type mCandidateControlFeederMockRemoveJoinCandidate struct {
	mock               *CandidateControlFeederMock
	defaultExpectation *CandidateControlFeederMockRemoveJoinCandidateExpectation
	expectations       []*CandidateControlFeederMockRemoveJoinCandidateExpectation

	callArgs []*CandidateControlFeederMockRemoveJoinCandidateParams
	mutex    sync.RWMutex
}

// CandidateControlFeederMockRemoveJoinCandidateExpectation specifies expectation struct of the CandidateControlFeeder.RemoveJoinCandidate
type CandidateControlFeederMockRemoveJoinCandidateExpectation struct {
	mock    *CandidateControlFeederMock
	params  *CandidateControlFeederMockRemoveJoinCandidateParams
	results *CandidateControlFeederMockRemoveJoinCandidateResults
	Counter uint64
}

// CandidateControlFeederMockRemoveJoinCandidateParams contains parameters of the CandidateControlFeeder.RemoveJoinCandidate
type CandidateControlFeederMockRemoveJoinCandidateParams struct {
	candidateAdded bool
	nodeID         insolar.ShortNodeID
}

// CandidateControlFeederMockRemoveJoinCandidateResults contains results of the CandidateControlFeeder.RemoveJoinCandidate
type CandidateControlFeederMockRemoveJoinCandidateResults struct {
	b1 bool
}

// Expect sets up expected params for CandidateControlFeeder.RemoveJoinCandidate
func (mmRemoveJoinCandidate *mCandidateControlFeederMockRemoveJoinCandidate) Expect(candidateAdded bool, nodeID insolar.ShortNodeID) *mCandidateControlFeederMockRemoveJoinCandidate {
	if mmRemoveJoinCandidate.mock.funcRemoveJoinCandidate != nil {
		mmRemoveJoinCandidate.mock.t.Fatalf("CandidateControlFeederMock.RemoveJoinCandidate mock is already set by Set")
	}

	if mmRemoveJoinCandidate.defaultExpectation == nil {
		mmRemoveJoinCandidate.defaultExpectation = &CandidateControlFeederMockRemoveJoinCandidateExpectation{}
	}

	mmRemoveJoinCandidate.defaultExpectation.params = &CandidateControlFeederMockRemoveJoinCandidateParams{candidateAdded, nodeID}
	for _, e := range mmRemoveJoinCandidate.expectations {
		if minimock.Equal(e.params, mmRemoveJoinCandidate.defaultExpectation.params) {
			mmRemoveJoinCandidate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRemoveJoinCandidate.defaultExpectation.params)
		}
	}

	return mmRemoveJoinCandidate
}

// Inspect accepts an inspector function that has same arguments as the CandidateControlFeeder.RemoveJoinCandidate
func (mmRemoveJoinCandidate *mCandidateControlFeederMockRemoveJoinCandidate) Inspect(f func(candidateAdded bool, nodeID insolar.ShortNodeID)) *mCandidateControlFeederMockRemoveJoinCandidate {
	if mmRemoveJoinCandidate.mock.inspectFuncRemoveJoinCandidate != nil {
		mmRemoveJoinCandidate.mock.t.Fatalf("Inspect function is already set for CandidateControlFeederMock.RemoveJoinCandidate")
	}

	mmRemoveJoinCandidate.mock.inspectFuncRemoveJoinCandidate = f

	return mmRemoveJoinCandidate
}

// Return sets up results that will be returned by CandidateControlFeeder.RemoveJoinCandidate
func (mmRemoveJoinCandidate *mCandidateControlFeederMockRemoveJoinCandidate) Return(b1 bool) *CandidateControlFeederMock {
	if mmRemoveJoinCandidate.mock.funcRemoveJoinCandidate != nil {
		mmRemoveJoinCandidate.mock.t.Fatalf("CandidateControlFeederMock.RemoveJoinCandidate mock is already set by Set")
	}

	if mmRemoveJoinCandidate.defaultExpectation == nil {
		mmRemoveJoinCandidate.defaultExpectation = &CandidateControlFeederMockRemoveJoinCandidateExpectation{mock: mmRemoveJoinCandidate.mock}
	}
	mmRemoveJoinCandidate.defaultExpectation.results = &CandidateControlFeederMockRemoveJoinCandidateResults{b1}
	return mmRemoveJoinCandidate.mock
}

//Set uses given function f to mock the CandidateControlFeeder.RemoveJoinCandidate method
func (mmRemoveJoinCandidate *mCandidateControlFeederMockRemoveJoinCandidate) Set(f func(candidateAdded bool, nodeID insolar.ShortNodeID) (b1 bool)) *CandidateControlFeederMock {
	if mmRemoveJoinCandidate.defaultExpectation != nil {
		mmRemoveJoinCandidate.mock.t.Fatalf("Default expectation is already set for the CandidateControlFeeder.RemoveJoinCandidate method")
	}

	if len(mmRemoveJoinCandidate.expectations) > 0 {
		mmRemoveJoinCandidate.mock.t.Fatalf("Some expectations are already set for the CandidateControlFeeder.RemoveJoinCandidate method")
	}

	mmRemoveJoinCandidate.mock.funcRemoveJoinCandidate = f
	return mmRemoveJoinCandidate.mock
}

// When sets expectation for the CandidateControlFeeder.RemoveJoinCandidate which will trigger the result defined by the following
// Then helper
func (mmRemoveJoinCandidate *mCandidateControlFeederMockRemoveJoinCandidate) When(candidateAdded bool, nodeID insolar.ShortNodeID) *CandidateControlFeederMockRemoveJoinCandidateExpectation {
	if mmRemoveJoinCandidate.mock.funcRemoveJoinCandidate != nil {
		mmRemoveJoinCandidate.mock.t.Fatalf("CandidateControlFeederMock.RemoveJoinCandidate mock is already set by Set")
	}

	expectation := &CandidateControlFeederMockRemoveJoinCandidateExpectation{
		mock:   mmRemoveJoinCandidate.mock,
		params: &CandidateControlFeederMockRemoveJoinCandidateParams{candidateAdded, nodeID},
	}
	mmRemoveJoinCandidate.expectations = append(mmRemoveJoinCandidate.expectations, expectation)
	return expectation
}

// Then sets up CandidateControlFeeder.RemoveJoinCandidate return parameters for the expectation previously defined by the When method
func (e *CandidateControlFeederMockRemoveJoinCandidateExpectation) Then(b1 bool) *CandidateControlFeederMock {
	e.results = &CandidateControlFeederMockRemoveJoinCandidateResults{b1}
	return e.mock
}

// RemoveJoinCandidate implements CandidateControlFeeder
func (mmRemoveJoinCandidate *CandidateControlFeederMock) RemoveJoinCandidate(candidateAdded bool, nodeID insolar.ShortNodeID) (b1 bool) {
	mm_atomic.AddUint64(&mmRemoveJoinCandidate.beforeRemoveJoinCandidateCounter, 1)
	defer mm_atomic.AddUint64(&mmRemoveJoinCandidate.afterRemoveJoinCandidateCounter, 1)

	if mmRemoveJoinCandidate.inspectFuncRemoveJoinCandidate != nil {
		mmRemoveJoinCandidate.inspectFuncRemoveJoinCandidate(candidateAdded, nodeID)
	}

	params := &CandidateControlFeederMockRemoveJoinCandidateParams{candidateAdded, nodeID}

	// Record call args
	mmRemoveJoinCandidate.RemoveJoinCandidateMock.mutex.Lock()
	mmRemoveJoinCandidate.RemoveJoinCandidateMock.callArgs = append(mmRemoveJoinCandidate.RemoveJoinCandidateMock.callArgs, params)
	mmRemoveJoinCandidate.RemoveJoinCandidateMock.mutex.Unlock()

	for _, e := range mmRemoveJoinCandidate.RemoveJoinCandidateMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmRemoveJoinCandidate.RemoveJoinCandidateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRemoveJoinCandidate.RemoveJoinCandidateMock.defaultExpectation.Counter, 1)
		want := mmRemoveJoinCandidate.RemoveJoinCandidateMock.defaultExpectation.params
		got := CandidateControlFeederMockRemoveJoinCandidateParams{candidateAdded, nodeID}
		if want != nil && !minimock.Equal(*want, got) {
			mmRemoveJoinCandidate.t.Errorf("CandidateControlFeederMock.RemoveJoinCandidate got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmRemoveJoinCandidate.RemoveJoinCandidateMock.defaultExpectation.results
		if results == nil {
			mmRemoveJoinCandidate.t.Fatal("No results are set for the CandidateControlFeederMock.RemoveJoinCandidate")
		}
		return (*results).b1
	}
	if mmRemoveJoinCandidate.funcRemoveJoinCandidate != nil {
		return mmRemoveJoinCandidate.funcRemoveJoinCandidate(candidateAdded, nodeID)
	}
	mmRemoveJoinCandidate.t.Fatalf("Unexpected call to CandidateControlFeederMock.RemoveJoinCandidate. %v %v", candidateAdded, nodeID)
	return
}

// RemoveJoinCandidateAfterCounter returns a count of finished CandidateControlFeederMock.RemoveJoinCandidate invocations
func (mmRemoveJoinCandidate *CandidateControlFeederMock) RemoveJoinCandidateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemoveJoinCandidate.afterRemoveJoinCandidateCounter)
}

// RemoveJoinCandidateBeforeCounter returns a count of CandidateControlFeederMock.RemoveJoinCandidate invocations
func (mmRemoveJoinCandidate *CandidateControlFeederMock) RemoveJoinCandidateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRemoveJoinCandidate.beforeRemoveJoinCandidateCounter)
}

// Calls returns a list of arguments used in each call to CandidateControlFeederMock.RemoveJoinCandidate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRemoveJoinCandidate *mCandidateControlFeederMockRemoveJoinCandidate) Calls() []*CandidateControlFeederMockRemoveJoinCandidateParams {
	mmRemoveJoinCandidate.mutex.RLock()

	argCopy := make([]*CandidateControlFeederMockRemoveJoinCandidateParams, len(mmRemoveJoinCandidate.callArgs))
	copy(argCopy, mmRemoveJoinCandidate.callArgs)

	mmRemoveJoinCandidate.mutex.RUnlock()

	return argCopy
}

// MinimockRemoveJoinCandidateDone returns true if the count of the RemoveJoinCandidate invocations corresponds
// the number of defined expectations
func (m *CandidateControlFeederMock) MinimockRemoveJoinCandidateDone() bool {
	for _, e := range m.RemoveJoinCandidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveJoinCandidateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRemoveJoinCandidateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemoveJoinCandidate != nil && mm_atomic.LoadUint64(&m.afterRemoveJoinCandidateCounter) < 1 {
		return false
	}
	return true
}

// MinimockRemoveJoinCandidateInspect logs each unmet expectation
func (m *CandidateControlFeederMock) MinimockRemoveJoinCandidateInspect() {
	for _, e := range m.RemoveJoinCandidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CandidateControlFeederMock.RemoveJoinCandidate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RemoveJoinCandidateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRemoveJoinCandidateCounter) < 1 {
		if m.RemoveJoinCandidateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CandidateControlFeederMock.RemoveJoinCandidate")
		} else {
			m.t.Errorf("Expected call to CandidateControlFeederMock.RemoveJoinCandidate with params: %#v", *m.RemoveJoinCandidateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRemoveJoinCandidate != nil && mm_atomic.LoadUint64(&m.afterRemoveJoinCandidateCounter) < 1 {
		m.t.Error("Expected call to CandidateControlFeederMock.RemoveJoinCandidate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CandidateControlFeederMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockPickNextJoinCandidateInspect()

		m.MinimockRemoveJoinCandidateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CandidateControlFeederMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CandidateControlFeederMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockPickNextJoinCandidateDone() &&
		m.MinimockRemoveJoinCandidateDone()
}
