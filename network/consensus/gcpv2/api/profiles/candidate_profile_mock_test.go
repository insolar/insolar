package profiles

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/common/endpoints"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/member"
	"github.com/insolar/insolar/pulse"
)

// CandidateProfileMock implements CandidateProfile
type CandidateProfileMock struct {
	t minimock.Tester

	funcGetBriefIntroSignedDigest          func() (s1 cryptkit.SignedDigestHolder)
	inspectFuncGetBriefIntroSignedDigest   func()
	afterGetBriefIntroSignedDigestCounter  uint64
	beforeGetBriefIntroSignedDigestCounter uint64
	GetBriefIntroSignedDigestMock          mCandidateProfileMockGetBriefIntroSignedDigest

	funcGetDefaultEndpoint          func() (o1 endpoints.Outbound)
	inspectFuncGetDefaultEndpoint   func()
	afterGetDefaultEndpointCounter  uint64
	beforeGetDefaultEndpointCounter uint64
	GetDefaultEndpointMock          mCandidateProfileMockGetDefaultEndpoint

	funcGetExtraEndpoints          func() (oa1 []endpoints.Outbound)
	inspectFuncGetExtraEndpoints   func()
	afterGetExtraEndpointsCounter  uint64
	beforeGetExtraEndpointsCounter uint64
	GetExtraEndpointsMock          mCandidateProfileMockGetExtraEndpoints

	funcGetIssuedAtPulse          func() (n1 pulse.Number)
	inspectFuncGetIssuedAtPulse   func()
	afterGetIssuedAtPulseCounter  uint64
	beforeGetIssuedAtPulseCounter uint64
	GetIssuedAtPulseMock          mCandidateProfileMockGetIssuedAtPulse

	funcGetIssuedAtTime          func() (t1 time.Time)
	inspectFuncGetIssuedAtTime   func()
	afterGetIssuedAtTimeCounter  uint64
	beforeGetIssuedAtTimeCounter uint64
	GetIssuedAtTimeMock          mCandidateProfileMockGetIssuedAtTime

	funcGetIssuerID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetIssuerID   func()
	afterGetIssuerIDCounter  uint64
	beforeGetIssuerIDCounter uint64
	GetIssuerIDMock          mCandidateProfileMockGetIssuerID

	funcGetIssuerSignature          func() (s1 cryptkit.SignatureHolder)
	inspectFuncGetIssuerSignature   func()
	afterGetIssuerSignatureCounter  uint64
	beforeGetIssuerSignatureCounter uint64
	GetIssuerSignatureMock          mCandidateProfileMockGetIssuerSignature

	funcGetNodePublicKey          func() (s1 cryptkit.SignatureKeyHolder)
	inspectFuncGetNodePublicKey   func()
	afterGetNodePublicKeyCounter  uint64
	beforeGetNodePublicKeyCounter uint64
	GetNodePublicKeyMock          mCandidateProfileMockGetNodePublicKey

	funcGetPowerLevels          func() (p1 member.PowerSet)
	inspectFuncGetPowerLevels   func()
	afterGetPowerLevelsCounter  uint64
	beforeGetPowerLevelsCounter uint64
	GetPowerLevelsMock          mCandidateProfileMockGetPowerLevels

	funcGetPrimaryRole          func() (p1 member.PrimaryRole)
	inspectFuncGetPrimaryRole   func()
	afterGetPrimaryRoleCounter  uint64
	beforeGetPrimaryRoleCounter uint64
	GetPrimaryRoleMock          mCandidateProfileMockGetPrimaryRole

	funcGetReference          func() (r1 insolar.Reference)
	inspectFuncGetReference   func()
	afterGetReferenceCounter  uint64
	beforeGetReferenceCounter uint64
	GetReferenceMock          mCandidateProfileMockGetReference

	funcGetSpecialRoles          func() (s1 member.SpecialRole)
	inspectFuncGetSpecialRoles   func()
	afterGetSpecialRolesCounter  uint64
	beforeGetSpecialRolesCounter uint64
	GetSpecialRolesMock          mCandidateProfileMockGetSpecialRoles

	funcGetStartPower          func() (p1 member.Power)
	inspectFuncGetStartPower   func()
	afterGetStartPowerCounter  uint64
	beforeGetStartPowerCounter uint64
	GetStartPowerMock          mCandidateProfileMockGetStartPower

	funcGetStaticNodeID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetStaticNodeID   func()
	afterGetStaticNodeIDCounter  uint64
	beforeGetStaticNodeIDCounter uint64
	GetStaticNodeIDMock          mCandidateProfileMockGetStaticNodeID
}

// NewCandidateProfileMock returns a mock for CandidateProfile
func NewCandidateProfileMock(t minimock.Tester) *CandidateProfileMock {
	m := &CandidateProfileMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBriefIntroSignedDigestMock = mCandidateProfileMockGetBriefIntroSignedDigest{mock: m}

	m.GetDefaultEndpointMock = mCandidateProfileMockGetDefaultEndpoint{mock: m}

	m.GetExtraEndpointsMock = mCandidateProfileMockGetExtraEndpoints{mock: m}

	m.GetIssuedAtPulseMock = mCandidateProfileMockGetIssuedAtPulse{mock: m}

	m.GetIssuedAtTimeMock = mCandidateProfileMockGetIssuedAtTime{mock: m}

	m.GetIssuerIDMock = mCandidateProfileMockGetIssuerID{mock: m}

	m.GetIssuerSignatureMock = mCandidateProfileMockGetIssuerSignature{mock: m}

	m.GetNodePublicKeyMock = mCandidateProfileMockGetNodePublicKey{mock: m}

	m.GetPowerLevelsMock = mCandidateProfileMockGetPowerLevels{mock: m}

	m.GetPrimaryRoleMock = mCandidateProfileMockGetPrimaryRole{mock: m}

	m.GetReferenceMock = mCandidateProfileMockGetReference{mock: m}

	m.GetSpecialRolesMock = mCandidateProfileMockGetSpecialRoles{mock: m}

	m.GetStartPowerMock = mCandidateProfileMockGetStartPower{mock: m}

	m.GetStaticNodeIDMock = mCandidateProfileMockGetStaticNodeID{mock: m}

	return m
}

type mCandidateProfileMockGetBriefIntroSignedDigest struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetBriefIntroSignedDigestExpectation
	expectations       []*CandidateProfileMockGetBriefIntroSignedDigestExpectation
}

// CandidateProfileMockGetBriefIntroSignedDigestExpectation specifies expectation struct of the CandidateProfile.GetBriefIntroSignedDigest
type CandidateProfileMockGetBriefIntroSignedDigestExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetBriefIntroSignedDigestResults
	Counter uint64
}

// CandidateProfileMockGetBriefIntroSignedDigestResults contains results of the CandidateProfile.GetBriefIntroSignedDigest
type CandidateProfileMockGetBriefIntroSignedDigestResults struct {
	s1 cryptkit.SignedDigestHolder
}

// Expect sets up expected params for CandidateProfile.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mCandidateProfileMockGetBriefIntroSignedDigest) Expect() *mCandidateProfileMockGetBriefIntroSignedDigest {
	if mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("CandidateProfileMock.GetBriefIntroSignedDigest mock is already set by Set")
	}

	if mmGetBriefIntroSignedDigest.defaultExpectation == nil {
		mmGetBriefIntroSignedDigest.defaultExpectation = &CandidateProfileMockGetBriefIntroSignedDigestExpectation{}
	}

	return mmGetBriefIntroSignedDigest
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mCandidateProfileMockGetBriefIntroSignedDigest) Inspect(f func()) *mCandidateProfileMockGetBriefIntroSignedDigest {
	if mmGetBriefIntroSignedDigest.mock.inspectFuncGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetBriefIntroSignedDigest")
	}

	mmGetBriefIntroSignedDigest.mock.inspectFuncGetBriefIntroSignedDigest = f

	return mmGetBriefIntroSignedDigest
}

// Return sets up results that will be returned by CandidateProfile.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mCandidateProfileMockGetBriefIntroSignedDigest) Return(s1 cryptkit.SignedDigestHolder) *CandidateProfileMock {
	if mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("CandidateProfileMock.GetBriefIntroSignedDigest mock is already set by Set")
	}

	if mmGetBriefIntroSignedDigest.defaultExpectation == nil {
		mmGetBriefIntroSignedDigest.defaultExpectation = &CandidateProfileMockGetBriefIntroSignedDigestExpectation{mock: mmGetBriefIntroSignedDigest.mock}
	}
	mmGetBriefIntroSignedDigest.defaultExpectation.results = &CandidateProfileMockGetBriefIntroSignedDigestResults{s1}
	return mmGetBriefIntroSignedDigest.mock
}

//Set uses given function f to mock the CandidateProfile.GetBriefIntroSignedDigest method
func (mmGetBriefIntroSignedDigest *mCandidateProfileMockGetBriefIntroSignedDigest) Set(f func() (s1 cryptkit.SignedDigestHolder)) *CandidateProfileMock {
	if mmGetBriefIntroSignedDigest.defaultExpectation != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetBriefIntroSignedDigest method")
	}

	if len(mmGetBriefIntroSignedDigest.expectations) > 0 {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetBriefIntroSignedDigest method")
	}

	mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest = f
	return mmGetBriefIntroSignedDigest.mock
}

// GetBriefIntroSignedDigest implements CandidateProfile
func (mmGetBriefIntroSignedDigest *CandidateProfileMock) GetBriefIntroSignedDigest() (s1 cryptkit.SignedDigestHolder) {
	mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.beforeGetBriefIntroSignedDigestCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.afterGetBriefIntroSignedDigestCounter, 1)

	if mmGetBriefIntroSignedDigest.inspectFuncGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.inspectFuncGetBriefIntroSignedDigest()
	}

	if mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation.Counter, 1)

		results := mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation.results
		if results == nil {
			mmGetBriefIntroSignedDigest.t.Fatal("No results are set for the CandidateProfileMock.GetBriefIntroSignedDigest")
		}
		return (*results).s1
	}
	if mmGetBriefIntroSignedDigest.funcGetBriefIntroSignedDigest != nil {
		return mmGetBriefIntroSignedDigest.funcGetBriefIntroSignedDigest()
	}
	mmGetBriefIntroSignedDigest.t.Fatalf("Unexpected call to CandidateProfileMock.GetBriefIntroSignedDigest.")
	return
}

// GetBriefIntroSignedDigestAfterCounter returns a count of finished CandidateProfileMock.GetBriefIntroSignedDigest invocations
func (mmGetBriefIntroSignedDigest *CandidateProfileMock) GetBriefIntroSignedDigestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBriefIntroSignedDigest.afterGetBriefIntroSignedDigestCounter)
}

// GetBriefIntroSignedDigestBeforeCounter returns a count of CandidateProfileMock.GetBriefIntroSignedDigest invocations
func (mmGetBriefIntroSignedDigest *CandidateProfileMock) GetBriefIntroSignedDigestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBriefIntroSignedDigest.beforeGetBriefIntroSignedDigestCounter)
}

// MinimockGetBriefIntroSignedDigestDone returns true if the count of the GetBriefIntroSignedDigest invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetBriefIntroSignedDigestDone() bool {
	for _, e := range m.GetBriefIntroSignedDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBriefIntroSignedDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBriefIntroSignedDigest != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetBriefIntroSignedDigestInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetBriefIntroSignedDigestInspect() {
	for _, e := range m.GetBriefIntroSignedDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetBriefIntroSignedDigest")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBriefIntroSignedDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetBriefIntroSignedDigest")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBriefIntroSignedDigest != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetBriefIntroSignedDigest")
	}
}

type mCandidateProfileMockGetDefaultEndpoint struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetDefaultEndpointExpectation
	expectations       []*CandidateProfileMockGetDefaultEndpointExpectation
}

// CandidateProfileMockGetDefaultEndpointExpectation specifies expectation struct of the CandidateProfile.GetDefaultEndpoint
type CandidateProfileMockGetDefaultEndpointExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetDefaultEndpointResults
	Counter uint64
}

// CandidateProfileMockGetDefaultEndpointResults contains results of the CandidateProfile.GetDefaultEndpoint
type CandidateProfileMockGetDefaultEndpointResults struct {
	o1 endpoints.Outbound
}

// Expect sets up expected params for CandidateProfile.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mCandidateProfileMockGetDefaultEndpoint) Expect() *mCandidateProfileMockGetDefaultEndpoint {
	if mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("CandidateProfileMock.GetDefaultEndpoint mock is already set by Set")
	}

	if mmGetDefaultEndpoint.defaultExpectation == nil {
		mmGetDefaultEndpoint.defaultExpectation = &CandidateProfileMockGetDefaultEndpointExpectation{}
	}

	return mmGetDefaultEndpoint
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mCandidateProfileMockGetDefaultEndpoint) Inspect(f func()) *mCandidateProfileMockGetDefaultEndpoint {
	if mmGetDefaultEndpoint.mock.inspectFuncGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetDefaultEndpoint")
	}

	mmGetDefaultEndpoint.mock.inspectFuncGetDefaultEndpoint = f

	return mmGetDefaultEndpoint
}

// Return sets up results that will be returned by CandidateProfile.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mCandidateProfileMockGetDefaultEndpoint) Return(o1 endpoints.Outbound) *CandidateProfileMock {
	if mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("CandidateProfileMock.GetDefaultEndpoint mock is already set by Set")
	}

	if mmGetDefaultEndpoint.defaultExpectation == nil {
		mmGetDefaultEndpoint.defaultExpectation = &CandidateProfileMockGetDefaultEndpointExpectation{mock: mmGetDefaultEndpoint.mock}
	}
	mmGetDefaultEndpoint.defaultExpectation.results = &CandidateProfileMockGetDefaultEndpointResults{o1}
	return mmGetDefaultEndpoint.mock
}

//Set uses given function f to mock the CandidateProfile.GetDefaultEndpoint method
func (mmGetDefaultEndpoint *mCandidateProfileMockGetDefaultEndpoint) Set(f func() (o1 endpoints.Outbound)) *CandidateProfileMock {
	if mmGetDefaultEndpoint.defaultExpectation != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetDefaultEndpoint method")
	}

	if len(mmGetDefaultEndpoint.expectations) > 0 {
		mmGetDefaultEndpoint.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetDefaultEndpoint method")
	}

	mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint = f
	return mmGetDefaultEndpoint.mock
}

// GetDefaultEndpoint implements CandidateProfile
func (mmGetDefaultEndpoint *CandidateProfileMock) GetDefaultEndpoint() (o1 endpoints.Outbound) {
	mm_atomic.AddUint64(&mmGetDefaultEndpoint.beforeGetDefaultEndpointCounter, 1)
	defer mm_atomic.AddUint64(&mmGetDefaultEndpoint.afterGetDefaultEndpointCounter, 1)

	if mmGetDefaultEndpoint.inspectFuncGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.inspectFuncGetDefaultEndpoint()
	}

	if mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation.Counter, 1)

		results := mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation.results
		if results == nil {
			mmGetDefaultEndpoint.t.Fatal("No results are set for the CandidateProfileMock.GetDefaultEndpoint")
		}
		return (*results).o1
	}
	if mmGetDefaultEndpoint.funcGetDefaultEndpoint != nil {
		return mmGetDefaultEndpoint.funcGetDefaultEndpoint()
	}
	mmGetDefaultEndpoint.t.Fatalf("Unexpected call to CandidateProfileMock.GetDefaultEndpoint.")
	return
}

// GetDefaultEndpointAfterCounter returns a count of finished CandidateProfileMock.GetDefaultEndpoint invocations
func (mmGetDefaultEndpoint *CandidateProfileMock) GetDefaultEndpointAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDefaultEndpoint.afterGetDefaultEndpointCounter)
}

// GetDefaultEndpointBeforeCounter returns a count of CandidateProfileMock.GetDefaultEndpoint invocations
func (mmGetDefaultEndpoint *CandidateProfileMock) GetDefaultEndpointBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDefaultEndpoint.beforeGetDefaultEndpointCounter)
}

// MinimockGetDefaultEndpointDone returns true if the count of the GetDefaultEndpoint invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetDefaultEndpointDone() bool {
	for _, e := range m.GetDefaultEndpointMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDefaultEndpointMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDefaultEndpoint != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetDefaultEndpointInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetDefaultEndpointInspect() {
	for _, e := range m.GetDefaultEndpointMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetDefaultEndpoint")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDefaultEndpointMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetDefaultEndpoint")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDefaultEndpoint != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetDefaultEndpoint")
	}
}

type mCandidateProfileMockGetExtraEndpoints struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetExtraEndpointsExpectation
	expectations       []*CandidateProfileMockGetExtraEndpointsExpectation
}

// CandidateProfileMockGetExtraEndpointsExpectation specifies expectation struct of the CandidateProfile.GetExtraEndpoints
type CandidateProfileMockGetExtraEndpointsExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetExtraEndpointsResults
	Counter uint64
}

// CandidateProfileMockGetExtraEndpointsResults contains results of the CandidateProfile.GetExtraEndpoints
type CandidateProfileMockGetExtraEndpointsResults struct {
	oa1 []endpoints.Outbound
}

// Expect sets up expected params for CandidateProfile.GetExtraEndpoints
func (mmGetExtraEndpoints *mCandidateProfileMockGetExtraEndpoints) Expect() *mCandidateProfileMockGetExtraEndpoints {
	if mmGetExtraEndpoints.mock.funcGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("CandidateProfileMock.GetExtraEndpoints mock is already set by Set")
	}

	if mmGetExtraEndpoints.defaultExpectation == nil {
		mmGetExtraEndpoints.defaultExpectation = &CandidateProfileMockGetExtraEndpointsExpectation{}
	}

	return mmGetExtraEndpoints
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetExtraEndpoints
func (mmGetExtraEndpoints *mCandidateProfileMockGetExtraEndpoints) Inspect(f func()) *mCandidateProfileMockGetExtraEndpoints {
	if mmGetExtraEndpoints.mock.inspectFuncGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetExtraEndpoints")
	}

	mmGetExtraEndpoints.mock.inspectFuncGetExtraEndpoints = f

	return mmGetExtraEndpoints
}

// Return sets up results that will be returned by CandidateProfile.GetExtraEndpoints
func (mmGetExtraEndpoints *mCandidateProfileMockGetExtraEndpoints) Return(oa1 []endpoints.Outbound) *CandidateProfileMock {
	if mmGetExtraEndpoints.mock.funcGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("CandidateProfileMock.GetExtraEndpoints mock is already set by Set")
	}

	if mmGetExtraEndpoints.defaultExpectation == nil {
		mmGetExtraEndpoints.defaultExpectation = &CandidateProfileMockGetExtraEndpointsExpectation{mock: mmGetExtraEndpoints.mock}
	}
	mmGetExtraEndpoints.defaultExpectation.results = &CandidateProfileMockGetExtraEndpointsResults{oa1}
	return mmGetExtraEndpoints.mock
}

//Set uses given function f to mock the CandidateProfile.GetExtraEndpoints method
func (mmGetExtraEndpoints *mCandidateProfileMockGetExtraEndpoints) Set(f func() (oa1 []endpoints.Outbound)) *CandidateProfileMock {
	if mmGetExtraEndpoints.defaultExpectation != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetExtraEndpoints method")
	}

	if len(mmGetExtraEndpoints.expectations) > 0 {
		mmGetExtraEndpoints.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetExtraEndpoints method")
	}

	mmGetExtraEndpoints.mock.funcGetExtraEndpoints = f
	return mmGetExtraEndpoints.mock
}

// GetExtraEndpoints implements CandidateProfile
func (mmGetExtraEndpoints *CandidateProfileMock) GetExtraEndpoints() (oa1 []endpoints.Outbound) {
	mm_atomic.AddUint64(&mmGetExtraEndpoints.beforeGetExtraEndpointsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetExtraEndpoints.afterGetExtraEndpointsCounter, 1)

	if mmGetExtraEndpoints.inspectFuncGetExtraEndpoints != nil {
		mmGetExtraEndpoints.inspectFuncGetExtraEndpoints()
	}

	if mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation.Counter, 1)

		results := mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation.results
		if results == nil {
			mmGetExtraEndpoints.t.Fatal("No results are set for the CandidateProfileMock.GetExtraEndpoints")
		}
		return (*results).oa1
	}
	if mmGetExtraEndpoints.funcGetExtraEndpoints != nil {
		return mmGetExtraEndpoints.funcGetExtraEndpoints()
	}
	mmGetExtraEndpoints.t.Fatalf("Unexpected call to CandidateProfileMock.GetExtraEndpoints.")
	return
}

// GetExtraEndpointsAfterCounter returns a count of finished CandidateProfileMock.GetExtraEndpoints invocations
func (mmGetExtraEndpoints *CandidateProfileMock) GetExtraEndpointsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtraEndpoints.afterGetExtraEndpointsCounter)
}

// GetExtraEndpointsBeforeCounter returns a count of CandidateProfileMock.GetExtraEndpoints invocations
func (mmGetExtraEndpoints *CandidateProfileMock) GetExtraEndpointsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtraEndpoints.beforeGetExtraEndpointsCounter)
}

// MinimockGetExtraEndpointsDone returns true if the count of the GetExtraEndpoints invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetExtraEndpointsDone() bool {
	for _, e := range m.GetExtraEndpointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtraEndpointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtraEndpoints != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetExtraEndpointsInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetExtraEndpointsInspect() {
	for _, e := range m.GetExtraEndpointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetExtraEndpoints")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtraEndpointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetExtraEndpoints")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtraEndpoints != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetExtraEndpoints")
	}
}

type mCandidateProfileMockGetIssuedAtPulse struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetIssuedAtPulseExpectation
	expectations       []*CandidateProfileMockGetIssuedAtPulseExpectation
}

// CandidateProfileMockGetIssuedAtPulseExpectation specifies expectation struct of the CandidateProfile.GetIssuedAtPulse
type CandidateProfileMockGetIssuedAtPulseExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetIssuedAtPulseResults
	Counter uint64
}

// CandidateProfileMockGetIssuedAtPulseResults contains results of the CandidateProfile.GetIssuedAtPulse
type CandidateProfileMockGetIssuedAtPulseResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for CandidateProfile.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mCandidateProfileMockGetIssuedAtPulse) Expect() *mCandidateProfileMockGetIssuedAtPulse {
	if mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("CandidateProfileMock.GetIssuedAtPulse mock is already set by Set")
	}

	if mmGetIssuedAtPulse.defaultExpectation == nil {
		mmGetIssuedAtPulse.defaultExpectation = &CandidateProfileMockGetIssuedAtPulseExpectation{}
	}

	return mmGetIssuedAtPulse
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mCandidateProfileMockGetIssuedAtPulse) Inspect(f func()) *mCandidateProfileMockGetIssuedAtPulse {
	if mmGetIssuedAtPulse.mock.inspectFuncGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetIssuedAtPulse")
	}

	mmGetIssuedAtPulse.mock.inspectFuncGetIssuedAtPulse = f

	return mmGetIssuedAtPulse
}

// Return sets up results that will be returned by CandidateProfile.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mCandidateProfileMockGetIssuedAtPulse) Return(n1 pulse.Number) *CandidateProfileMock {
	if mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("CandidateProfileMock.GetIssuedAtPulse mock is already set by Set")
	}

	if mmGetIssuedAtPulse.defaultExpectation == nil {
		mmGetIssuedAtPulse.defaultExpectation = &CandidateProfileMockGetIssuedAtPulseExpectation{mock: mmGetIssuedAtPulse.mock}
	}
	mmGetIssuedAtPulse.defaultExpectation.results = &CandidateProfileMockGetIssuedAtPulseResults{n1}
	return mmGetIssuedAtPulse.mock
}

//Set uses given function f to mock the CandidateProfile.GetIssuedAtPulse method
func (mmGetIssuedAtPulse *mCandidateProfileMockGetIssuedAtPulse) Set(f func() (n1 pulse.Number)) *CandidateProfileMock {
	if mmGetIssuedAtPulse.defaultExpectation != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetIssuedAtPulse method")
	}

	if len(mmGetIssuedAtPulse.expectations) > 0 {
		mmGetIssuedAtPulse.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetIssuedAtPulse method")
	}

	mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse = f
	return mmGetIssuedAtPulse.mock
}

// GetIssuedAtPulse implements CandidateProfile
func (mmGetIssuedAtPulse *CandidateProfileMock) GetIssuedAtPulse() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetIssuedAtPulse.beforeGetIssuedAtPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuedAtPulse.afterGetIssuedAtPulseCounter, 1)

	if mmGetIssuedAtPulse.inspectFuncGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.inspectFuncGetIssuedAtPulse()
	}

	if mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation.Counter, 1)

		results := mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation.results
		if results == nil {
			mmGetIssuedAtPulse.t.Fatal("No results are set for the CandidateProfileMock.GetIssuedAtPulse")
		}
		return (*results).n1
	}
	if mmGetIssuedAtPulse.funcGetIssuedAtPulse != nil {
		return mmGetIssuedAtPulse.funcGetIssuedAtPulse()
	}
	mmGetIssuedAtPulse.t.Fatalf("Unexpected call to CandidateProfileMock.GetIssuedAtPulse.")
	return
}

// GetIssuedAtPulseAfterCounter returns a count of finished CandidateProfileMock.GetIssuedAtPulse invocations
func (mmGetIssuedAtPulse *CandidateProfileMock) GetIssuedAtPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtPulse.afterGetIssuedAtPulseCounter)
}

// GetIssuedAtPulseBeforeCounter returns a count of CandidateProfileMock.GetIssuedAtPulse invocations
func (mmGetIssuedAtPulse *CandidateProfileMock) GetIssuedAtPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtPulse.beforeGetIssuedAtPulseCounter)
}

// MinimockGetIssuedAtPulseDone returns true if the count of the GetIssuedAtPulse invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetIssuedAtPulseDone() bool {
	for _, e := range m.GetIssuedAtPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtPulse != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuedAtPulseInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetIssuedAtPulseInspect() {
	for _, e := range m.GetIssuedAtPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetIssuedAtPulse")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuedAtPulse")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtPulse != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuedAtPulse")
	}
}

type mCandidateProfileMockGetIssuedAtTime struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetIssuedAtTimeExpectation
	expectations       []*CandidateProfileMockGetIssuedAtTimeExpectation
}

// CandidateProfileMockGetIssuedAtTimeExpectation specifies expectation struct of the CandidateProfile.GetIssuedAtTime
type CandidateProfileMockGetIssuedAtTimeExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetIssuedAtTimeResults
	Counter uint64
}

// CandidateProfileMockGetIssuedAtTimeResults contains results of the CandidateProfile.GetIssuedAtTime
type CandidateProfileMockGetIssuedAtTimeResults struct {
	t1 time.Time
}

// Expect sets up expected params for CandidateProfile.GetIssuedAtTime
func (mmGetIssuedAtTime *mCandidateProfileMockGetIssuedAtTime) Expect() *mCandidateProfileMockGetIssuedAtTime {
	if mmGetIssuedAtTime.mock.funcGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("CandidateProfileMock.GetIssuedAtTime mock is already set by Set")
	}

	if mmGetIssuedAtTime.defaultExpectation == nil {
		mmGetIssuedAtTime.defaultExpectation = &CandidateProfileMockGetIssuedAtTimeExpectation{}
	}

	return mmGetIssuedAtTime
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetIssuedAtTime
func (mmGetIssuedAtTime *mCandidateProfileMockGetIssuedAtTime) Inspect(f func()) *mCandidateProfileMockGetIssuedAtTime {
	if mmGetIssuedAtTime.mock.inspectFuncGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetIssuedAtTime")
	}

	mmGetIssuedAtTime.mock.inspectFuncGetIssuedAtTime = f

	return mmGetIssuedAtTime
}

// Return sets up results that will be returned by CandidateProfile.GetIssuedAtTime
func (mmGetIssuedAtTime *mCandidateProfileMockGetIssuedAtTime) Return(t1 time.Time) *CandidateProfileMock {
	if mmGetIssuedAtTime.mock.funcGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("CandidateProfileMock.GetIssuedAtTime mock is already set by Set")
	}

	if mmGetIssuedAtTime.defaultExpectation == nil {
		mmGetIssuedAtTime.defaultExpectation = &CandidateProfileMockGetIssuedAtTimeExpectation{mock: mmGetIssuedAtTime.mock}
	}
	mmGetIssuedAtTime.defaultExpectation.results = &CandidateProfileMockGetIssuedAtTimeResults{t1}
	return mmGetIssuedAtTime.mock
}

//Set uses given function f to mock the CandidateProfile.GetIssuedAtTime method
func (mmGetIssuedAtTime *mCandidateProfileMockGetIssuedAtTime) Set(f func() (t1 time.Time)) *CandidateProfileMock {
	if mmGetIssuedAtTime.defaultExpectation != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetIssuedAtTime method")
	}

	if len(mmGetIssuedAtTime.expectations) > 0 {
		mmGetIssuedAtTime.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetIssuedAtTime method")
	}

	mmGetIssuedAtTime.mock.funcGetIssuedAtTime = f
	return mmGetIssuedAtTime.mock
}

// GetIssuedAtTime implements CandidateProfile
func (mmGetIssuedAtTime *CandidateProfileMock) GetIssuedAtTime() (t1 time.Time) {
	mm_atomic.AddUint64(&mmGetIssuedAtTime.beforeGetIssuedAtTimeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuedAtTime.afterGetIssuedAtTimeCounter, 1)

	if mmGetIssuedAtTime.inspectFuncGetIssuedAtTime != nil {
		mmGetIssuedAtTime.inspectFuncGetIssuedAtTime()
	}

	if mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation.Counter, 1)

		results := mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation.results
		if results == nil {
			mmGetIssuedAtTime.t.Fatal("No results are set for the CandidateProfileMock.GetIssuedAtTime")
		}
		return (*results).t1
	}
	if mmGetIssuedAtTime.funcGetIssuedAtTime != nil {
		return mmGetIssuedAtTime.funcGetIssuedAtTime()
	}
	mmGetIssuedAtTime.t.Fatalf("Unexpected call to CandidateProfileMock.GetIssuedAtTime.")
	return
}

// GetIssuedAtTimeAfterCounter returns a count of finished CandidateProfileMock.GetIssuedAtTime invocations
func (mmGetIssuedAtTime *CandidateProfileMock) GetIssuedAtTimeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtTime.afterGetIssuedAtTimeCounter)
}

// GetIssuedAtTimeBeforeCounter returns a count of CandidateProfileMock.GetIssuedAtTime invocations
func (mmGetIssuedAtTime *CandidateProfileMock) GetIssuedAtTimeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtTime.beforeGetIssuedAtTimeCounter)
}

// MinimockGetIssuedAtTimeDone returns true if the count of the GetIssuedAtTime invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetIssuedAtTimeDone() bool {
	for _, e := range m.GetIssuedAtTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtTime != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuedAtTimeInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetIssuedAtTimeInspect() {
	for _, e := range m.GetIssuedAtTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetIssuedAtTime")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuedAtTime")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtTime != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuedAtTime")
	}
}

type mCandidateProfileMockGetIssuerID struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetIssuerIDExpectation
	expectations       []*CandidateProfileMockGetIssuerIDExpectation
}

// CandidateProfileMockGetIssuerIDExpectation specifies expectation struct of the CandidateProfile.GetIssuerID
type CandidateProfileMockGetIssuerIDExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetIssuerIDResults
	Counter uint64
}

// CandidateProfileMockGetIssuerIDResults contains results of the CandidateProfile.GetIssuerID
type CandidateProfileMockGetIssuerIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for CandidateProfile.GetIssuerID
func (mmGetIssuerID *mCandidateProfileMockGetIssuerID) Expect() *mCandidateProfileMockGetIssuerID {
	if mmGetIssuerID.mock.funcGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("CandidateProfileMock.GetIssuerID mock is already set by Set")
	}

	if mmGetIssuerID.defaultExpectation == nil {
		mmGetIssuerID.defaultExpectation = &CandidateProfileMockGetIssuerIDExpectation{}
	}

	return mmGetIssuerID
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetIssuerID
func (mmGetIssuerID *mCandidateProfileMockGetIssuerID) Inspect(f func()) *mCandidateProfileMockGetIssuerID {
	if mmGetIssuerID.mock.inspectFuncGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetIssuerID")
	}

	mmGetIssuerID.mock.inspectFuncGetIssuerID = f

	return mmGetIssuerID
}

// Return sets up results that will be returned by CandidateProfile.GetIssuerID
func (mmGetIssuerID *mCandidateProfileMockGetIssuerID) Return(s1 insolar.ShortNodeID) *CandidateProfileMock {
	if mmGetIssuerID.mock.funcGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("CandidateProfileMock.GetIssuerID mock is already set by Set")
	}

	if mmGetIssuerID.defaultExpectation == nil {
		mmGetIssuerID.defaultExpectation = &CandidateProfileMockGetIssuerIDExpectation{mock: mmGetIssuerID.mock}
	}
	mmGetIssuerID.defaultExpectation.results = &CandidateProfileMockGetIssuerIDResults{s1}
	return mmGetIssuerID.mock
}

//Set uses given function f to mock the CandidateProfile.GetIssuerID method
func (mmGetIssuerID *mCandidateProfileMockGetIssuerID) Set(f func() (s1 insolar.ShortNodeID)) *CandidateProfileMock {
	if mmGetIssuerID.defaultExpectation != nil {
		mmGetIssuerID.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetIssuerID method")
	}

	if len(mmGetIssuerID.expectations) > 0 {
		mmGetIssuerID.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetIssuerID method")
	}

	mmGetIssuerID.mock.funcGetIssuerID = f
	return mmGetIssuerID.mock
}

// GetIssuerID implements CandidateProfile
func (mmGetIssuerID *CandidateProfileMock) GetIssuerID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetIssuerID.beforeGetIssuerIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuerID.afterGetIssuerIDCounter, 1)

	if mmGetIssuerID.inspectFuncGetIssuerID != nil {
		mmGetIssuerID.inspectFuncGetIssuerID()
	}

	if mmGetIssuerID.GetIssuerIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuerID.GetIssuerIDMock.defaultExpectation.Counter, 1)

		results := mmGetIssuerID.GetIssuerIDMock.defaultExpectation.results
		if results == nil {
			mmGetIssuerID.t.Fatal("No results are set for the CandidateProfileMock.GetIssuerID")
		}
		return (*results).s1
	}
	if mmGetIssuerID.funcGetIssuerID != nil {
		return mmGetIssuerID.funcGetIssuerID()
	}
	mmGetIssuerID.t.Fatalf("Unexpected call to CandidateProfileMock.GetIssuerID.")
	return
}

// GetIssuerIDAfterCounter returns a count of finished CandidateProfileMock.GetIssuerID invocations
func (mmGetIssuerID *CandidateProfileMock) GetIssuerIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerID.afterGetIssuerIDCounter)
}

// GetIssuerIDBeforeCounter returns a count of CandidateProfileMock.GetIssuerID invocations
func (mmGetIssuerID *CandidateProfileMock) GetIssuerIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerID.beforeGetIssuerIDCounter)
}

// MinimockGetIssuerIDDone returns true if the count of the GetIssuerID invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetIssuerIDDone() bool {
	for _, e := range m.GetIssuerIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerID != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuerIDInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetIssuerIDInspect() {
	for _, e := range m.GetIssuerIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetIssuerID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuerID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerID != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuerID")
	}
}

type mCandidateProfileMockGetIssuerSignature struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetIssuerSignatureExpectation
	expectations       []*CandidateProfileMockGetIssuerSignatureExpectation
}

// CandidateProfileMockGetIssuerSignatureExpectation specifies expectation struct of the CandidateProfile.GetIssuerSignature
type CandidateProfileMockGetIssuerSignatureExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetIssuerSignatureResults
	Counter uint64
}

// CandidateProfileMockGetIssuerSignatureResults contains results of the CandidateProfile.GetIssuerSignature
type CandidateProfileMockGetIssuerSignatureResults struct {
	s1 cryptkit.SignatureHolder
}

// Expect sets up expected params for CandidateProfile.GetIssuerSignature
func (mmGetIssuerSignature *mCandidateProfileMockGetIssuerSignature) Expect() *mCandidateProfileMockGetIssuerSignature {
	if mmGetIssuerSignature.mock.funcGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("CandidateProfileMock.GetIssuerSignature mock is already set by Set")
	}

	if mmGetIssuerSignature.defaultExpectation == nil {
		mmGetIssuerSignature.defaultExpectation = &CandidateProfileMockGetIssuerSignatureExpectation{}
	}

	return mmGetIssuerSignature
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetIssuerSignature
func (mmGetIssuerSignature *mCandidateProfileMockGetIssuerSignature) Inspect(f func()) *mCandidateProfileMockGetIssuerSignature {
	if mmGetIssuerSignature.mock.inspectFuncGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetIssuerSignature")
	}

	mmGetIssuerSignature.mock.inspectFuncGetIssuerSignature = f

	return mmGetIssuerSignature
}

// Return sets up results that will be returned by CandidateProfile.GetIssuerSignature
func (mmGetIssuerSignature *mCandidateProfileMockGetIssuerSignature) Return(s1 cryptkit.SignatureHolder) *CandidateProfileMock {
	if mmGetIssuerSignature.mock.funcGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("CandidateProfileMock.GetIssuerSignature mock is already set by Set")
	}

	if mmGetIssuerSignature.defaultExpectation == nil {
		mmGetIssuerSignature.defaultExpectation = &CandidateProfileMockGetIssuerSignatureExpectation{mock: mmGetIssuerSignature.mock}
	}
	mmGetIssuerSignature.defaultExpectation.results = &CandidateProfileMockGetIssuerSignatureResults{s1}
	return mmGetIssuerSignature.mock
}

//Set uses given function f to mock the CandidateProfile.GetIssuerSignature method
func (mmGetIssuerSignature *mCandidateProfileMockGetIssuerSignature) Set(f func() (s1 cryptkit.SignatureHolder)) *CandidateProfileMock {
	if mmGetIssuerSignature.defaultExpectation != nil {
		mmGetIssuerSignature.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetIssuerSignature method")
	}

	if len(mmGetIssuerSignature.expectations) > 0 {
		mmGetIssuerSignature.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetIssuerSignature method")
	}

	mmGetIssuerSignature.mock.funcGetIssuerSignature = f
	return mmGetIssuerSignature.mock
}

// GetIssuerSignature implements CandidateProfile
func (mmGetIssuerSignature *CandidateProfileMock) GetIssuerSignature() (s1 cryptkit.SignatureHolder) {
	mm_atomic.AddUint64(&mmGetIssuerSignature.beforeGetIssuerSignatureCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuerSignature.afterGetIssuerSignatureCounter, 1)

	if mmGetIssuerSignature.inspectFuncGetIssuerSignature != nil {
		mmGetIssuerSignature.inspectFuncGetIssuerSignature()
	}

	if mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation.Counter, 1)

		results := mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation.results
		if results == nil {
			mmGetIssuerSignature.t.Fatal("No results are set for the CandidateProfileMock.GetIssuerSignature")
		}
		return (*results).s1
	}
	if mmGetIssuerSignature.funcGetIssuerSignature != nil {
		return mmGetIssuerSignature.funcGetIssuerSignature()
	}
	mmGetIssuerSignature.t.Fatalf("Unexpected call to CandidateProfileMock.GetIssuerSignature.")
	return
}

// GetIssuerSignatureAfterCounter returns a count of finished CandidateProfileMock.GetIssuerSignature invocations
func (mmGetIssuerSignature *CandidateProfileMock) GetIssuerSignatureAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerSignature.afterGetIssuerSignatureCounter)
}

// GetIssuerSignatureBeforeCounter returns a count of CandidateProfileMock.GetIssuerSignature invocations
func (mmGetIssuerSignature *CandidateProfileMock) GetIssuerSignatureBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerSignature.beforeGetIssuerSignatureCounter)
}

// MinimockGetIssuerSignatureDone returns true if the count of the GetIssuerSignature invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetIssuerSignatureDone() bool {
	for _, e := range m.GetIssuerSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerSignature != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuerSignatureInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetIssuerSignatureInspect() {
	for _, e := range m.GetIssuerSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetIssuerSignature")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuerSignature")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerSignature != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetIssuerSignature")
	}
}

type mCandidateProfileMockGetNodePublicKey struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetNodePublicKeyExpectation
	expectations       []*CandidateProfileMockGetNodePublicKeyExpectation
}

// CandidateProfileMockGetNodePublicKeyExpectation specifies expectation struct of the CandidateProfile.GetNodePublicKey
type CandidateProfileMockGetNodePublicKeyExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetNodePublicKeyResults
	Counter uint64
}

// CandidateProfileMockGetNodePublicKeyResults contains results of the CandidateProfile.GetNodePublicKey
type CandidateProfileMockGetNodePublicKeyResults struct {
	s1 cryptkit.SignatureKeyHolder
}

// Expect sets up expected params for CandidateProfile.GetNodePublicKey
func (mmGetNodePublicKey *mCandidateProfileMockGetNodePublicKey) Expect() *mCandidateProfileMockGetNodePublicKey {
	if mmGetNodePublicKey.mock.funcGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("CandidateProfileMock.GetNodePublicKey mock is already set by Set")
	}

	if mmGetNodePublicKey.defaultExpectation == nil {
		mmGetNodePublicKey.defaultExpectation = &CandidateProfileMockGetNodePublicKeyExpectation{}
	}

	return mmGetNodePublicKey
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetNodePublicKey
func (mmGetNodePublicKey *mCandidateProfileMockGetNodePublicKey) Inspect(f func()) *mCandidateProfileMockGetNodePublicKey {
	if mmGetNodePublicKey.mock.inspectFuncGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetNodePublicKey")
	}

	mmGetNodePublicKey.mock.inspectFuncGetNodePublicKey = f

	return mmGetNodePublicKey
}

// Return sets up results that will be returned by CandidateProfile.GetNodePublicKey
func (mmGetNodePublicKey *mCandidateProfileMockGetNodePublicKey) Return(s1 cryptkit.SignatureKeyHolder) *CandidateProfileMock {
	if mmGetNodePublicKey.mock.funcGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("CandidateProfileMock.GetNodePublicKey mock is already set by Set")
	}

	if mmGetNodePublicKey.defaultExpectation == nil {
		mmGetNodePublicKey.defaultExpectation = &CandidateProfileMockGetNodePublicKeyExpectation{mock: mmGetNodePublicKey.mock}
	}
	mmGetNodePublicKey.defaultExpectation.results = &CandidateProfileMockGetNodePublicKeyResults{s1}
	return mmGetNodePublicKey.mock
}

//Set uses given function f to mock the CandidateProfile.GetNodePublicKey method
func (mmGetNodePublicKey *mCandidateProfileMockGetNodePublicKey) Set(f func() (s1 cryptkit.SignatureKeyHolder)) *CandidateProfileMock {
	if mmGetNodePublicKey.defaultExpectation != nil {
		mmGetNodePublicKey.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetNodePublicKey method")
	}

	if len(mmGetNodePublicKey.expectations) > 0 {
		mmGetNodePublicKey.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetNodePublicKey method")
	}

	mmGetNodePublicKey.mock.funcGetNodePublicKey = f
	return mmGetNodePublicKey.mock
}

// GetNodePublicKey implements CandidateProfile
func (mmGetNodePublicKey *CandidateProfileMock) GetNodePublicKey() (s1 cryptkit.SignatureKeyHolder) {
	mm_atomic.AddUint64(&mmGetNodePublicKey.beforeGetNodePublicKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNodePublicKey.afterGetNodePublicKeyCounter, 1)

	if mmGetNodePublicKey.inspectFuncGetNodePublicKey != nil {
		mmGetNodePublicKey.inspectFuncGetNodePublicKey()
	}

	if mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation.Counter, 1)

		results := mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation.results
		if results == nil {
			mmGetNodePublicKey.t.Fatal("No results are set for the CandidateProfileMock.GetNodePublicKey")
		}
		return (*results).s1
	}
	if mmGetNodePublicKey.funcGetNodePublicKey != nil {
		return mmGetNodePublicKey.funcGetNodePublicKey()
	}
	mmGetNodePublicKey.t.Fatalf("Unexpected call to CandidateProfileMock.GetNodePublicKey.")
	return
}

// GetNodePublicKeyAfterCounter returns a count of finished CandidateProfileMock.GetNodePublicKey invocations
func (mmGetNodePublicKey *CandidateProfileMock) GetNodePublicKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodePublicKey.afterGetNodePublicKeyCounter)
}

// GetNodePublicKeyBeforeCounter returns a count of CandidateProfileMock.GetNodePublicKey invocations
func (mmGetNodePublicKey *CandidateProfileMock) GetNodePublicKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodePublicKey.beforeGetNodePublicKeyCounter)
}

// MinimockGetNodePublicKeyDone returns true if the count of the GetNodePublicKey invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetNodePublicKeyDone() bool {
	for _, e := range m.GetNodePublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodePublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodePublicKey != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNodePublicKeyInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetNodePublicKeyInspect() {
	for _, e := range m.GetNodePublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetNodePublicKey")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodePublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetNodePublicKey")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodePublicKey != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetNodePublicKey")
	}
}

type mCandidateProfileMockGetPowerLevels struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetPowerLevelsExpectation
	expectations       []*CandidateProfileMockGetPowerLevelsExpectation
}

// CandidateProfileMockGetPowerLevelsExpectation specifies expectation struct of the CandidateProfile.GetPowerLevels
type CandidateProfileMockGetPowerLevelsExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetPowerLevelsResults
	Counter uint64
}

// CandidateProfileMockGetPowerLevelsResults contains results of the CandidateProfile.GetPowerLevels
type CandidateProfileMockGetPowerLevelsResults struct {
	p1 member.PowerSet
}

// Expect sets up expected params for CandidateProfile.GetPowerLevels
func (mmGetPowerLevels *mCandidateProfileMockGetPowerLevels) Expect() *mCandidateProfileMockGetPowerLevels {
	if mmGetPowerLevels.mock.funcGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("CandidateProfileMock.GetPowerLevels mock is already set by Set")
	}

	if mmGetPowerLevels.defaultExpectation == nil {
		mmGetPowerLevels.defaultExpectation = &CandidateProfileMockGetPowerLevelsExpectation{}
	}

	return mmGetPowerLevels
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetPowerLevels
func (mmGetPowerLevels *mCandidateProfileMockGetPowerLevels) Inspect(f func()) *mCandidateProfileMockGetPowerLevels {
	if mmGetPowerLevels.mock.inspectFuncGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetPowerLevels")
	}

	mmGetPowerLevels.mock.inspectFuncGetPowerLevels = f

	return mmGetPowerLevels
}

// Return sets up results that will be returned by CandidateProfile.GetPowerLevels
func (mmGetPowerLevels *mCandidateProfileMockGetPowerLevels) Return(p1 member.PowerSet) *CandidateProfileMock {
	if mmGetPowerLevels.mock.funcGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("CandidateProfileMock.GetPowerLevels mock is already set by Set")
	}

	if mmGetPowerLevels.defaultExpectation == nil {
		mmGetPowerLevels.defaultExpectation = &CandidateProfileMockGetPowerLevelsExpectation{mock: mmGetPowerLevels.mock}
	}
	mmGetPowerLevels.defaultExpectation.results = &CandidateProfileMockGetPowerLevelsResults{p1}
	return mmGetPowerLevels.mock
}

//Set uses given function f to mock the CandidateProfile.GetPowerLevels method
func (mmGetPowerLevels *mCandidateProfileMockGetPowerLevels) Set(f func() (p1 member.PowerSet)) *CandidateProfileMock {
	if mmGetPowerLevels.defaultExpectation != nil {
		mmGetPowerLevels.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetPowerLevels method")
	}

	if len(mmGetPowerLevels.expectations) > 0 {
		mmGetPowerLevels.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetPowerLevels method")
	}

	mmGetPowerLevels.mock.funcGetPowerLevels = f
	return mmGetPowerLevels.mock
}

// GetPowerLevels implements CandidateProfile
func (mmGetPowerLevels *CandidateProfileMock) GetPowerLevels() (p1 member.PowerSet) {
	mm_atomic.AddUint64(&mmGetPowerLevels.beforeGetPowerLevelsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPowerLevels.afterGetPowerLevelsCounter, 1)

	if mmGetPowerLevels.inspectFuncGetPowerLevels != nil {
		mmGetPowerLevels.inspectFuncGetPowerLevels()
	}

	if mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation.Counter, 1)

		results := mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation.results
		if results == nil {
			mmGetPowerLevels.t.Fatal("No results are set for the CandidateProfileMock.GetPowerLevels")
		}
		return (*results).p1
	}
	if mmGetPowerLevels.funcGetPowerLevels != nil {
		return mmGetPowerLevels.funcGetPowerLevels()
	}
	mmGetPowerLevels.t.Fatalf("Unexpected call to CandidateProfileMock.GetPowerLevels.")
	return
}

// GetPowerLevelsAfterCounter returns a count of finished CandidateProfileMock.GetPowerLevels invocations
func (mmGetPowerLevels *CandidateProfileMock) GetPowerLevelsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPowerLevels.afterGetPowerLevelsCounter)
}

// GetPowerLevelsBeforeCounter returns a count of CandidateProfileMock.GetPowerLevels invocations
func (mmGetPowerLevels *CandidateProfileMock) GetPowerLevelsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPowerLevels.beforeGetPowerLevelsCounter)
}

// MinimockGetPowerLevelsDone returns true if the count of the GetPowerLevels invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetPowerLevelsDone() bool {
	for _, e := range m.GetPowerLevelsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerLevelsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPowerLevels != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPowerLevelsInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetPowerLevelsInspect() {
	for _, e := range m.GetPowerLevelsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetPowerLevels")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerLevelsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetPowerLevels")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPowerLevels != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetPowerLevels")
	}
}

type mCandidateProfileMockGetPrimaryRole struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetPrimaryRoleExpectation
	expectations       []*CandidateProfileMockGetPrimaryRoleExpectation
}

// CandidateProfileMockGetPrimaryRoleExpectation specifies expectation struct of the CandidateProfile.GetPrimaryRole
type CandidateProfileMockGetPrimaryRoleExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetPrimaryRoleResults
	Counter uint64
}

// CandidateProfileMockGetPrimaryRoleResults contains results of the CandidateProfile.GetPrimaryRole
type CandidateProfileMockGetPrimaryRoleResults struct {
	p1 member.PrimaryRole
}

// Expect sets up expected params for CandidateProfile.GetPrimaryRole
func (mmGetPrimaryRole *mCandidateProfileMockGetPrimaryRole) Expect() *mCandidateProfileMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("CandidateProfileMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &CandidateProfileMockGetPrimaryRoleExpectation{}
	}

	return mmGetPrimaryRole
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetPrimaryRole
func (mmGetPrimaryRole *mCandidateProfileMockGetPrimaryRole) Inspect(f func()) *mCandidateProfileMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetPrimaryRole")
	}

	mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole = f

	return mmGetPrimaryRole
}

// Return sets up results that will be returned by CandidateProfile.GetPrimaryRole
func (mmGetPrimaryRole *mCandidateProfileMockGetPrimaryRole) Return(p1 member.PrimaryRole) *CandidateProfileMock {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("CandidateProfileMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &CandidateProfileMockGetPrimaryRoleExpectation{mock: mmGetPrimaryRole.mock}
	}
	mmGetPrimaryRole.defaultExpectation.results = &CandidateProfileMockGetPrimaryRoleResults{p1}
	return mmGetPrimaryRole.mock
}

//Set uses given function f to mock the CandidateProfile.GetPrimaryRole method
func (mmGetPrimaryRole *mCandidateProfileMockGetPrimaryRole) Set(f func() (p1 member.PrimaryRole)) *CandidateProfileMock {
	if mmGetPrimaryRole.defaultExpectation != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetPrimaryRole method")
	}

	if len(mmGetPrimaryRole.expectations) > 0 {
		mmGetPrimaryRole.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetPrimaryRole method")
	}

	mmGetPrimaryRole.mock.funcGetPrimaryRole = f
	return mmGetPrimaryRole.mock
}

// GetPrimaryRole implements CandidateProfile
func (mmGetPrimaryRole *CandidateProfileMock) GetPrimaryRole() (p1 member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter, 1)

	if mmGetPrimaryRole.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.inspectFuncGetPrimaryRole()
	}

	if mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.Counter, 1)

		results := mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.results
		if results == nil {
			mmGetPrimaryRole.t.Fatal("No results are set for the CandidateProfileMock.GetPrimaryRole")
		}
		return (*results).p1
	}
	if mmGetPrimaryRole.funcGetPrimaryRole != nil {
		return mmGetPrimaryRole.funcGetPrimaryRole()
	}
	mmGetPrimaryRole.t.Fatalf("Unexpected call to CandidateProfileMock.GetPrimaryRole.")
	return
}

// GetPrimaryRoleAfterCounter returns a count of finished CandidateProfileMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *CandidateProfileMock) GetPrimaryRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter)
}

// GetPrimaryRoleBeforeCounter returns a count of CandidateProfileMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *CandidateProfileMock) GetPrimaryRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter)
}

// MinimockGetPrimaryRoleDone returns true if the count of the GetPrimaryRole invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetPrimaryRoleDone() bool {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPrimaryRoleInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetPrimaryRoleInspect() {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetPrimaryRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetPrimaryRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetPrimaryRole")
	}
}

type mCandidateProfileMockGetReference struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetReferenceExpectation
	expectations       []*CandidateProfileMockGetReferenceExpectation
}

// CandidateProfileMockGetReferenceExpectation specifies expectation struct of the CandidateProfile.GetReference
type CandidateProfileMockGetReferenceExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetReferenceResults
	Counter uint64
}

// CandidateProfileMockGetReferenceResults contains results of the CandidateProfile.GetReference
type CandidateProfileMockGetReferenceResults struct {
	r1 insolar.Reference
}

// Expect sets up expected params for CandidateProfile.GetReference
func (mmGetReference *mCandidateProfileMockGetReference) Expect() *mCandidateProfileMockGetReference {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("CandidateProfileMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &CandidateProfileMockGetReferenceExpectation{}
	}

	return mmGetReference
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetReference
func (mmGetReference *mCandidateProfileMockGetReference) Inspect(f func()) *mCandidateProfileMockGetReference {
	if mmGetReference.mock.inspectFuncGetReference != nil {
		mmGetReference.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetReference")
	}

	mmGetReference.mock.inspectFuncGetReference = f

	return mmGetReference
}

// Return sets up results that will be returned by CandidateProfile.GetReference
func (mmGetReference *mCandidateProfileMockGetReference) Return(r1 insolar.Reference) *CandidateProfileMock {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("CandidateProfileMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &CandidateProfileMockGetReferenceExpectation{mock: mmGetReference.mock}
	}
	mmGetReference.defaultExpectation.results = &CandidateProfileMockGetReferenceResults{r1}
	return mmGetReference.mock
}

//Set uses given function f to mock the CandidateProfile.GetReference method
func (mmGetReference *mCandidateProfileMockGetReference) Set(f func() (r1 insolar.Reference)) *CandidateProfileMock {
	if mmGetReference.defaultExpectation != nil {
		mmGetReference.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetReference method")
	}

	if len(mmGetReference.expectations) > 0 {
		mmGetReference.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetReference method")
	}

	mmGetReference.mock.funcGetReference = f
	return mmGetReference.mock
}

// GetReference implements CandidateProfile
func (mmGetReference *CandidateProfileMock) GetReference() (r1 insolar.Reference) {
	mm_atomic.AddUint64(&mmGetReference.beforeGetReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReference.afterGetReferenceCounter, 1)

	if mmGetReference.inspectFuncGetReference != nil {
		mmGetReference.inspectFuncGetReference()
	}

	if mmGetReference.GetReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReference.GetReferenceMock.defaultExpectation.Counter, 1)

		results := mmGetReference.GetReferenceMock.defaultExpectation.results
		if results == nil {
			mmGetReference.t.Fatal("No results are set for the CandidateProfileMock.GetReference")
		}
		return (*results).r1
	}
	if mmGetReference.funcGetReference != nil {
		return mmGetReference.funcGetReference()
	}
	mmGetReference.t.Fatalf("Unexpected call to CandidateProfileMock.GetReference.")
	return
}

// GetReferenceAfterCounter returns a count of finished CandidateProfileMock.GetReference invocations
func (mmGetReference *CandidateProfileMock) GetReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.afterGetReferenceCounter)
}

// GetReferenceBeforeCounter returns a count of CandidateProfileMock.GetReference invocations
func (mmGetReference *CandidateProfileMock) GetReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.beforeGetReferenceCounter)
}

// MinimockGetReferenceDone returns true if the count of the GetReference invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetReferenceDone() bool {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReferenceInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetReferenceInspect() {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetReference")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetReference")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetReference")
	}
}

type mCandidateProfileMockGetSpecialRoles struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetSpecialRolesExpectation
	expectations       []*CandidateProfileMockGetSpecialRolesExpectation
}

// CandidateProfileMockGetSpecialRolesExpectation specifies expectation struct of the CandidateProfile.GetSpecialRoles
type CandidateProfileMockGetSpecialRolesExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetSpecialRolesResults
	Counter uint64
}

// CandidateProfileMockGetSpecialRolesResults contains results of the CandidateProfile.GetSpecialRoles
type CandidateProfileMockGetSpecialRolesResults struct {
	s1 member.SpecialRole
}

// Expect sets up expected params for CandidateProfile.GetSpecialRoles
func (mmGetSpecialRoles *mCandidateProfileMockGetSpecialRoles) Expect() *mCandidateProfileMockGetSpecialRoles {
	if mmGetSpecialRoles.mock.funcGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("CandidateProfileMock.GetSpecialRoles mock is already set by Set")
	}

	if mmGetSpecialRoles.defaultExpectation == nil {
		mmGetSpecialRoles.defaultExpectation = &CandidateProfileMockGetSpecialRolesExpectation{}
	}

	return mmGetSpecialRoles
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetSpecialRoles
func (mmGetSpecialRoles *mCandidateProfileMockGetSpecialRoles) Inspect(f func()) *mCandidateProfileMockGetSpecialRoles {
	if mmGetSpecialRoles.mock.inspectFuncGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetSpecialRoles")
	}

	mmGetSpecialRoles.mock.inspectFuncGetSpecialRoles = f

	return mmGetSpecialRoles
}

// Return sets up results that will be returned by CandidateProfile.GetSpecialRoles
func (mmGetSpecialRoles *mCandidateProfileMockGetSpecialRoles) Return(s1 member.SpecialRole) *CandidateProfileMock {
	if mmGetSpecialRoles.mock.funcGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("CandidateProfileMock.GetSpecialRoles mock is already set by Set")
	}

	if mmGetSpecialRoles.defaultExpectation == nil {
		mmGetSpecialRoles.defaultExpectation = &CandidateProfileMockGetSpecialRolesExpectation{mock: mmGetSpecialRoles.mock}
	}
	mmGetSpecialRoles.defaultExpectation.results = &CandidateProfileMockGetSpecialRolesResults{s1}
	return mmGetSpecialRoles.mock
}

//Set uses given function f to mock the CandidateProfile.GetSpecialRoles method
func (mmGetSpecialRoles *mCandidateProfileMockGetSpecialRoles) Set(f func() (s1 member.SpecialRole)) *CandidateProfileMock {
	if mmGetSpecialRoles.defaultExpectation != nil {
		mmGetSpecialRoles.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetSpecialRoles method")
	}

	if len(mmGetSpecialRoles.expectations) > 0 {
		mmGetSpecialRoles.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetSpecialRoles method")
	}

	mmGetSpecialRoles.mock.funcGetSpecialRoles = f
	return mmGetSpecialRoles.mock
}

// GetSpecialRoles implements CandidateProfile
func (mmGetSpecialRoles *CandidateProfileMock) GetSpecialRoles() (s1 member.SpecialRole) {
	mm_atomic.AddUint64(&mmGetSpecialRoles.beforeGetSpecialRolesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSpecialRoles.afterGetSpecialRolesCounter, 1)

	if mmGetSpecialRoles.inspectFuncGetSpecialRoles != nil {
		mmGetSpecialRoles.inspectFuncGetSpecialRoles()
	}

	if mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation.Counter, 1)

		results := mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation.results
		if results == nil {
			mmGetSpecialRoles.t.Fatal("No results are set for the CandidateProfileMock.GetSpecialRoles")
		}
		return (*results).s1
	}
	if mmGetSpecialRoles.funcGetSpecialRoles != nil {
		return mmGetSpecialRoles.funcGetSpecialRoles()
	}
	mmGetSpecialRoles.t.Fatalf("Unexpected call to CandidateProfileMock.GetSpecialRoles.")
	return
}

// GetSpecialRolesAfterCounter returns a count of finished CandidateProfileMock.GetSpecialRoles invocations
func (mmGetSpecialRoles *CandidateProfileMock) GetSpecialRolesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpecialRoles.afterGetSpecialRolesCounter)
}

// GetSpecialRolesBeforeCounter returns a count of CandidateProfileMock.GetSpecialRoles invocations
func (mmGetSpecialRoles *CandidateProfileMock) GetSpecialRolesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpecialRoles.beforeGetSpecialRolesCounter)
}

// MinimockGetSpecialRolesDone returns true if the count of the GetSpecialRoles invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetSpecialRolesDone() bool {
	for _, e := range m.GetSpecialRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpecialRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpecialRoles != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSpecialRolesInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetSpecialRolesInspect() {
	for _, e := range m.GetSpecialRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetSpecialRoles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpecialRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetSpecialRoles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpecialRoles != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetSpecialRoles")
	}
}

type mCandidateProfileMockGetStartPower struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetStartPowerExpectation
	expectations       []*CandidateProfileMockGetStartPowerExpectation
}

// CandidateProfileMockGetStartPowerExpectation specifies expectation struct of the CandidateProfile.GetStartPower
type CandidateProfileMockGetStartPowerExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetStartPowerResults
	Counter uint64
}

// CandidateProfileMockGetStartPowerResults contains results of the CandidateProfile.GetStartPower
type CandidateProfileMockGetStartPowerResults struct {
	p1 member.Power
}

// Expect sets up expected params for CandidateProfile.GetStartPower
func (mmGetStartPower *mCandidateProfileMockGetStartPower) Expect() *mCandidateProfileMockGetStartPower {
	if mmGetStartPower.mock.funcGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("CandidateProfileMock.GetStartPower mock is already set by Set")
	}

	if mmGetStartPower.defaultExpectation == nil {
		mmGetStartPower.defaultExpectation = &CandidateProfileMockGetStartPowerExpectation{}
	}

	return mmGetStartPower
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetStartPower
func (mmGetStartPower *mCandidateProfileMockGetStartPower) Inspect(f func()) *mCandidateProfileMockGetStartPower {
	if mmGetStartPower.mock.inspectFuncGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetStartPower")
	}

	mmGetStartPower.mock.inspectFuncGetStartPower = f

	return mmGetStartPower
}

// Return sets up results that will be returned by CandidateProfile.GetStartPower
func (mmGetStartPower *mCandidateProfileMockGetStartPower) Return(p1 member.Power) *CandidateProfileMock {
	if mmGetStartPower.mock.funcGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("CandidateProfileMock.GetStartPower mock is already set by Set")
	}

	if mmGetStartPower.defaultExpectation == nil {
		mmGetStartPower.defaultExpectation = &CandidateProfileMockGetStartPowerExpectation{mock: mmGetStartPower.mock}
	}
	mmGetStartPower.defaultExpectation.results = &CandidateProfileMockGetStartPowerResults{p1}
	return mmGetStartPower.mock
}

//Set uses given function f to mock the CandidateProfile.GetStartPower method
func (mmGetStartPower *mCandidateProfileMockGetStartPower) Set(f func() (p1 member.Power)) *CandidateProfileMock {
	if mmGetStartPower.defaultExpectation != nil {
		mmGetStartPower.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetStartPower method")
	}

	if len(mmGetStartPower.expectations) > 0 {
		mmGetStartPower.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetStartPower method")
	}

	mmGetStartPower.mock.funcGetStartPower = f
	return mmGetStartPower.mock
}

// GetStartPower implements CandidateProfile
func (mmGetStartPower *CandidateProfileMock) GetStartPower() (p1 member.Power) {
	mm_atomic.AddUint64(&mmGetStartPower.beforeGetStartPowerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStartPower.afterGetStartPowerCounter, 1)

	if mmGetStartPower.inspectFuncGetStartPower != nil {
		mmGetStartPower.inspectFuncGetStartPower()
	}

	if mmGetStartPower.GetStartPowerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStartPower.GetStartPowerMock.defaultExpectation.Counter, 1)

		results := mmGetStartPower.GetStartPowerMock.defaultExpectation.results
		if results == nil {
			mmGetStartPower.t.Fatal("No results are set for the CandidateProfileMock.GetStartPower")
		}
		return (*results).p1
	}
	if mmGetStartPower.funcGetStartPower != nil {
		return mmGetStartPower.funcGetStartPower()
	}
	mmGetStartPower.t.Fatalf("Unexpected call to CandidateProfileMock.GetStartPower.")
	return
}

// GetStartPowerAfterCounter returns a count of finished CandidateProfileMock.GetStartPower invocations
func (mmGetStartPower *CandidateProfileMock) GetStartPowerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStartPower.afterGetStartPowerCounter)
}

// GetStartPowerBeforeCounter returns a count of CandidateProfileMock.GetStartPower invocations
func (mmGetStartPower *CandidateProfileMock) GetStartPowerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStartPower.beforeGetStartPowerCounter)
}

// MinimockGetStartPowerDone returns true if the count of the GetStartPower invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetStartPowerDone() bool {
	for _, e := range m.GetStartPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStartPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStartPower != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStartPowerInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetStartPowerInspect() {
	for _, e := range m.GetStartPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetStartPower")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStartPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetStartPower")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStartPower != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetStartPower")
	}
}

type mCandidateProfileMockGetStaticNodeID struct {
	mock               *CandidateProfileMock
	defaultExpectation *CandidateProfileMockGetStaticNodeIDExpectation
	expectations       []*CandidateProfileMockGetStaticNodeIDExpectation
}

// CandidateProfileMockGetStaticNodeIDExpectation specifies expectation struct of the CandidateProfile.GetStaticNodeID
type CandidateProfileMockGetStaticNodeIDExpectation struct {
	mock *CandidateProfileMock

	results *CandidateProfileMockGetStaticNodeIDResults
	Counter uint64
}

// CandidateProfileMockGetStaticNodeIDResults contains results of the CandidateProfile.GetStaticNodeID
type CandidateProfileMockGetStaticNodeIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for CandidateProfile.GetStaticNodeID
func (mmGetStaticNodeID *mCandidateProfileMockGetStaticNodeID) Expect() *mCandidateProfileMockGetStaticNodeID {
	if mmGetStaticNodeID.mock.funcGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("CandidateProfileMock.GetStaticNodeID mock is already set by Set")
	}

	if mmGetStaticNodeID.defaultExpectation == nil {
		mmGetStaticNodeID.defaultExpectation = &CandidateProfileMockGetStaticNodeIDExpectation{}
	}

	return mmGetStaticNodeID
}

// Inspect accepts an inspector function that has same arguments as the CandidateProfile.GetStaticNodeID
func (mmGetStaticNodeID *mCandidateProfileMockGetStaticNodeID) Inspect(f func()) *mCandidateProfileMockGetStaticNodeID {
	if mmGetStaticNodeID.mock.inspectFuncGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("Inspect function is already set for CandidateProfileMock.GetStaticNodeID")
	}

	mmGetStaticNodeID.mock.inspectFuncGetStaticNodeID = f

	return mmGetStaticNodeID
}

// Return sets up results that will be returned by CandidateProfile.GetStaticNodeID
func (mmGetStaticNodeID *mCandidateProfileMockGetStaticNodeID) Return(s1 insolar.ShortNodeID) *CandidateProfileMock {
	if mmGetStaticNodeID.mock.funcGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("CandidateProfileMock.GetStaticNodeID mock is already set by Set")
	}

	if mmGetStaticNodeID.defaultExpectation == nil {
		mmGetStaticNodeID.defaultExpectation = &CandidateProfileMockGetStaticNodeIDExpectation{mock: mmGetStaticNodeID.mock}
	}
	mmGetStaticNodeID.defaultExpectation.results = &CandidateProfileMockGetStaticNodeIDResults{s1}
	return mmGetStaticNodeID.mock
}

//Set uses given function f to mock the CandidateProfile.GetStaticNodeID method
func (mmGetStaticNodeID *mCandidateProfileMockGetStaticNodeID) Set(f func() (s1 insolar.ShortNodeID)) *CandidateProfileMock {
	if mmGetStaticNodeID.defaultExpectation != nil {
		mmGetStaticNodeID.mock.t.Fatalf("Default expectation is already set for the CandidateProfile.GetStaticNodeID method")
	}

	if len(mmGetStaticNodeID.expectations) > 0 {
		mmGetStaticNodeID.mock.t.Fatalf("Some expectations are already set for the CandidateProfile.GetStaticNodeID method")
	}

	mmGetStaticNodeID.mock.funcGetStaticNodeID = f
	return mmGetStaticNodeID.mock
}

// GetStaticNodeID implements CandidateProfile
func (mmGetStaticNodeID *CandidateProfileMock) GetStaticNodeID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetStaticNodeID.beforeGetStaticNodeIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStaticNodeID.afterGetStaticNodeIDCounter, 1)

	if mmGetStaticNodeID.inspectFuncGetStaticNodeID != nil {
		mmGetStaticNodeID.inspectFuncGetStaticNodeID()
	}

	if mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation.Counter, 1)

		results := mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation.results
		if results == nil {
			mmGetStaticNodeID.t.Fatal("No results are set for the CandidateProfileMock.GetStaticNodeID")
		}
		return (*results).s1
	}
	if mmGetStaticNodeID.funcGetStaticNodeID != nil {
		return mmGetStaticNodeID.funcGetStaticNodeID()
	}
	mmGetStaticNodeID.t.Fatalf("Unexpected call to CandidateProfileMock.GetStaticNodeID.")
	return
}

// GetStaticNodeIDAfterCounter returns a count of finished CandidateProfileMock.GetStaticNodeID invocations
func (mmGetStaticNodeID *CandidateProfileMock) GetStaticNodeIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStaticNodeID.afterGetStaticNodeIDCounter)
}

// GetStaticNodeIDBeforeCounter returns a count of CandidateProfileMock.GetStaticNodeID invocations
func (mmGetStaticNodeID *CandidateProfileMock) GetStaticNodeIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStaticNodeID.beforeGetStaticNodeIDCounter)
}

// MinimockGetStaticNodeIDDone returns true if the count of the GetStaticNodeID invocations corresponds
// the number of defined expectations
func (m *CandidateProfileMock) MinimockGetStaticNodeIDDone() bool {
	for _, e := range m.GetStaticNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStaticNodeID != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStaticNodeIDInspect logs each unmet expectation
func (m *CandidateProfileMock) MinimockGetStaticNodeIDInspect() {
	for _, e := range m.GetStaticNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CandidateProfileMock.GetStaticNodeID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetStaticNodeID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStaticNodeID != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		m.t.Error("Expected call to CandidateProfileMock.GetStaticNodeID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CandidateProfileMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetBriefIntroSignedDigestInspect()

		m.MinimockGetDefaultEndpointInspect()

		m.MinimockGetExtraEndpointsInspect()

		m.MinimockGetIssuedAtPulseInspect()

		m.MinimockGetIssuedAtTimeInspect()

		m.MinimockGetIssuerIDInspect()

		m.MinimockGetIssuerSignatureInspect()

		m.MinimockGetNodePublicKeyInspect()

		m.MinimockGetPowerLevelsInspect()

		m.MinimockGetPrimaryRoleInspect()

		m.MinimockGetReferenceInspect()

		m.MinimockGetSpecialRolesInspect()

		m.MinimockGetStartPowerInspect()

		m.MinimockGetStaticNodeIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CandidateProfileMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CandidateProfileMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBriefIntroSignedDigestDone() &&
		m.MinimockGetDefaultEndpointDone() &&
		m.MinimockGetExtraEndpointsDone() &&
		m.MinimockGetIssuedAtPulseDone() &&
		m.MinimockGetIssuedAtTimeDone() &&
		m.MinimockGetIssuerIDDone() &&
		m.MinimockGetIssuerSignatureDone() &&
		m.MinimockGetNodePublicKeyDone() &&
		m.MinimockGetPowerLevelsDone() &&
		m.MinimockGetPrimaryRoleDone() &&
		m.MinimockGetReferenceDone() &&
		m.MinimockGetSpecialRolesDone() &&
		m.MinimockGetStartPowerDone() &&
		m.MinimockGetStaticNodeIDDone()
}
