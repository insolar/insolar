package profiles

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/common/endpoints"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/member"
)

// StaticProfileMock implements StaticProfile
type StaticProfileMock struct {
	t minimock.Tester

	funcGetBriefIntroSignedDigest          func() (s1 cryptkit.SignedDigestHolder)
	inspectFuncGetBriefIntroSignedDigest   func()
	afterGetBriefIntroSignedDigestCounter  uint64
	beforeGetBriefIntroSignedDigestCounter uint64
	GetBriefIntroSignedDigestMock          mStaticProfileMockGetBriefIntroSignedDigest

	funcGetDefaultEndpoint          func() (o1 endpoints.Outbound)
	inspectFuncGetDefaultEndpoint   func()
	afterGetDefaultEndpointCounter  uint64
	beforeGetDefaultEndpointCounter uint64
	GetDefaultEndpointMock          mStaticProfileMockGetDefaultEndpoint

	funcGetExtension          func() (s1 StaticProfileExtension)
	inspectFuncGetExtension   func()
	afterGetExtensionCounter  uint64
	beforeGetExtensionCounter uint64
	GetExtensionMock          mStaticProfileMockGetExtension

	funcGetNodePublicKey          func() (s1 cryptkit.SignatureKeyHolder)
	inspectFuncGetNodePublicKey   func()
	afterGetNodePublicKeyCounter  uint64
	beforeGetNodePublicKeyCounter uint64
	GetNodePublicKeyMock          mStaticProfileMockGetNodePublicKey

	funcGetPrimaryRole          func() (p1 member.PrimaryRole)
	inspectFuncGetPrimaryRole   func()
	afterGetPrimaryRoleCounter  uint64
	beforeGetPrimaryRoleCounter uint64
	GetPrimaryRoleMock          mStaticProfileMockGetPrimaryRole

	funcGetPublicKeyStore          func() (p1 cryptkit.PublicKeyStore)
	inspectFuncGetPublicKeyStore   func()
	afterGetPublicKeyStoreCounter  uint64
	beforeGetPublicKeyStoreCounter uint64
	GetPublicKeyStoreMock          mStaticProfileMockGetPublicKeyStore

	funcGetSpecialRoles          func() (s1 member.SpecialRole)
	inspectFuncGetSpecialRoles   func()
	afterGetSpecialRolesCounter  uint64
	beforeGetSpecialRolesCounter uint64
	GetSpecialRolesMock          mStaticProfileMockGetSpecialRoles

	funcGetStartPower          func() (p1 member.Power)
	inspectFuncGetStartPower   func()
	afterGetStartPowerCounter  uint64
	beforeGetStartPowerCounter uint64
	GetStartPowerMock          mStaticProfileMockGetStartPower

	funcGetStaticNodeID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetStaticNodeID   func()
	afterGetStaticNodeIDCounter  uint64
	beforeGetStaticNodeIDCounter uint64
	GetStaticNodeIDMock          mStaticProfileMockGetStaticNodeID

	funcIsAcceptableHost          func(from endpoints.Inbound) (b1 bool)
	inspectFuncIsAcceptableHost   func(from endpoints.Inbound)
	afterIsAcceptableHostCounter  uint64
	beforeIsAcceptableHostCounter uint64
	IsAcceptableHostMock          mStaticProfileMockIsAcceptableHost
}

// NewStaticProfileMock returns a mock for StaticProfile
func NewStaticProfileMock(t minimock.Tester) *StaticProfileMock {
	m := &StaticProfileMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBriefIntroSignedDigestMock = mStaticProfileMockGetBriefIntroSignedDigest{mock: m}

	m.GetDefaultEndpointMock = mStaticProfileMockGetDefaultEndpoint{mock: m}

	m.GetExtensionMock = mStaticProfileMockGetExtension{mock: m}

	m.GetNodePublicKeyMock = mStaticProfileMockGetNodePublicKey{mock: m}

	m.GetPrimaryRoleMock = mStaticProfileMockGetPrimaryRole{mock: m}

	m.GetPublicKeyStoreMock = mStaticProfileMockGetPublicKeyStore{mock: m}

	m.GetSpecialRolesMock = mStaticProfileMockGetSpecialRoles{mock: m}

	m.GetStartPowerMock = mStaticProfileMockGetStartPower{mock: m}

	m.GetStaticNodeIDMock = mStaticProfileMockGetStaticNodeID{mock: m}

	m.IsAcceptableHostMock = mStaticProfileMockIsAcceptableHost{mock: m}
	m.IsAcceptableHostMock.callArgs = []*StaticProfileMockIsAcceptableHostParams{}

	return m
}

type mStaticProfileMockGetBriefIntroSignedDigest struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetBriefIntroSignedDigestExpectation
	expectations       []*StaticProfileMockGetBriefIntroSignedDigestExpectation
}

// StaticProfileMockGetBriefIntroSignedDigestExpectation specifies expectation struct of the StaticProfile.GetBriefIntroSignedDigest
type StaticProfileMockGetBriefIntroSignedDigestExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetBriefIntroSignedDigestResults
	Counter uint64
}

// StaticProfileMockGetBriefIntroSignedDigestResults contains results of the StaticProfile.GetBriefIntroSignedDigest
type StaticProfileMockGetBriefIntroSignedDigestResults struct {
	s1 cryptkit.SignedDigestHolder
}

// Expect sets up expected params for StaticProfile.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mStaticProfileMockGetBriefIntroSignedDigest) Expect() *mStaticProfileMockGetBriefIntroSignedDigest {
	if mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("StaticProfileMock.GetBriefIntroSignedDigest mock is already set by Set")
	}

	if mmGetBriefIntroSignedDigest.defaultExpectation == nil {
		mmGetBriefIntroSignedDigest.defaultExpectation = &StaticProfileMockGetBriefIntroSignedDigestExpectation{}
	}

	return mmGetBriefIntroSignedDigest
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mStaticProfileMockGetBriefIntroSignedDigest) Inspect(f func()) *mStaticProfileMockGetBriefIntroSignedDigest {
	if mmGetBriefIntroSignedDigest.mock.inspectFuncGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetBriefIntroSignedDigest")
	}

	mmGetBriefIntroSignedDigest.mock.inspectFuncGetBriefIntroSignedDigest = f

	return mmGetBriefIntroSignedDigest
}

// Return sets up results that will be returned by StaticProfile.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mStaticProfileMockGetBriefIntroSignedDigest) Return(s1 cryptkit.SignedDigestHolder) *StaticProfileMock {
	if mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("StaticProfileMock.GetBriefIntroSignedDigest mock is already set by Set")
	}

	if mmGetBriefIntroSignedDigest.defaultExpectation == nil {
		mmGetBriefIntroSignedDigest.defaultExpectation = &StaticProfileMockGetBriefIntroSignedDigestExpectation{mock: mmGetBriefIntroSignedDigest.mock}
	}
	mmGetBriefIntroSignedDigest.defaultExpectation.results = &StaticProfileMockGetBriefIntroSignedDigestResults{s1}
	return mmGetBriefIntroSignedDigest.mock
}

//Set uses given function f to mock the StaticProfile.GetBriefIntroSignedDigest method
func (mmGetBriefIntroSignedDigest *mStaticProfileMockGetBriefIntroSignedDigest) Set(f func() (s1 cryptkit.SignedDigestHolder)) *StaticProfileMock {
	if mmGetBriefIntroSignedDigest.defaultExpectation != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetBriefIntroSignedDigest method")
	}

	if len(mmGetBriefIntroSignedDigest.expectations) > 0 {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetBriefIntroSignedDigest method")
	}

	mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest = f
	return mmGetBriefIntroSignedDigest.mock
}

// GetBriefIntroSignedDigest implements StaticProfile
func (mmGetBriefIntroSignedDigest *StaticProfileMock) GetBriefIntroSignedDigest() (s1 cryptkit.SignedDigestHolder) {
	mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.beforeGetBriefIntroSignedDigestCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.afterGetBriefIntroSignedDigestCounter, 1)

	if mmGetBriefIntroSignedDigest.inspectFuncGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.inspectFuncGetBriefIntroSignedDigest()
	}

	if mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation.Counter, 1)

		results := mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation.results
		if results == nil {
			mmGetBriefIntroSignedDigest.t.Fatal("No results are set for the StaticProfileMock.GetBriefIntroSignedDigest")
		}
		return (*results).s1
	}
	if mmGetBriefIntroSignedDigest.funcGetBriefIntroSignedDigest != nil {
		return mmGetBriefIntroSignedDigest.funcGetBriefIntroSignedDigest()
	}
	mmGetBriefIntroSignedDigest.t.Fatalf("Unexpected call to StaticProfileMock.GetBriefIntroSignedDigest.")
	return
}

// GetBriefIntroSignedDigestAfterCounter returns a count of finished StaticProfileMock.GetBriefIntroSignedDigest invocations
func (mmGetBriefIntroSignedDigest *StaticProfileMock) GetBriefIntroSignedDigestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBriefIntroSignedDigest.afterGetBriefIntroSignedDigestCounter)
}

// GetBriefIntroSignedDigestBeforeCounter returns a count of StaticProfileMock.GetBriefIntroSignedDigest invocations
func (mmGetBriefIntroSignedDigest *StaticProfileMock) GetBriefIntroSignedDigestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBriefIntroSignedDigest.beforeGetBriefIntroSignedDigestCounter)
}

// MinimockGetBriefIntroSignedDigestDone returns true if the count of the GetBriefIntroSignedDigest invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetBriefIntroSignedDigestDone() bool {
	for _, e := range m.GetBriefIntroSignedDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBriefIntroSignedDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBriefIntroSignedDigest != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetBriefIntroSignedDigestInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetBriefIntroSignedDigestInspect() {
	for _, e := range m.GetBriefIntroSignedDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetBriefIntroSignedDigest")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBriefIntroSignedDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetBriefIntroSignedDigest")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBriefIntroSignedDigest != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetBriefIntroSignedDigest")
	}
}

type mStaticProfileMockGetDefaultEndpoint struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetDefaultEndpointExpectation
	expectations       []*StaticProfileMockGetDefaultEndpointExpectation
}

// StaticProfileMockGetDefaultEndpointExpectation specifies expectation struct of the StaticProfile.GetDefaultEndpoint
type StaticProfileMockGetDefaultEndpointExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetDefaultEndpointResults
	Counter uint64
}

// StaticProfileMockGetDefaultEndpointResults contains results of the StaticProfile.GetDefaultEndpoint
type StaticProfileMockGetDefaultEndpointResults struct {
	o1 endpoints.Outbound
}

// Expect sets up expected params for StaticProfile.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mStaticProfileMockGetDefaultEndpoint) Expect() *mStaticProfileMockGetDefaultEndpoint {
	if mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("StaticProfileMock.GetDefaultEndpoint mock is already set by Set")
	}

	if mmGetDefaultEndpoint.defaultExpectation == nil {
		mmGetDefaultEndpoint.defaultExpectation = &StaticProfileMockGetDefaultEndpointExpectation{}
	}

	return mmGetDefaultEndpoint
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mStaticProfileMockGetDefaultEndpoint) Inspect(f func()) *mStaticProfileMockGetDefaultEndpoint {
	if mmGetDefaultEndpoint.mock.inspectFuncGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetDefaultEndpoint")
	}

	mmGetDefaultEndpoint.mock.inspectFuncGetDefaultEndpoint = f

	return mmGetDefaultEndpoint
}

// Return sets up results that will be returned by StaticProfile.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mStaticProfileMockGetDefaultEndpoint) Return(o1 endpoints.Outbound) *StaticProfileMock {
	if mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("StaticProfileMock.GetDefaultEndpoint mock is already set by Set")
	}

	if mmGetDefaultEndpoint.defaultExpectation == nil {
		mmGetDefaultEndpoint.defaultExpectation = &StaticProfileMockGetDefaultEndpointExpectation{mock: mmGetDefaultEndpoint.mock}
	}
	mmGetDefaultEndpoint.defaultExpectation.results = &StaticProfileMockGetDefaultEndpointResults{o1}
	return mmGetDefaultEndpoint.mock
}

//Set uses given function f to mock the StaticProfile.GetDefaultEndpoint method
func (mmGetDefaultEndpoint *mStaticProfileMockGetDefaultEndpoint) Set(f func() (o1 endpoints.Outbound)) *StaticProfileMock {
	if mmGetDefaultEndpoint.defaultExpectation != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetDefaultEndpoint method")
	}

	if len(mmGetDefaultEndpoint.expectations) > 0 {
		mmGetDefaultEndpoint.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetDefaultEndpoint method")
	}

	mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint = f
	return mmGetDefaultEndpoint.mock
}

// GetDefaultEndpoint implements StaticProfile
func (mmGetDefaultEndpoint *StaticProfileMock) GetDefaultEndpoint() (o1 endpoints.Outbound) {
	mm_atomic.AddUint64(&mmGetDefaultEndpoint.beforeGetDefaultEndpointCounter, 1)
	defer mm_atomic.AddUint64(&mmGetDefaultEndpoint.afterGetDefaultEndpointCounter, 1)

	if mmGetDefaultEndpoint.inspectFuncGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.inspectFuncGetDefaultEndpoint()
	}

	if mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation.Counter, 1)

		results := mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation.results
		if results == nil {
			mmGetDefaultEndpoint.t.Fatal("No results are set for the StaticProfileMock.GetDefaultEndpoint")
		}
		return (*results).o1
	}
	if mmGetDefaultEndpoint.funcGetDefaultEndpoint != nil {
		return mmGetDefaultEndpoint.funcGetDefaultEndpoint()
	}
	mmGetDefaultEndpoint.t.Fatalf("Unexpected call to StaticProfileMock.GetDefaultEndpoint.")
	return
}

// GetDefaultEndpointAfterCounter returns a count of finished StaticProfileMock.GetDefaultEndpoint invocations
func (mmGetDefaultEndpoint *StaticProfileMock) GetDefaultEndpointAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDefaultEndpoint.afterGetDefaultEndpointCounter)
}

// GetDefaultEndpointBeforeCounter returns a count of StaticProfileMock.GetDefaultEndpoint invocations
func (mmGetDefaultEndpoint *StaticProfileMock) GetDefaultEndpointBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDefaultEndpoint.beforeGetDefaultEndpointCounter)
}

// MinimockGetDefaultEndpointDone returns true if the count of the GetDefaultEndpoint invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetDefaultEndpointDone() bool {
	for _, e := range m.GetDefaultEndpointMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDefaultEndpointMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDefaultEndpoint != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetDefaultEndpointInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetDefaultEndpointInspect() {
	for _, e := range m.GetDefaultEndpointMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetDefaultEndpoint")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDefaultEndpointMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetDefaultEndpoint")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDefaultEndpoint != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetDefaultEndpoint")
	}
}

type mStaticProfileMockGetExtension struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetExtensionExpectation
	expectations       []*StaticProfileMockGetExtensionExpectation
}

// StaticProfileMockGetExtensionExpectation specifies expectation struct of the StaticProfile.GetExtension
type StaticProfileMockGetExtensionExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetExtensionResults
	Counter uint64
}

// StaticProfileMockGetExtensionResults contains results of the StaticProfile.GetExtension
type StaticProfileMockGetExtensionResults struct {
	s1 StaticProfileExtension
}

// Expect sets up expected params for StaticProfile.GetExtension
func (mmGetExtension *mStaticProfileMockGetExtension) Expect() *mStaticProfileMockGetExtension {
	if mmGetExtension.mock.funcGetExtension != nil {
		mmGetExtension.mock.t.Fatalf("StaticProfileMock.GetExtension mock is already set by Set")
	}

	if mmGetExtension.defaultExpectation == nil {
		mmGetExtension.defaultExpectation = &StaticProfileMockGetExtensionExpectation{}
	}

	return mmGetExtension
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetExtension
func (mmGetExtension *mStaticProfileMockGetExtension) Inspect(f func()) *mStaticProfileMockGetExtension {
	if mmGetExtension.mock.inspectFuncGetExtension != nil {
		mmGetExtension.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetExtension")
	}

	mmGetExtension.mock.inspectFuncGetExtension = f

	return mmGetExtension
}

// Return sets up results that will be returned by StaticProfile.GetExtension
func (mmGetExtension *mStaticProfileMockGetExtension) Return(s1 StaticProfileExtension) *StaticProfileMock {
	if mmGetExtension.mock.funcGetExtension != nil {
		mmGetExtension.mock.t.Fatalf("StaticProfileMock.GetExtension mock is already set by Set")
	}

	if mmGetExtension.defaultExpectation == nil {
		mmGetExtension.defaultExpectation = &StaticProfileMockGetExtensionExpectation{mock: mmGetExtension.mock}
	}
	mmGetExtension.defaultExpectation.results = &StaticProfileMockGetExtensionResults{s1}
	return mmGetExtension.mock
}

//Set uses given function f to mock the StaticProfile.GetExtension method
func (mmGetExtension *mStaticProfileMockGetExtension) Set(f func() (s1 StaticProfileExtension)) *StaticProfileMock {
	if mmGetExtension.defaultExpectation != nil {
		mmGetExtension.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetExtension method")
	}

	if len(mmGetExtension.expectations) > 0 {
		mmGetExtension.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetExtension method")
	}

	mmGetExtension.mock.funcGetExtension = f
	return mmGetExtension.mock
}

// GetExtension implements StaticProfile
func (mmGetExtension *StaticProfileMock) GetExtension() (s1 StaticProfileExtension) {
	mm_atomic.AddUint64(&mmGetExtension.beforeGetExtensionCounter, 1)
	defer mm_atomic.AddUint64(&mmGetExtension.afterGetExtensionCounter, 1)

	if mmGetExtension.inspectFuncGetExtension != nil {
		mmGetExtension.inspectFuncGetExtension()
	}

	if mmGetExtension.GetExtensionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetExtension.GetExtensionMock.defaultExpectation.Counter, 1)

		results := mmGetExtension.GetExtensionMock.defaultExpectation.results
		if results == nil {
			mmGetExtension.t.Fatal("No results are set for the StaticProfileMock.GetExtension")
		}
		return (*results).s1
	}
	if mmGetExtension.funcGetExtension != nil {
		return mmGetExtension.funcGetExtension()
	}
	mmGetExtension.t.Fatalf("Unexpected call to StaticProfileMock.GetExtension.")
	return
}

// GetExtensionAfterCounter returns a count of finished StaticProfileMock.GetExtension invocations
func (mmGetExtension *StaticProfileMock) GetExtensionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtension.afterGetExtensionCounter)
}

// GetExtensionBeforeCounter returns a count of StaticProfileMock.GetExtension invocations
func (mmGetExtension *StaticProfileMock) GetExtensionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtension.beforeGetExtensionCounter)
}

// MinimockGetExtensionDone returns true if the count of the GetExtension invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetExtensionDone() bool {
	for _, e := range m.GetExtensionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtensionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtensionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtension != nil && mm_atomic.LoadUint64(&m.afterGetExtensionCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetExtensionInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetExtensionInspect() {
	for _, e := range m.GetExtensionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetExtension")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtensionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtensionCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetExtension")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtension != nil && mm_atomic.LoadUint64(&m.afterGetExtensionCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetExtension")
	}
}

type mStaticProfileMockGetNodePublicKey struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetNodePublicKeyExpectation
	expectations       []*StaticProfileMockGetNodePublicKeyExpectation
}

// StaticProfileMockGetNodePublicKeyExpectation specifies expectation struct of the StaticProfile.GetNodePublicKey
type StaticProfileMockGetNodePublicKeyExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetNodePublicKeyResults
	Counter uint64
}

// StaticProfileMockGetNodePublicKeyResults contains results of the StaticProfile.GetNodePublicKey
type StaticProfileMockGetNodePublicKeyResults struct {
	s1 cryptkit.SignatureKeyHolder
}

// Expect sets up expected params for StaticProfile.GetNodePublicKey
func (mmGetNodePublicKey *mStaticProfileMockGetNodePublicKey) Expect() *mStaticProfileMockGetNodePublicKey {
	if mmGetNodePublicKey.mock.funcGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("StaticProfileMock.GetNodePublicKey mock is already set by Set")
	}

	if mmGetNodePublicKey.defaultExpectation == nil {
		mmGetNodePublicKey.defaultExpectation = &StaticProfileMockGetNodePublicKeyExpectation{}
	}

	return mmGetNodePublicKey
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetNodePublicKey
func (mmGetNodePublicKey *mStaticProfileMockGetNodePublicKey) Inspect(f func()) *mStaticProfileMockGetNodePublicKey {
	if mmGetNodePublicKey.mock.inspectFuncGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetNodePublicKey")
	}

	mmGetNodePublicKey.mock.inspectFuncGetNodePublicKey = f

	return mmGetNodePublicKey
}

// Return sets up results that will be returned by StaticProfile.GetNodePublicKey
func (mmGetNodePublicKey *mStaticProfileMockGetNodePublicKey) Return(s1 cryptkit.SignatureKeyHolder) *StaticProfileMock {
	if mmGetNodePublicKey.mock.funcGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("StaticProfileMock.GetNodePublicKey mock is already set by Set")
	}

	if mmGetNodePublicKey.defaultExpectation == nil {
		mmGetNodePublicKey.defaultExpectation = &StaticProfileMockGetNodePublicKeyExpectation{mock: mmGetNodePublicKey.mock}
	}
	mmGetNodePublicKey.defaultExpectation.results = &StaticProfileMockGetNodePublicKeyResults{s1}
	return mmGetNodePublicKey.mock
}

//Set uses given function f to mock the StaticProfile.GetNodePublicKey method
func (mmGetNodePublicKey *mStaticProfileMockGetNodePublicKey) Set(f func() (s1 cryptkit.SignatureKeyHolder)) *StaticProfileMock {
	if mmGetNodePublicKey.defaultExpectation != nil {
		mmGetNodePublicKey.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetNodePublicKey method")
	}

	if len(mmGetNodePublicKey.expectations) > 0 {
		mmGetNodePublicKey.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetNodePublicKey method")
	}

	mmGetNodePublicKey.mock.funcGetNodePublicKey = f
	return mmGetNodePublicKey.mock
}

// GetNodePublicKey implements StaticProfile
func (mmGetNodePublicKey *StaticProfileMock) GetNodePublicKey() (s1 cryptkit.SignatureKeyHolder) {
	mm_atomic.AddUint64(&mmGetNodePublicKey.beforeGetNodePublicKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNodePublicKey.afterGetNodePublicKeyCounter, 1)

	if mmGetNodePublicKey.inspectFuncGetNodePublicKey != nil {
		mmGetNodePublicKey.inspectFuncGetNodePublicKey()
	}

	if mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation.Counter, 1)

		results := mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation.results
		if results == nil {
			mmGetNodePublicKey.t.Fatal("No results are set for the StaticProfileMock.GetNodePublicKey")
		}
		return (*results).s1
	}
	if mmGetNodePublicKey.funcGetNodePublicKey != nil {
		return mmGetNodePublicKey.funcGetNodePublicKey()
	}
	mmGetNodePublicKey.t.Fatalf("Unexpected call to StaticProfileMock.GetNodePublicKey.")
	return
}

// GetNodePublicKeyAfterCounter returns a count of finished StaticProfileMock.GetNodePublicKey invocations
func (mmGetNodePublicKey *StaticProfileMock) GetNodePublicKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodePublicKey.afterGetNodePublicKeyCounter)
}

// GetNodePublicKeyBeforeCounter returns a count of StaticProfileMock.GetNodePublicKey invocations
func (mmGetNodePublicKey *StaticProfileMock) GetNodePublicKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodePublicKey.beforeGetNodePublicKeyCounter)
}

// MinimockGetNodePublicKeyDone returns true if the count of the GetNodePublicKey invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetNodePublicKeyDone() bool {
	for _, e := range m.GetNodePublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodePublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodePublicKey != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNodePublicKeyInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetNodePublicKeyInspect() {
	for _, e := range m.GetNodePublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetNodePublicKey")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodePublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetNodePublicKey")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodePublicKey != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetNodePublicKey")
	}
}

type mStaticProfileMockGetPrimaryRole struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetPrimaryRoleExpectation
	expectations       []*StaticProfileMockGetPrimaryRoleExpectation
}

// StaticProfileMockGetPrimaryRoleExpectation specifies expectation struct of the StaticProfile.GetPrimaryRole
type StaticProfileMockGetPrimaryRoleExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetPrimaryRoleResults
	Counter uint64
}

// StaticProfileMockGetPrimaryRoleResults contains results of the StaticProfile.GetPrimaryRole
type StaticProfileMockGetPrimaryRoleResults struct {
	p1 member.PrimaryRole
}

// Expect sets up expected params for StaticProfile.GetPrimaryRole
func (mmGetPrimaryRole *mStaticProfileMockGetPrimaryRole) Expect() *mStaticProfileMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("StaticProfileMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &StaticProfileMockGetPrimaryRoleExpectation{}
	}

	return mmGetPrimaryRole
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetPrimaryRole
func (mmGetPrimaryRole *mStaticProfileMockGetPrimaryRole) Inspect(f func()) *mStaticProfileMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetPrimaryRole")
	}

	mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole = f

	return mmGetPrimaryRole
}

// Return sets up results that will be returned by StaticProfile.GetPrimaryRole
func (mmGetPrimaryRole *mStaticProfileMockGetPrimaryRole) Return(p1 member.PrimaryRole) *StaticProfileMock {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("StaticProfileMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &StaticProfileMockGetPrimaryRoleExpectation{mock: mmGetPrimaryRole.mock}
	}
	mmGetPrimaryRole.defaultExpectation.results = &StaticProfileMockGetPrimaryRoleResults{p1}
	return mmGetPrimaryRole.mock
}

//Set uses given function f to mock the StaticProfile.GetPrimaryRole method
func (mmGetPrimaryRole *mStaticProfileMockGetPrimaryRole) Set(f func() (p1 member.PrimaryRole)) *StaticProfileMock {
	if mmGetPrimaryRole.defaultExpectation != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetPrimaryRole method")
	}

	if len(mmGetPrimaryRole.expectations) > 0 {
		mmGetPrimaryRole.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetPrimaryRole method")
	}

	mmGetPrimaryRole.mock.funcGetPrimaryRole = f
	return mmGetPrimaryRole.mock
}

// GetPrimaryRole implements StaticProfile
func (mmGetPrimaryRole *StaticProfileMock) GetPrimaryRole() (p1 member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter, 1)

	if mmGetPrimaryRole.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.inspectFuncGetPrimaryRole()
	}

	if mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.Counter, 1)

		results := mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.results
		if results == nil {
			mmGetPrimaryRole.t.Fatal("No results are set for the StaticProfileMock.GetPrimaryRole")
		}
		return (*results).p1
	}
	if mmGetPrimaryRole.funcGetPrimaryRole != nil {
		return mmGetPrimaryRole.funcGetPrimaryRole()
	}
	mmGetPrimaryRole.t.Fatalf("Unexpected call to StaticProfileMock.GetPrimaryRole.")
	return
}

// GetPrimaryRoleAfterCounter returns a count of finished StaticProfileMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *StaticProfileMock) GetPrimaryRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter)
}

// GetPrimaryRoleBeforeCounter returns a count of StaticProfileMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *StaticProfileMock) GetPrimaryRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter)
}

// MinimockGetPrimaryRoleDone returns true if the count of the GetPrimaryRole invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetPrimaryRoleDone() bool {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPrimaryRoleInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetPrimaryRoleInspect() {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetPrimaryRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetPrimaryRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetPrimaryRole")
	}
}

type mStaticProfileMockGetPublicKeyStore struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetPublicKeyStoreExpectation
	expectations       []*StaticProfileMockGetPublicKeyStoreExpectation
}

// StaticProfileMockGetPublicKeyStoreExpectation specifies expectation struct of the StaticProfile.GetPublicKeyStore
type StaticProfileMockGetPublicKeyStoreExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetPublicKeyStoreResults
	Counter uint64
}

// StaticProfileMockGetPublicKeyStoreResults contains results of the StaticProfile.GetPublicKeyStore
type StaticProfileMockGetPublicKeyStoreResults struct {
	p1 cryptkit.PublicKeyStore
}

// Expect sets up expected params for StaticProfile.GetPublicKeyStore
func (mmGetPublicKeyStore *mStaticProfileMockGetPublicKeyStore) Expect() *mStaticProfileMockGetPublicKeyStore {
	if mmGetPublicKeyStore.mock.funcGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("StaticProfileMock.GetPublicKeyStore mock is already set by Set")
	}

	if mmGetPublicKeyStore.defaultExpectation == nil {
		mmGetPublicKeyStore.defaultExpectation = &StaticProfileMockGetPublicKeyStoreExpectation{}
	}

	return mmGetPublicKeyStore
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetPublicKeyStore
func (mmGetPublicKeyStore *mStaticProfileMockGetPublicKeyStore) Inspect(f func()) *mStaticProfileMockGetPublicKeyStore {
	if mmGetPublicKeyStore.mock.inspectFuncGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetPublicKeyStore")
	}

	mmGetPublicKeyStore.mock.inspectFuncGetPublicKeyStore = f

	return mmGetPublicKeyStore
}

// Return sets up results that will be returned by StaticProfile.GetPublicKeyStore
func (mmGetPublicKeyStore *mStaticProfileMockGetPublicKeyStore) Return(p1 cryptkit.PublicKeyStore) *StaticProfileMock {
	if mmGetPublicKeyStore.mock.funcGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("StaticProfileMock.GetPublicKeyStore mock is already set by Set")
	}

	if mmGetPublicKeyStore.defaultExpectation == nil {
		mmGetPublicKeyStore.defaultExpectation = &StaticProfileMockGetPublicKeyStoreExpectation{mock: mmGetPublicKeyStore.mock}
	}
	mmGetPublicKeyStore.defaultExpectation.results = &StaticProfileMockGetPublicKeyStoreResults{p1}
	return mmGetPublicKeyStore.mock
}

//Set uses given function f to mock the StaticProfile.GetPublicKeyStore method
func (mmGetPublicKeyStore *mStaticProfileMockGetPublicKeyStore) Set(f func() (p1 cryptkit.PublicKeyStore)) *StaticProfileMock {
	if mmGetPublicKeyStore.defaultExpectation != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetPublicKeyStore method")
	}

	if len(mmGetPublicKeyStore.expectations) > 0 {
		mmGetPublicKeyStore.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetPublicKeyStore method")
	}

	mmGetPublicKeyStore.mock.funcGetPublicKeyStore = f
	return mmGetPublicKeyStore.mock
}

// GetPublicKeyStore implements StaticProfile
func (mmGetPublicKeyStore *StaticProfileMock) GetPublicKeyStore() (p1 cryptkit.PublicKeyStore) {
	mm_atomic.AddUint64(&mmGetPublicKeyStore.beforeGetPublicKeyStoreCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPublicKeyStore.afterGetPublicKeyStoreCounter, 1)

	if mmGetPublicKeyStore.inspectFuncGetPublicKeyStore != nil {
		mmGetPublicKeyStore.inspectFuncGetPublicKeyStore()
	}

	if mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation.Counter, 1)

		results := mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation.results
		if results == nil {
			mmGetPublicKeyStore.t.Fatal("No results are set for the StaticProfileMock.GetPublicKeyStore")
		}
		return (*results).p1
	}
	if mmGetPublicKeyStore.funcGetPublicKeyStore != nil {
		return mmGetPublicKeyStore.funcGetPublicKeyStore()
	}
	mmGetPublicKeyStore.t.Fatalf("Unexpected call to StaticProfileMock.GetPublicKeyStore.")
	return
}

// GetPublicKeyStoreAfterCounter returns a count of finished StaticProfileMock.GetPublicKeyStore invocations
func (mmGetPublicKeyStore *StaticProfileMock) GetPublicKeyStoreAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPublicKeyStore.afterGetPublicKeyStoreCounter)
}

// GetPublicKeyStoreBeforeCounter returns a count of StaticProfileMock.GetPublicKeyStore invocations
func (mmGetPublicKeyStore *StaticProfileMock) GetPublicKeyStoreBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPublicKeyStore.beforeGetPublicKeyStoreCounter)
}

// MinimockGetPublicKeyStoreDone returns true if the count of the GetPublicKeyStore invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetPublicKeyStoreDone() bool {
	for _, e := range m.GetPublicKeyStoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPublicKeyStoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPublicKeyStore != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPublicKeyStoreInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetPublicKeyStoreInspect() {
	for _, e := range m.GetPublicKeyStoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetPublicKeyStore")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPublicKeyStoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetPublicKeyStore")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPublicKeyStore != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetPublicKeyStore")
	}
}

type mStaticProfileMockGetSpecialRoles struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetSpecialRolesExpectation
	expectations       []*StaticProfileMockGetSpecialRolesExpectation
}

// StaticProfileMockGetSpecialRolesExpectation specifies expectation struct of the StaticProfile.GetSpecialRoles
type StaticProfileMockGetSpecialRolesExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetSpecialRolesResults
	Counter uint64
}

// StaticProfileMockGetSpecialRolesResults contains results of the StaticProfile.GetSpecialRoles
type StaticProfileMockGetSpecialRolesResults struct {
	s1 member.SpecialRole
}

// Expect sets up expected params for StaticProfile.GetSpecialRoles
func (mmGetSpecialRoles *mStaticProfileMockGetSpecialRoles) Expect() *mStaticProfileMockGetSpecialRoles {
	if mmGetSpecialRoles.mock.funcGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("StaticProfileMock.GetSpecialRoles mock is already set by Set")
	}

	if mmGetSpecialRoles.defaultExpectation == nil {
		mmGetSpecialRoles.defaultExpectation = &StaticProfileMockGetSpecialRolesExpectation{}
	}

	return mmGetSpecialRoles
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetSpecialRoles
func (mmGetSpecialRoles *mStaticProfileMockGetSpecialRoles) Inspect(f func()) *mStaticProfileMockGetSpecialRoles {
	if mmGetSpecialRoles.mock.inspectFuncGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetSpecialRoles")
	}

	mmGetSpecialRoles.mock.inspectFuncGetSpecialRoles = f

	return mmGetSpecialRoles
}

// Return sets up results that will be returned by StaticProfile.GetSpecialRoles
func (mmGetSpecialRoles *mStaticProfileMockGetSpecialRoles) Return(s1 member.SpecialRole) *StaticProfileMock {
	if mmGetSpecialRoles.mock.funcGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("StaticProfileMock.GetSpecialRoles mock is already set by Set")
	}

	if mmGetSpecialRoles.defaultExpectation == nil {
		mmGetSpecialRoles.defaultExpectation = &StaticProfileMockGetSpecialRolesExpectation{mock: mmGetSpecialRoles.mock}
	}
	mmGetSpecialRoles.defaultExpectation.results = &StaticProfileMockGetSpecialRolesResults{s1}
	return mmGetSpecialRoles.mock
}

//Set uses given function f to mock the StaticProfile.GetSpecialRoles method
func (mmGetSpecialRoles *mStaticProfileMockGetSpecialRoles) Set(f func() (s1 member.SpecialRole)) *StaticProfileMock {
	if mmGetSpecialRoles.defaultExpectation != nil {
		mmGetSpecialRoles.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetSpecialRoles method")
	}

	if len(mmGetSpecialRoles.expectations) > 0 {
		mmGetSpecialRoles.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetSpecialRoles method")
	}

	mmGetSpecialRoles.mock.funcGetSpecialRoles = f
	return mmGetSpecialRoles.mock
}

// GetSpecialRoles implements StaticProfile
func (mmGetSpecialRoles *StaticProfileMock) GetSpecialRoles() (s1 member.SpecialRole) {
	mm_atomic.AddUint64(&mmGetSpecialRoles.beforeGetSpecialRolesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSpecialRoles.afterGetSpecialRolesCounter, 1)

	if mmGetSpecialRoles.inspectFuncGetSpecialRoles != nil {
		mmGetSpecialRoles.inspectFuncGetSpecialRoles()
	}

	if mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation.Counter, 1)

		results := mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation.results
		if results == nil {
			mmGetSpecialRoles.t.Fatal("No results are set for the StaticProfileMock.GetSpecialRoles")
		}
		return (*results).s1
	}
	if mmGetSpecialRoles.funcGetSpecialRoles != nil {
		return mmGetSpecialRoles.funcGetSpecialRoles()
	}
	mmGetSpecialRoles.t.Fatalf("Unexpected call to StaticProfileMock.GetSpecialRoles.")
	return
}

// GetSpecialRolesAfterCounter returns a count of finished StaticProfileMock.GetSpecialRoles invocations
func (mmGetSpecialRoles *StaticProfileMock) GetSpecialRolesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpecialRoles.afterGetSpecialRolesCounter)
}

// GetSpecialRolesBeforeCounter returns a count of StaticProfileMock.GetSpecialRoles invocations
func (mmGetSpecialRoles *StaticProfileMock) GetSpecialRolesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpecialRoles.beforeGetSpecialRolesCounter)
}

// MinimockGetSpecialRolesDone returns true if the count of the GetSpecialRoles invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetSpecialRolesDone() bool {
	for _, e := range m.GetSpecialRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpecialRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpecialRoles != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSpecialRolesInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetSpecialRolesInspect() {
	for _, e := range m.GetSpecialRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetSpecialRoles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpecialRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetSpecialRoles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpecialRoles != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetSpecialRoles")
	}
}

type mStaticProfileMockGetStartPower struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetStartPowerExpectation
	expectations       []*StaticProfileMockGetStartPowerExpectation
}

// StaticProfileMockGetStartPowerExpectation specifies expectation struct of the StaticProfile.GetStartPower
type StaticProfileMockGetStartPowerExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetStartPowerResults
	Counter uint64
}

// StaticProfileMockGetStartPowerResults contains results of the StaticProfile.GetStartPower
type StaticProfileMockGetStartPowerResults struct {
	p1 member.Power
}

// Expect sets up expected params for StaticProfile.GetStartPower
func (mmGetStartPower *mStaticProfileMockGetStartPower) Expect() *mStaticProfileMockGetStartPower {
	if mmGetStartPower.mock.funcGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("StaticProfileMock.GetStartPower mock is already set by Set")
	}

	if mmGetStartPower.defaultExpectation == nil {
		mmGetStartPower.defaultExpectation = &StaticProfileMockGetStartPowerExpectation{}
	}

	return mmGetStartPower
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetStartPower
func (mmGetStartPower *mStaticProfileMockGetStartPower) Inspect(f func()) *mStaticProfileMockGetStartPower {
	if mmGetStartPower.mock.inspectFuncGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetStartPower")
	}

	mmGetStartPower.mock.inspectFuncGetStartPower = f

	return mmGetStartPower
}

// Return sets up results that will be returned by StaticProfile.GetStartPower
func (mmGetStartPower *mStaticProfileMockGetStartPower) Return(p1 member.Power) *StaticProfileMock {
	if mmGetStartPower.mock.funcGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("StaticProfileMock.GetStartPower mock is already set by Set")
	}

	if mmGetStartPower.defaultExpectation == nil {
		mmGetStartPower.defaultExpectation = &StaticProfileMockGetStartPowerExpectation{mock: mmGetStartPower.mock}
	}
	mmGetStartPower.defaultExpectation.results = &StaticProfileMockGetStartPowerResults{p1}
	return mmGetStartPower.mock
}

//Set uses given function f to mock the StaticProfile.GetStartPower method
func (mmGetStartPower *mStaticProfileMockGetStartPower) Set(f func() (p1 member.Power)) *StaticProfileMock {
	if mmGetStartPower.defaultExpectation != nil {
		mmGetStartPower.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetStartPower method")
	}

	if len(mmGetStartPower.expectations) > 0 {
		mmGetStartPower.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetStartPower method")
	}

	mmGetStartPower.mock.funcGetStartPower = f
	return mmGetStartPower.mock
}

// GetStartPower implements StaticProfile
func (mmGetStartPower *StaticProfileMock) GetStartPower() (p1 member.Power) {
	mm_atomic.AddUint64(&mmGetStartPower.beforeGetStartPowerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStartPower.afterGetStartPowerCounter, 1)

	if mmGetStartPower.inspectFuncGetStartPower != nil {
		mmGetStartPower.inspectFuncGetStartPower()
	}

	if mmGetStartPower.GetStartPowerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStartPower.GetStartPowerMock.defaultExpectation.Counter, 1)

		results := mmGetStartPower.GetStartPowerMock.defaultExpectation.results
		if results == nil {
			mmGetStartPower.t.Fatal("No results are set for the StaticProfileMock.GetStartPower")
		}
		return (*results).p1
	}
	if mmGetStartPower.funcGetStartPower != nil {
		return mmGetStartPower.funcGetStartPower()
	}
	mmGetStartPower.t.Fatalf("Unexpected call to StaticProfileMock.GetStartPower.")
	return
}

// GetStartPowerAfterCounter returns a count of finished StaticProfileMock.GetStartPower invocations
func (mmGetStartPower *StaticProfileMock) GetStartPowerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStartPower.afterGetStartPowerCounter)
}

// GetStartPowerBeforeCounter returns a count of StaticProfileMock.GetStartPower invocations
func (mmGetStartPower *StaticProfileMock) GetStartPowerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStartPower.beforeGetStartPowerCounter)
}

// MinimockGetStartPowerDone returns true if the count of the GetStartPower invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetStartPowerDone() bool {
	for _, e := range m.GetStartPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStartPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStartPower != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStartPowerInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetStartPowerInspect() {
	for _, e := range m.GetStartPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetStartPower")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStartPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetStartPower")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStartPower != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetStartPower")
	}
}

type mStaticProfileMockGetStaticNodeID struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockGetStaticNodeIDExpectation
	expectations       []*StaticProfileMockGetStaticNodeIDExpectation
}

// StaticProfileMockGetStaticNodeIDExpectation specifies expectation struct of the StaticProfile.GetStaticNodeID
type StaticProfileMockGetStaticNodeIDExpectation struct {
	mock *StaticProfileMock

	results *StaticProfileMockGetStaticNodeIDResults
	Counter uint64
}

// StaticProfileMockGetStaticNodeIDResults contains results of the StaticProfile.GetStaticNodeID
type StaticProfileMockGetStaticNodeIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for StaticProfile.GetStaticNodeID
func (mmGetStaticNodeID *mStaticProfileMockGetStaticNodeID) Expect() *mStaticProfileMockGetStaticNodeID {
	if mmGetStaticNodeID.mock.funcGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("StaticProfileMock.GetStaticNodeID mock is already set by Set")
	}

	if mmGetStaticNodeID.defaultExpectation == nil {
		mmGetStaticNodeID.defaultExpectation = &StaticProfileMockGetStaticNodeIDExpectation{}
	}

	return mmGetStaticNodeID
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.GetStaticNodeID
func (mmGetStaticNodeID *mStaticProfileMockGetStaticNodeID) Inspect(f func()) *mStaticProfileMockGetStaticNodeID {
	if mmGetStaticNodeID.mock.inspectFuncGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.GetStaticNodeID")
	}

	mmGetStaticNodeID.mock.inspectFuncGetStaticNodeID = f

	return mmGetStaticNodeID
}

// Return sets up results that will be returned by StaticProfile.GetStaticNodeID
func (mmGetStaticNodeID *mStaticProfileMockGetStaticNodeID) Return(s1 insolar.ShortNodeID) *StaticProfileMock {
	if mmGetStaticNodeID.mock.funcGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("StaticProfileMock.GetStaticNodeID mock is already set by Set")
	}

	if mmGetStaticNodeID.defaultExpectation == nil {
		mmGetStaticNodeID.defaultExpectation = &StaticProfileMockGetStaticNodeIDExpectation{mock: mmGetStaticNodeID.mock}
	}
	mmGetStaticNodeID.defaultExpectation.results = &StaticProfileMockGetStaticNodeIDResults{s1}
	return mmGetStaticNodeID.mock
}

//Set uses given function f to mock the StaticProfile.GetStaticNodeID method
func (mmGetStaticNodeID *mStaticProfileMockGetStaticNodeID) Set(f func() (s1 insolar.ShortNodeID)) *StaticProfileMock {
	if mmGetStaticNodeID.defaultExpectation != nil {
		mmGetStaticNodeID.mock.t.Fatalf("Default expectation is already set for the StaticProfile.GetStaticNodeID method")
	}

	if len(mmGetStaticNodeID.expectations) > 0 {
		mmGetStaticNodeID.mock.t.Fatalf("Some expectations are already set for the StaticProfile.GetStaticNodeID method")
	}

	mmGetStaticNodeID.mock.funcGetStaticNodeID = f
	return mmGetStaticNodeID.mock
}

// GetStaticNodeID implements StaticProfile
func (mmGetStaticNodeID *StaticProfileMock) GetStaticNodeID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetStaticNodeID.beforeGetStaticNodeIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStaticNodeID.afterGetStaticNodeIDCounter, 1)

	if mmGetStaticNodeID.inspectFuncGetStaticNodeID != nil {
		mmGetStaticNodeID.inspectFuncGetStaticNodeID()
	}

	if mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation.Counter, 1)

		results := mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation.results
		if results == nil {
			mmGetStaticNodeID.t.Fatal("No results are set for the StaticProfileMock.GetStaticNodeID")
		}
		return (*results).s1
	}
	if mmGetStaticNodeID.funcGetStaticNodeID != nil {
		return mmGetStaticNodeID.funcGetStaticNodeID()
	}
	mmGetStaticNodeID.t.Fatalf("Unexpected call to StaticProfileMock.GetStaticNodeID.")
	return
}

// GetStaticNodeIDAfterCounter returns a count of finished StaticProfileMock.GetStaticNodeID invocations
func (mmGetStaticNodeID *StaticProfileMock) GetStaticNodeIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStaticNodeID.afterGetStaticNodeIDCounter)
}

// GetStaticNodeIDBeforeCounter returns a count of StaticProfileMock.GetStaticNodeID invocations
func (mmGetStaticNodeID *StaticProfileMock) GetStaticNodeIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStaticNodeID.beforeGetStaticNodeIDCounter)
}

// MinimockGetStaticNodeIDDone returns true if the count of the GetStaticNodeID invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockGetStaticNodeIDDone() bool {
	for _, e := range m.GetStaticNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStaticNodeID != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStaticNodeIDInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockGetStaticNodeIDInspect() {
	for _, e := range m.GetStaticNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileMock.GetStaticNodeID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetStaticNodeID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStaticNodeID != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.GetStaticNodeID")
	}
}

type mStaticProfileMockIsAcceptableHost struct {
	mock               *StaticProfileMock
	defaultExpectation *StaticProfileMockIsAcceptableHostExpectation
	expectations       []*StaticProfileMockIsAcceptableHostExpectation

	callArgs []*StaticProfileMockIsAcceptableHostParams
	mutex    sync.RWMutex
}

// StaticProfileMockIsAcceptableHostExpectation specifies expectation struct of the StaticProfile.IsAcceptableHost
type StaticProfileMockIsAcceptableHostExpectation struct {
	mock    *StaticProfileMock
	params  *StaticProfileMockIsAcceptableHostParams
	results *StaticProfileMockIsAcceptableHostResults
	Counter uint64
}

// StaticProfileMockIsAcceptableHostParams contains parameters of the StaticProfile.IsAcceptableHost
type StaticProfileMockIsAcceptableHostParams struct {
	from endpoints.Inbound
}

// StaticProfileMockIsAcceptableHostResults contains results of the StaticProfile.IsAcceptableHost
type StaticProfileMockIsAcceptableHostResults struct {
	b1 bool
}

// Expect sets up expected params for StaticProfile.IsAcceptableHost
func (mmIsAcceptableHost *mStaticProfileMockIsAcceptableHost) Expect(from endpoints.Inbound) *mStaticProfileMockIsAcceptableHost {
	if mmIsAcceptableHost.mock.funcIsAcceptableHost != nil {
		mmIsAcceptableHost.mock.t.Fatalf("StaticProfileMock.IsAcceptableHost mock is already set by Set")
	}

	if mmIsAcceptableHost.defaultExpectation == nil {
		mmIsAcceptableHost.defaultExpectation = &StaticProfileMockIsAcceptableHostExpectation{}
	}

	mmIsAcceptableHost.defaultExpectation.params = &StaticProfileMockIsAcceptableHostParams{from}
	for _, e := range mmIsAcceptableHost.expectations {
		if minimock.Equal(e.params, mmIsAcceptableHost.defaultExpectation.params) {
			mmIsAcceptableHost.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIsAcceptableHost.defaultExpectation.params)
		}
	}

	return mmIsAcceptableHost
}

// Inspect accepts an inspector function that has same arguments as the StaticProfile.IsAcceptableHost
func (mmIsAcceptableHost *mStaticProfileMockIsAcceptableHost) Inspect(f func(from endpoints.Inbound)) *mStaticProfileMockIsAcceptableHost {
	if mmIsAcceptableHost.mock.inspectFuncIsAcceptableHost != nil {
		mmIsAcceptableHost.mock.t.Fatalf("Inspect function is already set for StaticProfileMock.IsAcceptableHost")
	}

	mmIsAcceptableHost.mock.inspectFuncIsAcceptableHost = f

	return mmIsAcceptableHost
}

// Return sets up results that will be returned by StaticProfile.IsAcceptableHost
func (mmIsAcceptableHost *mStaticProfileMockIsAcceptableHost) Return(b1 bool) *StaticProfileMock {
	if mmIsAcceptableHost.mock.funcIsAcceptableHost != nil {
		mmIsAcceptableHost.mock.t.Fatalf("StaticProfileMock.IsAcceptableHost mock is already set by Set")
	}

	if mmIsAcceptableHost.defaultExpectation == nil {
		mmIsAcceptableHost.defaultExpectation = &StaticProfileMockIsAcceptableHostExpectation{mock: mmIsAcceptableHost.mock}
	}
	mmIsAcceptableHost.defaultExpectation.results = &StaticProfileMockIsAcceptableHostResults{b1}
	return mmIsAcceptableHost.mock
}

//Set uses given function f to mock the StaticProfile.IsAcceptableHost method
func (mmIsAcceptableHost *mStaticProfileMockIsAcceptableHost) Set(f func(from endpoints.Inbound) (b1 bool)) *StaticProfileMock {
	if mmIsAcceptableHost.defaultExpectation != nil {
		mmIsAcceptableHost.mock.t.Fatalf("Default expectation is already set for the StaticProfile.IsAcceptableHost method")
	}

	if len(mmIsAcceptableHost.expectations) > 0 {
		mmIsAcceptableHost.mock.t.Fatalf("Some expectations are already set for the StaticProfile.IsAcceptableHost method")
	}

	mmIsAcceptableHost.mock.funcIsAcceptableHost = f
	return mmIsAcceptableHost.mock
}

// When sets expectation for the StaticProfile.IsAcceptableHost which will trigger the result defined by the following
// Then helper
func (mmIsAcceptableHost *mStaticProfileMockIsAcceptableHost) When(from endpoints.Inbound) *StaticProfileMockIsAcceptableHostExpectation {
	if mmIsAcceptableHost.mock.funcIsAcceptableHost != nil {
		mmIsAcceptableHost.mock.t.Fatalf("StaticProfileMock.IsAcceptableHost mock is already set by Set")
	}

	expectation := &StaticProfileMockIsAcceptableHostExpectation{
		mock:   mmIsAcceptableHost.mock,
		params: &StaticProfileMockIsAcceptableHostParams{from},
	}
	mmIsAcceptableHost.expectations = append(mmIsAcceptableHost.expectations, expectation)
	return expectation
}

// Then sets up StaticProfile.IsAcceptableHost return parameters for the expectation previously defined by the When method
func (e *StaticProfileMockIsAcceptableHostExpectation) Then(b1 bool) *StaticProfileMock {
	e.results = &StaticProfileMockIsAcceptableHostResults{b1}
	return e.mock
}

// IsAcceptableHost implements StaticProfile
func (mmIsAcceptableHost *StaticProfileMock) IsAcceptableHost(from endpoints.Inbound) (b1 bool) {
	mm_atomic.AddUint64(&mmIsAcceptableHost.beforeIsAcceptableHostCounter, 1)
	defer mm_atomic.AddUint64(&mmIsAcceptableHost.afterIsAcceptableHostCounter, 1)

	if mmIsAcceptableHost.inspectFuncIsAcceptableHost != nil {
		mmIsAcceptableHost.inspectFuncIsAcceptableHost(from)
	}

	params := &StaticProfileMockIsAcceptableHostParams{from}

	// Record call args
	mmIsAcceptableHost.IsAcceptableHostMock.mutex.Lock()
	mmIsAcceptableHost.IsAcceptableHostMock.callArgs = append(mmIsAcceptableHost.IsAcceptableHostMock.callArgs, params)
	mmIsAcceptableHost.IsAcceptableHostMock.mutex.Unlock()

	for _, e := range mmIsAcceptableHost.IsAcceptableHostMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmIsAcceptableHost.IsAcceptableHostMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsAcceptableHost.IsAcceptableHostMock.defaultExpectation.Counter, 1)
		want := mmIsAcceptableHost.IsAcceptableHostMock.defaultExpectation.params
		got := StaticProfileMockIsAcceptableHostParams{from}
		if want != nil && !minimock.Equal(*want, got) {
			mmIsAcceptableHost.t.Errorf("StaticProfileMock.IsAcceptableHost got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmIsAcceptableHost.IsAcceptableHostMock.defaultExpectation.results
		if results == nil {
			mmIsAcceptableHost.t.Fatal("No results are set for the StaticProfileMock.IsAcceptableHost")
		}
		return (*results).b1
	}
	if mmIsAcceptableHost.funcIsAcceptableHost != nil {
		return mmIsAcceptableHost.funcIsAcceptableHost(from)
	}
	mmIsAcceptableHost.t.Fatalf("Unexpected call to StaticProfileMock.IsAcceptableHost. %v", from)
	return
}

// IsAcceptableHostAfterCounter returns a count of finished StaticProfileMock.IsAcceptableHost invocations
func (mmIsAcceptableHost *StaticProfileMock) IsAcceptableHostAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsAcceptableHost.afterIsAcceptableHostCounter)
}

// IsAcceptableHostBeforeCounter returns a count of StaticProfileMock.IsAcceptableHost invocations
func (mmIsAcceptableHost *StaticProfileMock) IsAcceptableHostBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsAcceptableHost.beforeIsAcceptableHostCounter)
}

// Calls returns a list of arguments used in each call to StaticProfileMock.IsAcceptableHost.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIsAcceptableHost *mStaticProfileMockIsAcceptableHost) Calls() []*StaticProfileMockIsAcceptableHostParams {
	mmIsAcceptableHost.mutex.RLock()

	argCopy := make([]*StaticProfileMockIsAcceptableHostParams, len(mmIsAcceptableHost.callArgs))
	copy(argCopy, mmIsAcceptableHost.callArgs)

	mmIsAcceptableHost.mutex.RUnlock()

	return argCopy
}

// MinimockIsAcceptableHostDone returns true if the count of the IsAcceptableHost invocations corresponds
// the number of defined expectations
func (m *StaticProfileMock) MinimockIsAcceptableHostDone() bool {
	for _, e := range m.IsAcceptableHostMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsAcceptableHostMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsAcceptableHostCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsAcceptableHost != nil && mm_atomic.LoadUint64(&m.afterIsAcceptableHostCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsAcceptableHostInspect logs each unmet expectation
func (m *StaticProfileMock) MinimockIsAcceptableHostInspect() {
	for _, e := range m.IsAcceptableHostMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StaticProfileMock.IsAcceptableHost with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsAcceptableHostMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsAcceptableHostCounter) < 1 {
		if m.IsAcceptableHostMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StaticProfileMock.IsAcceptableHost")
		} else {
			m.t.Errorf("Expected call to StaticProfileMock.IsAcceptableHost with params: %#v", *m.IsAcceptableHostMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsAcceptableHost != nil && mm_atomic.LoadUint64(&m.afterIsAcceptableHostCounter) < 1 {
		m.t.Error("Expected call to StaticProfileMock.IsAcceptableHost")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StaticProfileMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetBriefIntroSignedDigestInspect()

		m.MinimockGetDefaultEndpointInspect()

		m.MinimockGetExtensionInspect()

		m.MinimockGetNodePublicKeyInspect()

		m.MinimockGetPrimaryRoleInspect()

		m.MinimockGetPublicKeyStoreInspect()

		m.MinimockGetSpecialRolesInspect()

		m.MinimockGetStartPowerInspect()

		m.MinimockGetStaticNodeIDInspect()

		m.MinimockIsAcceptableHostInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StaticProfileMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StaticProfileMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBriefIntroSignedDigestDone() &&
		m.MinimockGetDefaultEndpointDone() &&
		m.MinimockGetExtensionDone() &&
		m.MinimockGetNodePublicKeyDone() &&
		m.MinimockGetPrimaryRoleDone() &&
		m.MinimockGetPublicKeyStoreDone() &&
		m.MinimockGetSpecialRolesDone() &&
		m.MinimockGetStartPowerDone() &&
		m.MinimockGetStaticNodeIDDone() &&
		m.MinimockIsAcceptableHostDone()
}
