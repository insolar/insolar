package profiles

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/common/endpoints"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/member"
	"github.com/insolar/insolar/pulse"
)

// StaticProfileExtensionMock implements StaticProfileExtension
type StaticProfileExtensionMock struct {
	t minimock.Tester

	funcGetExtraEndpoints          func() (oa1 []endpoints.Outbound)
	inspectFuncGetExtraEndpoints   func()
	afterGetExtraEndpointsCounter  uint64
	beforeGetExtraEndpointsCounter uint64
	GetExtraEndpointsMock          mStaticProfileExtensionMockGetExtraEndpoints

	funcGetIntroducedNodeID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetIntroducedNodeID   func()
	afterGetIntroducedNodeIDCounter  uint64
	beforeGetIntroducedNodeIDCounter uint64
	GetIntroducedNodeIDMock          mStaticProfileExtensionMockGetIntroducedNodeID

	funcGetIssuedAtPulse          func() (n1 pulse.Number)
	inspectFuncGetIssuedAtPulse   func()
	afterGetIssuedAtPulseCounter  uint64
	beforeGetIssuedAtPulseCounter uint64
	GetIssuedAtPulseMock          mStaticProfileExtensionMockGetIssuedAtPulse

	funcGetIssuedAtTime          func() (t1 time.Time)
	inspectFuncGetIssuedAtTime   func()
	afterGetIssuedAtTimeCounter  uint64
	beforeGetIssuedAtTimeCounter uint64
	GetIssuedAtTimeMock          mStaticProfileExtensionMockGetIssuedAtTime

	funcGetIssuerID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetIssuerID   func()
	afterGetIssuerIDCounter  uint64
	beforeGetIssuerIDCounter uint64
	GetIssuerIDMock          mStaticProfileExtensionMockGetIssuerID

	funcGetIssuerSignature          func() (s1 cryptkit.SignatureHolder)
	inspectFuncGetIssuerSignature   func()
	afterGetIssuerSignatureCounter  uint64
	beforeGetIssuerSignatureCounter uint64
	GetIssuerSignatureMock          mStaticProfileExtensionMockGetIssuerSignature

	funcGetPowerLevels          func() (p1 member.PowerSet)
	inspectFuncGetPowerLevels   func()
	afterGetPowerLevelsCounter  uint64
	beforeGetPowerLevelsCounter uint64
	GetPowerLevelsMock          mStaticProfileExtensionMockGetPowerLevels

	funcGetReference          func() (r1 insolar.Reference)
	inspectFuncGetReference   func()
	afterGetReferenceCounter  uint64
	beforeGetReferenceCounter uint64
	GetReferenceMock          mStaticProfileExtensionMockGetReference
}

// NewStaticProfileExtensionMock returns a mock for StaticProfileExtension
func NewStaticProfileExtensionMock(t minimock.Tester) *StaticProfileExtensionMock {
	m := &StaticProfileExtensionMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetExtraEndpointsMock = mStaticProfileExtensionMockGetExtraEndpoints{mock: m}

	m.GetIntroducedNodeIDMock = mStaticProfileExtensionMockGetIntroducedNodeID{mock: m}

	m.GetIssuedAtPulseMock = mStaticProfileExtensionMockGetIssuedAtPulse{mock: m}

	m.GetIssuedAtTimeMock = mStaticProfileExtensionMockGetIssuedAtTime{mock: m}

	m.GetIssuerIDMock = mStaticProfileExtensionMockGetIssuerID{mock: m}

	m.GetIssuerSignatureMock = mStaticProfileExtensionMockGetIssuerSignature{mock: m}

	m.GetPowerLevelsMock = mStaticProfileExtensionMockGetPowerLevels{mock: m}

	m.GetReferenceMock = mStaticProfileExtensionMockGetReference{mock: m}

	return m
}

type mStaticProfileExtensionMockGetExtraEndpoints struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetExtraEndpointsExpectation
	expectations       []*StaticProfileExtensionMockGetExtraEndpointsExpectation
}

// StaticProfileExtensionMockGetExtraEndpointsExpectation specifies expectation struct of the StaticProfileExtension.GetExtraEndpoints
type StaticProfileExtensionMockGetExtraEndpointsExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetExtraEndpointsResults
	Counter uint64
}

// StaticProfileExtensionMockGetExtraEndpointsResults contains results of the StaticProfileExtension.GetExtraEndpoints
type StaticProfileExtensionMockGetExtraEndpointsResults struct {
	oa1 []endpoints.Outbound
}

// Expect sets up expected params for StaticProfileExtension.GetExtraEndpoints
func (mmGetExtraEndpoints *mStaticProfileExtensionMockGetExtraEndpoints) Expect() *mStaticProfileExtensionMockGetExtraEndpoints {
	if mmGetExtraEndpoints.mock.funcGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("StaticProfileExtensionMock.GetExtraEndpoints mock is already set by Set")
	}

	if mmGetExtraEndpoints.defaultExpectation == nil {
		mmGetExtraEndpoints.defaultExpectation = &StaticProfileExtensionMockGetExtraEndpointsExpectation{}
	}

	return mmGetExtraEndpoints
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetExtraEndpoints
func (mmGetExtraEndpoints *mStaticProfileExtensionMockGetExtraEndpoints) Inspect(f func()) *mStaticProfileExtensionMockGetExtraEndpoints {
	if mmGetExtraEndpoints.mock.inspectFuncGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetExtraEndpoints")
	}

	mmGetExtraEndpoints.mock.inspectFuncGetExtraEndpoints = f

	return mmGetExtraEndpoints
}

// Return sets up results that will be returned by StaticProfileExtension.GetExtraEndpoints
func (mmGetExtraEndpoints *mStaticProfileExtensionMockGetExtraEndpoints) Return(oa1 []endpoints.Outbound) *StaticProfileExtensionMock {
	if mmGetExtraEndpoints.mock.funcGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("StaticProfileExtensionMock.GetExtraEndpoints mock is already set by Set")
	}

	if mmGetExtraEndpoints.defaultExpectation == nil {
		mmGetExtraEndpoints.defaultExpectation = &StaticProfileExtensionMockGetExtraEndpointsExpectation{mock: mmGetExtraEndpoints.mock}
	}
	mmGetExtraEndpoints.defaultExpectation.results = &StaticProfileExtensionMockGetExtraEndpointsResults{oa1}
	return mmGetExtraEndpoints.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetExtraEndpoints method
func (mmGetExtraEndpoints *mStaticProfileExtensionMockGetExtraEndpoints) Set(f func() (oa1 []endpoints.Outbound)) *StaticProfileExtensionMock {
	if mmGetExtraEndpoints.defaultExpectation != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetExtraEndpoints method")
	}

	if len(mmGetExtraEndpoints.expectations) > 0 {
		mmGetExtraEndpoints.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetExtraEndpoints method")
	}

	mmGetExtraEndpoints.mock.funcGetExtraEndpoints = f
	return mmGetExtraEndpoints.mock
}

// GetExtraEndpoints implements StaticProfileExtension
func (mmGetExtraEndpoints *StaticProfileExtensionMock) GetExtraEndpoints() (oa1 []endpoints.Outbound) {
	mm_atomic.AddUint64(&mmGetExtraEndpoints.beforeGetExtraEndpointsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetExtraEndpoints.afterGetExtraEndpointsCounter, 1)

	if mmGetExtraEndpoints.inspectFuncGetExtraEndpoints != nil {
		mmGetExtraEndpoints.inspectFuncGetExtraEndpoints()
	}

	if mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation.Counter, 1)

		results := mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation.results
		if results == nil {
			mmGetExtraEndpoints.t.Fatal("No results are set for the StaticProfileExtensionMock.GetExtraEndpoints")
		}
		return (*results).oa1
	}
	if mmGetExtraEndpoints.funcGetExtraEndpoints != nil {
		return mmGetExtraEndpoints.funcGetExtraEndpoints()
	}
	mmGetExtraEndpoints.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetExtraEndpoints.")
	return
}

// GetExtraEndpointsAfterCounter returns a count of finished StaticProfileExtensionMock.GetExtraEndpoints invocations
func (mmGetExtraEndpoints *StaticProfileExtensionMock) GetExtraEndpointsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtraEndpoints.afterGetExtraEndpointsCounter)
}

// GetExtraEndpointsBeforeCounter returns a count of StaticProfileExtensionMock.GetExtraEndpoints invocations
func (mmGetExtraEndpoints *StaticProfileExtensionMock) GetExtraEndpointsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtraEndpoints.beforeGetExtraEndpointsCounter)
}

// MinimockGetExtraEndpointsDone returns true if the count of the GetExtraEndpoints invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetExtraEndpointsDone() bool {
	for _, e := range m.GetExtraEndpointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtraEndpointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtraEndpoints != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetExtraEndpointsInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetExtraEndpointsInspect() {
	for _, e := range m.GetExtraEndpointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetExtraEndpoints")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtraEndpointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetExtraEndpoints")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtraEndpoints != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetExtraEndpoints")
	}
}

type mStaticProfileExtensionMockGetIntroducedNodeID struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetIntroducedNodeIDExpectation
	expectations       []*StaticProfileExtensionMockGetIntroducedNodeIDExpectation
}

// StaticProfileExtensionMockGetIntroducedNodeIDExpectation specifies expectation struct of the StaticProfileExtension.GetIntroducedNodeID
type StaticProfileExtensionMockGetIntroducedNodeIDExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetIntroducedNodeIDResults
	Counter uint64
}

// StaticProfileExtensionMockGetIntroducedNodeIDResults contains results of the StaticProfileExtension.GetIntroducedNodeID
type StaticProfileExtensionMockGetIntroducedNodeIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for StaticProfileExtension.GetIntroducedNodeID
func (mmGetIntroducedNodeID *mStaticProfileExtensionMockGetIntroducedNodeID) Expect() *mStaticProfileExtensionMockGetIntroducedNodeID {
	if mmGetIntroducedNodeID.mock.funcGetIntroducedNodeID != nil {
		mmGetIntroducedNodeID.mock.t.Fatalf("StaticProfileExtensionMock.GetIntroducedNodeID mock is already set by Set")
	}

	if mmGetIntroducedNodeID.defaultExpectation == nil {
		mmGetIntroducedNodeID.defaultExpectation = &StaticProfileExtensionMockGetIntroducedNodeIDExpectation{}
	}

	return mmGetIntroducedNodeID
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetIntroducedNodeID
func (mmGetIntroducedNodeID *mStaticProfileExtensionMockGetIntroducedNodeID) Inspect(f func()) *mStaticProfileExtensionMockGetIntroducedNodeID {
	if mmGetIntroducedNodeID.mock.inspectFuncGetIntroducedNodeID != nil {
		mmGetIntroducedNodeID.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetIntroducedNodeID")
	}

	mmGetIntroducedNodeID.mock.inspectFuncGetIntroducedNodeID = f

	return mmGetIntroducedNodeID
}

// Return sets up results that will be returned by StaticProfileExtension.GetIntroducedNodeID
func (mmGetIntroducedNodeID *mStaticProfileExtensionMockGetIntroducedNodeID) Return(s1 insolar.ShortNodeID) *StaticProfileExtensionMock {
	if mmGetIntroducedNodeID.mock.funcGetIntroducedNodeID != nil {
		mmGetIntroducedNodeID.mock.t.Fatalf("StaticProfileExtensionMock.GetIntroducedNodeID mock is already set by Set")
	}

	if mmGetIntroducedNodeID.defaultExpectation == nil {
		mmGetIntroducedNodeID.defaultExpectation = &StaticProfileExtensionMockGetIntroducedNodeIDExpectation{mock: mmGetIntroducedNodeID.mock}
	}
	mmGetIntroducedNodeID.defaultExpectation.results = &StaticProfileExtensionMockGetIntroducedNodeIDResults{s1}
	return mmGetIntroducedNodeID.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetIntroducedNodeID method
func (mmGetIntroducedNodeID *mStaticProfileExtensionMockGetIntroducedNodeID) Set(f func() (s1 insolar.ShortNodeID)) *StaticProfileExtensionMock {
	if mmGetIntroducedNodeID.defaultExpectation != nil {
		mmGetIntroducedNodeID.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetIntroducedNodeID method")
	}

	if len(mmGetIntroducedNodeID.expectations) > 0 {
		mmGetIntroducedNodeID.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetIntroducedNodeID method")
	}

	mmGetIntroducedNodeID.mock.funcGetIntroducedNodeID = f
	return mmGetIntroducedNodeID.mock
}

// GetIntroducedNodeID implements StaticProfileExtension
func (mmGetIntroducedNodeID *StaticProfileExtensionMock) GetIntroducedNodeID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetIntroducedNodeID.beforeGetIntroducedNodeIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIntroducedNodeID.afterGetIntroducedNodeIDCounter, 1)

	if mmGetIntroducedNodeID.inspectFuncGetIntroducedNodeID != nil {
		mmGetIntroducedNodeID.inspectFuncGetIntroducedNodeID()
	}

	if mmGetIntroducedNodeID.GetIntroducedNodeIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIntroducedNodeID.GetIntroducedNodeIDMock.defaultExpectation.Counter, 1)

		results := mmGetIntroducedNodeID.GetIntroducedNodeIDMock.defaultExpectation.results
		if results == nil {
			mmGetIntroducedNodeID.t.Fatal("No results are set for the StaticProfileExtensionMock.GetIntroducedNodeID")
		}
		return (*results).s1
	}
	if mmGetIntroducedNodeID.funcGetIntroducedNodeID != nil {
		return mmGetIntroducedNodeID.funcGetIntroducedNodeID()
	}
	mmGetIntroducedNodeID.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetIntroducedNodeID.")
	return
}

// GetIntroducedNodeIDAfterCounter returns a count of finished StaticProfileExtensionMock.GetIntroducedNodeID invocations
func (mmGetIntroducedNodeID *StaticProfileExtensionMock) GetIntroducedNodeIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIntroducedNodeID.afterGetIntroducedNodeIDCounter)
}

// GetIntroducedNodeIDBeforeCounter returns a count of StaticProfileExtensionMock.GetIntroducedNodeID invocations
func (mmGetIntroducedNodeID *StaticProfileExtensionMock) GetIntroducedNodeIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIntroducedNodeID.beforeGetIntroducedNodeIDCounter)
}

// MinimockGetIntroducedNodeIDDone returns true if the count of the GetIntroducedNodeID invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetIntroducedNodeIDDone() bool {
	for _, e := range m.GetIntroducedNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIntroducedNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIntroducedNodeIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIntroducedNodeID != nil && mm_atomic.LoadUint64(&m.afterGetIntroducedNodeIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIntroducedNodeIDInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetIntroducedNodeIDInspect() {
	for _, e := range m.GetIntroducedNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetIntroducedNodeID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIntroducedNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIntroducedNodeIDCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIntroducedNodeID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIntroducedNodeID != nil && mm_atomic.LoadUint64(&m.afterGetIntroducedNodeIDCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIntroducedNodeID")
	}
}

type mStaticProfileExtensionMockGetIssuedAtPulse struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetIssuedAtPulseExpectation
	expectations       []*StaticProfileExtensionMockGetIssuedAtPulseExpectation
}

// StaticProfileExtensionMockGetIssuedAtPulseExpectation specifies expectation struct of the StaticProfileExtension.GetIssuedAtPulse
type StaticProfileExtensionMockGetIssuedAtPulseExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetIssuedAtPulseResults
	Counter uint64
}

// StaticProfileExtensionMockGetIssuedAtPulseResults contains results of the StaticProfileExtension.GetIssuedAtPulse
type StaticProfileExtensionMockGetIssuedAtPulseResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for StaticProfileExtension.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mStaticProfileExtensionMockGetIssuedAtPulse) Expect() *mStaticProfileExtensionMockGetIssuedAtPulse {
	if mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuedAtPulse mock is already set by Set")
	}

	if mmGetIssuedAtPulse.defaultExpectation == nil {
		mmGetIssuedAtPulse.defaultExpectation = &StaticProfileExtensionMockGetIssuedAtPulseExpectation{}
	}

	return mmGetIssuedAtPulse
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mStaticProfileExtensionMockGetIssuedAtPulse) Inspect(f func()) *mStaticProfileExtensionMockGetIssuedAtPulse {
	if mmGetIssuedAtPulse.mock.inspectFuncGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetIssuedAtPulse")
	}

	mmGetIssuedAtPulse.mock.inspectFuncGetIssuedAtPulse = f

	return mmGetIssuedAtPulse
}

// Return sets up results that will be returned by StaticProfileExtension.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mStaticProfileExtensionMockGetIssuedAtPulse) Return(n1 pulse.Number) *StaticProfileExtensionMock {
	if mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuedAtPulse mock is already set by Set")
	}

	if mmGetIssuedAtPulse.defaultExpectation == nil {
		mmGetIssuedAtPulse.defaultExpectation = &StaticProfileExtensionMockGetIssuedAtPulseExpectation{mock: mmGetIssuedAtPulse.mock}
	}
	mmGetIssuedAtPulse.defaultExpectation.results = &StaticProfileExtensionMockGetIssuedAtPulseResults{n1}
	return mmGetIssuedAtPulse.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetIssuedAtPulse method
func (mmGetIssuedAtPulse *mStaticProfileExtensionMockGetIssuedAtPulse) Set(f func() (n1 pulse.Number)) *StaticProfileExtensionMock {
	if mmGetIssuedAtPulse.defaultExpectation != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetIssuedAtPulse method")
	}

	if len(mmGetIssuedAtPulse.expectations) > 0 {
		mmGetIssuedAtPulse.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetIssuedAtPulse method")
	}

	mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse = f
	return mmGetIssuedAtPulse.mock
}

// GetIssuedAtPulse implements StaticProfileExtension
func (mmGetIssuedAtPulse *StaticProfileExtensionMock) GetIssuedAtPulse() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetIssuedAtPulse.beforeGetIssuedAtPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuedAtPulse.afterGetIssuedAtPulseCounter, 1)

	if mmGetIssuedAtPulse.inspectFuncGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.inspectFuncGetIssuedAtPulse()
	}

	if mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation.Counter, 1)

		results := mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation.results
		if results == nil {
			mmGetIssuedAtPulse.t.Fatal("No results are set for the StaticProfileExtensionMock.GetIssuedAtPulse")
		}
		return (*results).n1
	}
	if mmGetIssuedAtPulse.funcGetIssuedAtPulse != nil {
		return mmGetIssuedAtPulse.funcGetIssuedAtPulse()
	}
	mmGetIssuedAtPulse.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetIssuedAtPulse.")
	return
}

// GetIssuedAtPulseAfterCounter returns a count of finished StaticProfileExtensionMock.GetIssuedAtPulse invocations
func (mmGetIssuedAtPulse *StaticProfileExtensionMock) GetIssuedAtPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtPulse.afterGetIssuedAtPulseCounter)
}

// GetIssuedAtPulseBeforeCounter returns a count of StaticProfileExtensionMock.GetIssuedAtPulse invocations
func (mmGetIssuedAtPulse *StaticProfileExtensionMock) GetIssuedAtPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtPulse.beforeGetIssuedAtPulseCounter)
}

// MinimockGetIssuedAtPulseDone returns true if the count of the GetIssuedAtPulse invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetIssuedAtPulseDone() bool {
	for _, e := range m.GetIssuedAtPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtPulse != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuedAtPulseInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetIssuedAtPulseInspect() {
	for _, e := range m.GetIssuedAtPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuedAtPulse")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuedAtPulse")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtPulse != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuedAtPulse")
	}
}

type mStaticProfileExtensionMockGetIssuedAtTime struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetIssuedAtTimeExpectation
	expectations       []*StaticProfileExtensionMockGetIssuedAtTimeExpectation
}

// StaticProfileExtensionMockGetIssuedAtTimeExpectation specifies expectation struct of the StaticProfileExtension.GetIssuedAtTime
type StaticProfileExtensionMockGetIssuedAtTimeExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetIssuedAtTimeResults
	Counter uint64
}

// StaticProfileExtensionMockGetIssuedAtTimeResults contains results of the StaticProfileExtension.GetIssuedAtTime
type StaticProfileExtensionMockGetIssuedAtTimeResults struct {
	t1 time.Time
}

// Expect sets up expected params for StaticProfileExtension.GetIssuedAtTime
func (mmGetIssuedAtTime *mStaticProfileExtensionMockGetIssuedAtTime) Expect() *mStaticProfileExtensionMockGetIssuedAtTime {
	if mmGetIssuedAtTime.mock.funcGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuedAtTime mock is already set by Set")
	}

	if mmGetIssuedAtTime.defaultExpectation == nil {
		mmGetIssuedAtTime.defaultExpectation = &StaticProfileExtensionMockGetIssuedAtTimeExpectation{}
	}

	return mmGetIssuedAtTime
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetIssuedAtTime
func (mmGetIssuedAtTime *mStaticProfileExtensionMockGetIssuedAtTime) Inspect(f func()) *mStaticProfileExtensionMockGetIssuedAtTime {
	if mmGetIssuedAtTime.mock.inspectFuncGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetIssuedAtTime")
	}

	mmGetIssuedAtTime.mock.inspectFuncGetIssuedAtTime = f

	return mmGetIssuedAtTime
}

// Return sets up results that will be returned by StaticProfileExtension.GetIssuedAtTime
func (mmGetIssuedAtTime *mStaticProfileExtensionMockGetIssuedAtTime) Return(t1 time.Time) *StaticProfileExtensionMock {
	if mmGetIssuedAtTime.mock.funcGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuedAtTime mock is already set by Set")
	}

	if mmGetIssuedAtTime.defaultExpectation == nil {
		mmGetIssuedAtTime.defaultExpectation = &StaticProfileExtensionMockGetIssuedAtTimeExpectation{mock: mmGetIssuedAtTime.mock}
	}
	mmGetIssuedAtTime.defaultExpectation.results = &StaticProfileExtensionMockGetIssuedAtTimeResults{t1}
	return mmGetIssuedAtTime.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetIssuedAtTime method
func (mmGetIssuedAtTime *mStaticProfileExtensionMockGetIssuedAtTime) Set(f func() (t1 time.Time)) *StaticProfileExtensionMock {
	if mmGetIssuedAtTime.defaultExpectation != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetIssuedAtTime method")
	}

	if len(mmGetIssuedAtTime.expectations) > 0 {
		mmGetIssuedAtTime.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetIssuedAtTime method")
	}

	mmGetIssuedAtTime.mock.funcGetIssuedAtTime = f
	return mmGetIssuedAtTime.mock
}

// GetIssuedAtTime implements StaticProfileExtension
func (mmGetIssuedAtTime *StaticProfileExtensionMock) GetIssuedAtTime() (t1 time.Time) {
	mm_atomic.AddUint64(&mmGetIssuedAtTime.beforeGetIssuedAtTimeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuedAtTime.afterGetIssuedAtTimeCounter, 1)

	if mmGetIssuedAtTime.inspectFuncGetIssuedAtTime != nil {
		mmGetIssuedAtTime.inspectFuncGetIssuedAtTime()
	}

	if mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation.Counter, 1)

		results := mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation.results
		if results == nil {
			mmGetIssuedAtTime.t.Fatal("No results are set for the StaticProfileExtensionMock.GetIssuedAtTime")
		}
		return (*results).t1
	}
	if mmGetIssuedAtTime.funcGetIssuedAtTime != nil {
		return mmGetIssuedAtTime.funcGetIssuedAtTime()
	}
	mmGetIssuedAtTime.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetIssuedAtTime.")
	return
}

// GetIssuedAtTimeAfterCounter returns a count of finished StaticProfileExtensionMock.GetIssuedAtTime invocations
func (mmGetIssuedAtTime *StaticProfileExtensionMock) GetIssuedAtTimeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtTime.afterGetIssuedAtTimeCounter)
}

// GetIssuedAtTimeBeforeCounter returns a count of StaticProfileExtensionMock.GetIssuedAtTime invocations
func (mmGetIssuedAtTime *StaticProfileExtensionMock) GetIssuedAtTimeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtTime.beforeGetIssuedAtTimeCounter)
}

// MinimockGetIssuedAtTimeDone returns true if the count of the GetIssuedAtTime invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetIssuedAtTimeDone() bool {
	for _, e := range m.GetIssuedAtTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtTime != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuedAtTimeInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetIssuedAtTimeInspect() {
	for _, e := range m.GetIssuedAtTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuedAtTime")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuedAtTime")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtTime != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuedAtTime")
	}
}

type mStaticProfileExtensionMockGetIssuerID struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetIssuerIDExpectation
	expectations       []*StaticProfileExtensionMockGetIssuerIDExpectation
}

// StaticProfileExtensionMockGetIssuerIDExpectation specifies expectation struct of the StaticProfileExtension.GetIssuerID
type StaticProfileExtensionMockGetIssuerIDExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetIssuerIDResults
	Counter uint64
}

// StaticProfileExtensionMockGetIssuerIDResults contains results of the StaticProfileExtension.GetIssuerID
type StaticProfileExtensionMockGetIssuerIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for StaticProfileExtension.GetIssuerID
func (mmGetIssuerID *mStaticProfileExtensionMockGetIssuerID) Expect() *mStaticProfileExtensionMockGetIssuerID {
	if mmGetIssuerID.mock.funcGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuerID mock is already set by Set")
	}

	if mmGetIssuerID.defaultExpectation == nil {
		mmGetIssuerID.defaultExpectation = &StaticProfileExtensionMockGetIssuerIDExpectation{}
	}

	return mmGetIssuerID
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetIssuerID
func (mmGetIssuerID *mStaticProfileExtensionMockGetIssuerID) Inspect(f func()) *mStaticProfileExtensionMockGetIssuerID {
	if mmGetIssuerID.mock.inspectFuncGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetIssuerID")
	}

	mmGetIssuerID.mock.inspectFuncGetIssuerID = f

	return mmGetIssuerID
}

// Return sets up results that will be returned by StaticProfileExtension.GetIssuerID
func (mmGetIssuerID *mStaticProfileExtensionMockGetIssuerID) Return(s1 insolar.ShortNodeID) *StaticProfileExtensionMock {
	if mmGetIssuerID.mock.funcGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuerID mock is already set by Set")
	}

	if mmGetIssuerID.defaultExpectation == nil {
		mmGetIssuerID.defaultExpectation = &StaticProfileExtensionMockGetIssuerIDExpectation{mock: mmGetIssuerID.mock}
	}
	mmGetIssuerID.defaultExpectation.results = &StaticProfileExtensionMockGetIssuerIDResults{s1}
	return mmGetIssuerID.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetIssuerID method
func (mmGetIssuerID *mStaticProfileExtensionMockGetIssuerID) Set(f func() (s1 insolar.ShortNodeID)) *StaticProfileExtensionMock {
	if mmGetIssuerID.defaultExpectation != nil {
		mmGetIssuerID.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetIssuerID method")
	}

	if len(mmGetIssuerID.expectations) > 0 {
		mmGetIssuerID.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetIssuerID method")
	}

	mmGetIssuerID.mock.funcGetIssuerID = f
	return mmGetIssuerID.mock
}

// GetIssuerID implements StaticProfileExtension
func (mmGetIssuerID *StaticProfileExtensionMock) GetIssuerID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetIssuerID.beforeGetIssuerIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuerID.afterGetIssuerIDCounter, 1)

	if mmGetIssuerID.inspectFuncGetIssuerID != nil {
		mmGetIssuerID.inspectFuncGetIssuerID()
	}

	if mmGetIssuerID.GetIssuerIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuerID.GetIssuerIDMock.defaultExpectation.Counter, 1)

		results := mmGetIssuerID.GetIssuerIDMock.defaultExpectation.results
		if results == nil {
			mmGetIssuerID.t.Fatal("No results are set for the StaticProfileExtensionMock.GetIssuerID")
		}
		return (*results).s1
	}
	if mmGetIssuerID.funcGetIssuerID != nil {
		return mmGetIssuerID.funcGetIssuerID()
	}
	mmGetIssuerID.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetIssuerID.")
	return
}

// GetIssuerIDAfterCounter returns a count of finished StaticProfileExtensionMock.GetIssuerID invocations
func (mmGetIssuerID *StaticProfileExtensionMock) GetIssuerIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerID.afterGetIssuerIDCounter)
}

// GetIssuerIDBeforeCounter returns a count of StaticProfileExtensionMock.GetIssuerID invocations
func (mmGetIssuerID *StaticProfileExtensionMock) GetIssuerIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerID.beforeGetIssuerIDCounter)
}

// MinimockGetIssuerIDDone returns true if the count of the GetIssuerID invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetIssuerIDDone() bool {
	for _, e := range m.GetIssuerIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerID != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuerIDInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetIssuerIDInspect() {
	for _, e := range m.GetIssuerIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuerID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuerID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerID != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuerID")
	}
}

type mStaticProfileExtensionMockGetIssuerSignature struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetIssuerSignatureExpectation
	expectations       []*StaticProfileExtensionMockGetIssuerSignatureExpectation
}

// StaticProfileExtensionMockGetIssuerSignatureExpectation specifies expectation struct of the StaticProfileExtension.GetIssuerSignature
type StaticProfileExtensionMockGetIssuerSignatureExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetIssuerSignatureResults
	Counter uint64
}

// StaticProfileExtensionMockGetIssuerSignatureResults contains results of the StaticProfileExtension.GetIssuerSignature
type StaticProfileExtensionMockGetIssuerSignatureResults struct {
	s1 cryptkit.SignatureHolder
}

// Expect sets up expected params for StaticProfileExtension.GetIssuerSignature
func (mmGetIssuerSignature *mStaticProfileExtensionMockGetIssuerSignature) Expect() *mStaticProfileExtensionMockGetIssuerSignature {
	if mmGetIssuerSignature.mock.funcGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuerSignature mock is already set by Set")
	}

	if mmGetIssuerSignature.defaultExpectation == nil {
		mmGetIssuerSignature.defaultExpectation = &StaticProfileExtensionMockGetIssuerSignatureExpectation{}
	}

	return mmGetIssuerSignature
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetIssuerSignature
func (mmGetIssuerSignature *mStaticProfileExtensionMockGetIssuerSignature) Inspect(f func()) *mStaticProfileExtensionMockGetIssuerSignature {
	if mmGetIssuerSignature.mock.inspectFuncGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetIssuerSignature")
	}

	mmGetIssuerSignature.mock.inspectFuncGetIssuerSignature = f

	return mmGetIssuerSignature
}

// Return sets up results that will be returned by StaticProfileExtension.GetIssuerSignature
func (mmGetIssuerSignature *mStaticProfileExtensionMockGetIssuerSignature) Return(s1 cryptkit.SignatureHolder) *StaticProfileExtensionMock {
	if mmGetIssuerSignature.mock.funcGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("StaticProfileExtensionMock.GetIssuerSignature mock is already set by Set")
	}

	if mmGetIssuerSignature.defaultExpectation == nil {
		mmGetIssuerSignature.defaultExpectation = &StaticProfileExtensionMockGetIssuerSignatureExpectation{mock: mmGetIssuerSignature.mock}
	}
	mmGetIssuerSignature.defaultExpectation.results = &StaticProfileExtensionMockGetIssuerSignatureResults{s1}
	return mmGetIssuerSignature.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetIssuerSignature method
func (mmGetIssuerSignature *mStaticProfileExtensionMockGetIssuerSignature) Set(f func() (s1 cryptkit.SignatureHolder)) *StaticProfileExtensionMock {
	if mmGetIssuerSignature.defaultExpectation != nil {
		mmGetIssuerSignature.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetIssuerSignature method")
	}

	if len(mmGetIssuerSignature.expectations) > 0 {
		mmGetIssuerSignature.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetIssuerSignature method")
	}

	mmGetIssuerSignature.mock.funcGetIssuerSignature = f
	return mmGetIssuerSignature.mock
}

// GetIssuerSignature implements StaticProfileExtension
func (mmGetIssuerSignature *StaticProfileExtensionMock) GetIssuerSignature() (s1 cryptkit.SignatureHolder) {
	mm_atomic.AddUint64(&mmGetIssuerSignature.beforeGetIssuerSignatureCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuerSignature.afterGetIssuerSignatureCounter, 1)

	if mmGetIssuerSignature.inspectFuncGetIssuerSignature != nil {
		mmGetIssuerSignature.inspectFuncGetIssuerSignature()
	}

	if mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation.Counter, 1)

		results := mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation.results
		if results == nil {
			mmGetIssuerSignature.t.Fatal("No results are set for the StaticProfileExtensionMock.GetIssuerSignature")
		}
		return (*results).s1
	}
	if mmGetIssuerSignature.funcGetIssuerSignature != nil {
		return mmGetIssuerSignature.funcGetIssuerSignature()
	}
	mmGetIssuerSignature.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetIssuerSignature.")
	return
}

// GetIssuerSignatureAfterCounter returns a count of finished StaticProfileExtensionMock.GetIssuerSignature invocations
func (mmGetIssuerSignature *StaticProfileExtensionMock) GetIssuerSignatureAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerSignature.afterGetIssuerSignatureCounter)
}

// GetIssuerSignatureBeforeCounter returns a count of StaticProfileExtensionMock.GetIssuerSignature invocations
func (mmGetIssuerSignature *StaticProfileExtensionMock) GetIssuerSignatureBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerSignature.beforeGetIssuerSignatureCounter)
}

// MinimockGetIssuerSignatureDone returns true if the count of the GetIssuerSignature invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetIssuerSignatureDone() bool {
	for _, e := range m.GetIssuerSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerSignature != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuerSignatureInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetIssuerSignatureInspect() {
	for _, e := range m.GetIssuerSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuerSignature")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuerSignature")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerSignature != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetIssuerSignature")
	}
}

type mStaticProfileExtensionMockGetPowerLevels struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetPowerLevelsExpectation
	expectations       []*StaticProfileExtensionMockGetPowerLevelsExpectation
}

// StaticProfileExtensionMockGetPowerLevelsExpectation specifies expectation struct of the StaticProfileExtension.GetPowerLevels
type StaticProfileExtensionMockGetPowerLevelsExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetPowerLevelsResults
	Counter uint64
}

// StaticProfileExtensionMockGetPowerLevelsResults contains results of the StaticProfileExtension.GetPowerLevels
type StaticProfileExtensionMockGetPowerLevelsResults struct {
	p1 member.PowerSet
}

// Expect sets up expected params for StaticProfileExtension.GetPowerLevels
func (mmGetPowerLevels *mStaticProfileExtensionMockGetPowerLevels) Expect() *mStaticProfileExtensionMockGetPowerLevels {
	if mmGetPowerLevels.mock.funcGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("StaticProfileExtensionMock.GetPowerLevels mock is already set by Set")
	}

	if mmGetPowerLevels.defaultExpectation == nil {
		mmGetPowerLevels.defaultExpectation = &StaticProfileExtensionMockGetPowerLevelsExpectation{}
	}

	return mmGetPowerLevels
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetPowerLevels
func (mmGetPowerLevels *mStaticProfileExtensionMockGetPowerLevels) Inspect(f func()) *mStaticProfileExtensionMockGetPowerLevels {
	if mmGetPowerLevels.mock.inspectFuncGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetPowerLevels")
	}

	mmGetPowerLevels.mock.inspectFuncGetPowerLevels = f

	return mmGetPowerLevels
}

// Return sets up results that will be returned by StaticProfileExtension.GetPowerLevels
func (mmGetPowerLevels *mStaticProfileExtensionMockGetPowerLevels) Return(p1 member.PowerSet) *StaticProfileExtensionMock {
	if mmGetPowerLevels.mock.funcGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("StaticProfileExtensionMock.GetPowerLevels mock is already set by Set")
	}

	if mmGetPowerLevels.defaultExpectation == nil {
		mmGetPowerLevels.defaultExpectation = &StaticProfileExtensionMockGetPowerLevelsExpectation{mock: mmGetPowerLevels.mock}
	}
	mmGetPowerLevels.defaultExpectation.results = &StaticProfileExtensionMockGetPowerLevelsResults{p1}
	return mmGetPowerLevels.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetPowerLevels method
func (mmGetPowerLevels *mStaticProfileExtensionMockGetPowerLevels) Set(f func() (p1 member.PowerSet)) *StaticProfileExtensionMock {
	if mmGetPowerLevels.defaultExpectation != nil {
		mmGetPowerLevels.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetPowerLevels method")
	}

	if len(mmGetPowerLevels.expectations) > 0 {
		mmGetPowerLevels.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetPowerLevels method")
	}

	mmGetPowerLevels.mock.funcGetPowerLevels = f
	return mmGetPowerLevels.mock
}

// GetPowerLevels implements StaticProfileExtension
func (mmGetPowerLevels *StaticProfileExtensionMock) GetPowerLevels() (p1 member.PowerSet) {
	mm_atomic.AddUint64(&mmGetPowerLevels.beforeGetPowerLevelsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPowerLevels.afterGetPowerLevelsCounter, 1)

	if mmGetPowerLevels.inspectFuncGetPowerLevels != nil {
		mmGetPowerLevels.inspectFuncGetPowerLevels()
	}

	if mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation.Counter, 1)

		results := mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation.results
		if results == nil {
			mmGetPowerLevels.t.Fatal("No results are set for the StaticProfileExtensionMock.GetPowerLevels")
		}
		return (*results).p1
	}
	if mmGetPowerLevels.funcGetPowerLevels != nil {
		return mmGetPowerLevels.funcGetPowerLevels()
	}
	mmGetPowerLevels.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetPowerLevels.")
	return
}

// GetPowerLevelsAfterCounter returns a count of finished StaticProfileExtensionMock.GetPowerLevels invocations
func (mmGetPowerLevels *StaticProfileExtensionMock) GetPowerLevelsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPowerLevels.afterGetPowerLevelsCounter)
}

// GetPowerLevelsBeforeCounter returns a count of StaticProfileExtensionMock.GetPowerLevels invocations
func (mmGetPowerLevels *StaticProfileExtensionMock) GetPowerLevelsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPowerLevels.beforeGetPowerLevelsCounter)
}

// MinimockGetPowerLevelsDone returns true if the count of the GetPowerLevels invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetPowerLevelsDone() bool {
	for _, e := range m.GetPowerLevelsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerLevelsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPowerLevels != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPowerLevelsInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetPowerLevelsInspect() {
	for _, e := range m.GetPowerLevelsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetPowerLevels")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerLevelsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetPowerLevels")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPowerLevels != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetPowerLevels")
	}
}

type mStaticProfileExtensionMockGetReference struct {
	mock               *StaticProfileExtensionMock
	defaultExpectation *StaticProfileExtensionMockGetReferenceExpectation
	expectations       []*StaticProfileExtensionMockGetReferenceExpectation
}

// StaticProfileExtensionMockGetReferenceExpectation specifies expectation struct of the StaticProfileExtension.GetReference
type StaticProfileExtensionMockGetReferenceExpectation struct {
	mock *StaticProfileExtensionMock

	results *StaticProfileExtensionMockGetReferenceResults
	Counter uint64
}

// StaticProfileExtensionMockGetReferenceResults contains results of the StaticProfileExtension.GetReference
type StaticProfileExtensionMockGetReferenceResults struct {
	r1 insolar.Reference
}

// Expect sets up expected params for StaticProfileExtension.GetReference
func (mmGetReference *mStaticProfileExtensionMockGetReference) Expect() *mStaticProfileExtensionMockGetReference {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("StaticProfileExtensionMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &StaticProfileExtensionMockGetReferenceExpectation{}
	}

	return mmGetReference
}

// Inspect accepts an inspector function that has same arguments as the StaticProfileExtension.GetReference
func (mmGetReference *mStaticProfileExtensionMockGetReference) Inspect(f func()) *mStaticProfileExtensionMockGetReference {
	if mmGetReference.mock.inspectFuncGetReference != nil {
		mmGetReference.mock.t.Fatalf("Inspect function is already set for StaticProfileExtensionMock.GetReference")
	}

	mmGetReference.mock.inspectFuncGetReference = f

	return mmGetReference
}

// Return sets up results that will be returned by StaticProfileExtension.GetReference
func (mmGetReference *mStaticProfileExtensionMockGetReference) Return(r1 insolar.Reference) *StaticProfileExtensionMock {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("StaticProfileExtensionMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &StaticProfileExtensionMockGetReferenceExpectation{mock: mmGetReference.mock}
	}
	mmGetReference.defaultExpectation.results = &StaticProfileExtensionMockGetReferenceResults{r1}
	return mmGetReference.mock
}

//Set uses given function f to mock the StaticProfileExtension.GetReference method
func (mmGetReference *mStaticProfileExtensionMockGetReference) Set(f func() (r1 insolar.Reference)) *StaticProfileExtensionMock {
	if mmGetReference.defaultExpectation != nil {
		mmGetReference.mock.t.Fatalf("Default expectation is already set for the StaticProfileExtension.GetReference method")
	}

	if len(mmGetReference.expectations) > 0 {
		mmGetReference.mock.t.Fatalf("Some expectations are already set for the StaticProfileExtension.GetReference method")
	}

	mmGetReference.mock.funcGetReference = f
	return mmGetReference.mock
}

// GetReference implements StaticProfileExtension
func (mmGetReference *StaticProfileExtensionMock) GetReference() (r1 insolar.Reference) {
	mm_atomic.AddUint64(&mmGetReference.beforeGetReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReference.afterGetReferenceCounter, 1)

	if mmGetReference.inspectFuncGetReference != nil {
		mmGetReference.inspectFuncGetReference()
	}

	if mmGetReference.GetReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReference.GetReferenceMock.defaultExpectation.Counter, 1)

		results := mmGetReference.GetReferenceMock.defaultExpectation.results
		if results == nil {
			mmGetReference.t.Fatal("No results are set for the StaticProfileExtensionMock.GetReference")
		}
		return (*results).r1
	}
	if mmGetReference.funcGetReference != nil {
		return mmGetReference.funcGetReference()
	}
	mmGetReference.t.Fatalf("Unexpected call to StaticProfileExtensionMock.GetReference.")
	return
}

// GetReferenceAfterCounter returns a count of finished StaticProfileExtensionMock.GetReference invocations
func (mmGetReference *StaticProfileExtensionMock) GetReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.afterGetReferenceCounter)
}

// GetReferenceBeforeCounter returns a count of StaticProfileExtensionMock.GetReference invocations
func (mmGetReference *StaticProfileExtensionMock) GetReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.beforeGetReferenceCounter)
}

// MinimockGetReferenceDone returns true if the count of the GetReference invocations corresponds
// the number of defined expectations
func (m *StaticProfileExtensionMock) MinimockGetReferenceDone() bool {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReferenceInspect logs each unmet expectation
func (m *StaticProfileExtensionMock) MinimockGetReferenceInspect() {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to StaticProfileExtensionMock.GetReference")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetReference")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to StaticProfileExtensionMock.GetReference")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StaticProfileExtensionMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetExtraEndpointsInspect()

		m.MinimockGetIntroducedNodeIDInspect()

		m.MinimockGetIssuedAtPulseInspect()

		m.MinimockGetIssuedAtTimeInspect()

		m.MinimockGetIssuerIDInspect()

		m.MinimockGetIssuerSignatureInspect()

		m.MinimockGetPowerLevelsInspect()

		m.MinimockGetReferenceInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StaticProfileExtensionMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StaticProfileExtensionMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetExtraEndpointsDone() &&
		m.MinimockGetIntroducedNodeIDDone() &&
		m.MinimockGetIssuedAtPulseDone() &&
		m.MinimockGetIssuedAtTimeDone() &&
		m.MinimockGetIssuerIDDone() &&
		m.MinimockGetIssuerSignatureDone() &&
		m.MinimockGetPowerLevelsDone() &&
		m.MinimockGetReferenceDone()
}
