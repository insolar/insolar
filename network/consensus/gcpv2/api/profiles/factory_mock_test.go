package profiles

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// FactoryMock implements Factory
type FactoryMock struct {
	t minimock.Tester

	funcCreateBriefIntroProfile          func(candidate BriefCandidateProfile) (s1 StaticProfile)
	inspectFuncCreateBriefIntroProfile   func(candidate BriefCandidateProfile)
	afterCreateBriefIntroProfileCounter  uint64
	beforeCreateBriefIntroProfileCounter uint64
	CreateBriefIntroProfileMock          mFactoryMockCreateBriefIntroProfile

	funcCreateFullIntroProfile          func(candidate CandidateProfile) (s1 StaticProfile)
	inspectFuncCreateFullIntroProfile   func(candidate CandidateProfile)
	afterCreateFullIntroProfileCounter  uint64
	beforeCreateFullIntroProfileCounter uint64
	CreateFullIntroProfileMock          mFactoryMockCreateFullIntroProfile

	funcCreateUpgradableIntroProfile          func(candidate BriefCandidateProfile) (s1 StaticProfile)
	inspectFuncCreateUpgradableIntroProfile   func(candidate BriefCandidateProfile)
	afterCreateUpgradableIntroProfileCounter  uint64
	beforeCreateUpgradableIntroProfileCounter uint64
	CreateUpgradableIntroProfileMock          mFactoryMockCreateUpgradableIntroProfile

	funcTryConvertUpgradableIntroProfile          func(profile StaticProfile) (s1 StaticProfile, b1 bool)
	inspectFuncTryConvertUpgradableIntroProfile   func(profile StaticProfile)
	afterTryConvertUpgradableIntroProfileCounter  uint64
	beforeTryConvertUpgradableIntroProfileCounter uint64
	TryConvertUpgradableIntroProfileMock          mFactoryMockTryConvertUpgradableIntroProfile
}

// NewFactoryMock returns a mock for Factory
func NewFactoryMock(t minimock.Tester) *FactoryMock {
	m := &FactoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateBriefIntroProfileMock = mFactoryMockCreateBriefIntroProfile{mock: m}
	m.CreateBriefIntroProfileMock.callArgs = []*FactoryMockCreateBriefIntroProfileParams{}

	m.CreateFullIntroProfileMock = mFactoryMockCreateFullIntroProfile{mock: m}
	m.CreateFullIntroProfileMock.callArgs = []*FactoryMockCreateFullIntroProfileParams{}

	m.CreateUpgradableIntroProfileMock = mFactoryMockCreateUpgradableIntroProfile{mock: m}
	m.CreateUpgradableIntroProfileMock.callArgs = []*FactoryMockCreateUpgradableIntroProfileParams{}

	m.TryConvertUpgradableIntroProfileMock = mFactoryMockTryConvertUpgradableIntroProfile{mock: m}
	m.TryConvertUpgradableIntroProfileMock.callArgs = []*FactoryMockTryConvertUpgradableIntroProfileParams{}

	return m
}

type mFactoryMockCreateBriefIntroProfile struct {
	mock               *FactoryMock
	defaultExpectation *FactoryMockCreateBriefIntroProfileExpectation
	expectations       []*FactoryMockCreateBriefIntroProfileExpectation

	callArgs []*FactoryMockCreateBriefIntroProfileParams
	mutex    sync.RWMutex
}

// FactoryMockCreateBriefIntroProfileExpectation specifies expectation struct of the Factory.CreateBriefIntroProfile
type FactoryMockCreateBriefIntroProfileExpectation struct {
	mock    *FactoryMock
	params  *FactoryMockCreateBriefIntroProfileParams
	results *FactoryMockCreateBriefIntroProfileResults
	Counter uint64
}

// FactoryMockCreateBriefIntroProfileParams contains parameters of the Factory.CreateBriefIntroProfile
type FactoryMockCreateBriefIntroProfileParams struct {
	candidate BriefCandidateProfile
}

// FactoryMockCreateBriefIntroProfileResults contains results of the Factory.CreateBriefIntroProfile
type FactoryMockCreateBriefIntroProfileResults struct {
	s1 StaticProfile
}

// Expect sets up expected params for Factory.CreateBriefIntroProfile
func (mmCreateBriefIntroProfile *mFactoryMockCreateBriefIntroProfile) Expect(candidate BriefCandidateProfile) *mFactoryMockCreateBriefIntroProfile {
	if mmCreateBriefIntroProfile.mock.funcCreateBriefIntroProfile != nil {
		mmCreateBriefIntroProfile.mock.t.Fatalf("FactoryMock.CreateBriefIntroProfile mock is already set by Set")
	}

	if mmCreateBriefIntroProfile.defaultExpectation == nil {
		mmCreateBriefIntroProfile.defaultExpectation = &FactoryMockCreateBriefIntroProfileExpectation{}
	}

	mmCreateBriefIntroProfile.defaultExpectation.params = &FactoryMockCreateBriefIntroProfileParams{candidate}
	for _, e := range mmCreateBriefIntroProfile.expectations {
		if minimock.Equal(e.params, mmCreateBriefIntroProfile.defaultExpectation.params) {
			mmCreateBriefIntroProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateBriefIntroProfile.defaultExpectation.params)
		}
	}

	return mmCreateBriefIntroProfile
}

// Inspect accepts an inspector function that has same arguments as the Factory.CreateBriefIntroProfile
func (mmCreateBriefIntroProfile *mFactoryMockCreateBriefIntroProfile) Inspect(f func(candidate BriefCandidateProfile)) *mFactoryMockCreateBriefIntroProfile {
	if mmCreateBriefIntroProfile.mock.inspectFuncCreateBriefIntroProfile != nil {
		mmCreateBriefIntroProfile.mock.t.Fatalf("Inspect function is already set for FactoryMock.CreateBriefIntroProfile")
	}

	mmCreateBriefIntroProfile.mock.inspectFuncCreateBriefIntroProfile = f

	return mmCreateBriefIntroProfile
}

// Return sets up results that will be returned by Factory.CreateBriefIntroProfile
func (mmCreateBriefIntroProfile *mFactoryMockCreateBriefIntroProfile) Return(s1 StaticProfile) *FactoryMock {
	if mmCreateBriefIntroProfile.mock.funcCreateBriefIntroProfile != nil {
		mmCreateBriefIntroProfile.mock.t.Fatalf("FactoryMock.CreateBriefIntroProfile mock is already set by Set")
	}

	if mmCreateBriefIntroProfile.defaultExpectation == nil {
		mmCreateBriefIntroProfile.defaultExpectation = &FactoryMockCreateBriefIntroProfileExpectation{mock: mmCreateBriefIntroProfile.mock}
	}
	mmCreateBriefIntroProfile.defaultExpectation.results = &FactoryMockCreateBriefIntroProfileResults{s1}
	return mmCreateBriefIntroProfile.mock
}

//Set uses given function f to mock the Factory.CreateBriefIntroProfile method
func (mmCreateBriefIntroProfile *mFactoryMockCreateBriefIntroProfile) Set(f func(candidate BriefCandidateProfile) (s1 StaticProfile)) *FactoryMock {
	if mmCreateBriefIntroProfile.defaultExpectation != nil {
		mmCreateBriefIntroProfile.mock.t.Fatalf("Default expectation is already set for the Factory.CreateBriefIntroProfile method")
	}

	if len(mmCreateBriefIntroProfile.expectations) > 0 {
		mmCreateBriefIntroProfile.mock.t.Fatalf("Some expectations are already set for the Factory.CreateBriefIntroProfile method")
	}

	mmCreateBriefIntroProfile.mock.funcCreateBriefIntroProfile = f
	return mmCreateBriefIntroProfile.mock
}

// When sets expectation for the Factory.CreateBriefIntroProfile which will trigger the result defined by the following
// Then helper
func (mmCreateBriefIntroProfile *mFactoryMockCreateBriefIntroProfile) When(candidate BriefCandidateProfile) *FactoryMockCreateBriefIntroProfileExpectation {
	if mmCreateBriefIntroProfile.mock.funcCreateBriefIntroProfile != nil {
		mmCreateBriefIntroProfile.mock.t.Fatalf("FactoryMock.CreateBriefIntroProfile mock is already set by Set")
	}

	expectation := &FactoryMockCreateBriefIntroProfileExpectation{
		mock:   mmCreateBriefIntroProfile.mock,
		params: &FactoryMockCreateBriefIntroProfileParams{candidate},
	}
	mmCreateBriefIntroProfile.expectations = append(mmCreateBriefIntroProfile.expectations, expectation)
	return expectation
}

// Then sets up Factory.CreateBriefIntroProfile return parameters for the expectation previously defined by the When method
func (e *FactoryMockCreateBriefIntroProfileExpectation) Then(s1 StaticProfile) *FactoryMock {
	e.results = &FactoryMockCreateBriefIntroProfileResults{s1}
	return e.mock
}

// CreateBriefIntroProfile implements Factory
func (mmCreateBriefIntroProfile *FactoryMock) CreateBriefIntroProfile(candidate BriefCandidateProfile) (s1 StaticProfile) {
	mm_atomic.AddUint64(&mmCreateBriefIntroProfile.beforeCreateBriefIntroProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateBriefIntroProfile.afterCreateBriefIntroProfileCounter, 1)

	if mmCreateBriefIntroProfile.inspectFuncCreateBriefIntroProfile != nil {
		mmCreateBriefIntroProfile.inspectFuncCreateBriefIntroProfile(candidate)
	}

	params := &FactoryMockCreateBriefIntroProfileParams{candidate}

	// Record call args
	mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.mutex.Lock()
	mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.callArgs = append(mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.callArgs, params)
	mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.mutex.Unlock()

	for _, e := range mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.defaultExpectation.Counter, 1)
		want := mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.defaultExpectation.params
		got := FactoryMockCreateBriefIntroProfileParams{candidate}
		if want != nil && !minimock.Equal(*want, got) {
			mmCreateBriefIntroProfile.t.Errorf("FactoryMock.CreateBriefIntroProfile got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmCreateBriefIntroProfile.CreateBriefIntroProfileMock.defaultExpectation.results
		if results == nil {
			mmCreateBriefIntroProfile.t.Fatal("No results are set for the FactoryMock.CreateBriefIntroProfile")
		}
		return (*results).s1
	}
	if mmCreateBriefIntroProfile.funcCreateBriefIntroProfile != nil {
		return mmCreateBriefIntroProfile.funcCreateBriefIntroProfile(candidate)
	}
	mmCreateBriefIntroProfile.t.Fatalf("Unexpected call to FactoryMock.CreateBriefIntroProfile. %v", candidate)
	return
}

// CreateBriefIntroProfileAfterCounter returns a count of finished FactoryMock.CreateBriefIntroProfile invocations
func (mmCreateBriefIntroProfile *FactoryMock) CreateBriefIntroProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateBriefIntroProfile.afterCreateBriefIntroProfileCounter)
}

// CreateBriefIntroProfileBeforeCounter returns a count of FactoryMock.CreateBriefIntroProfile invocations
func (mmCreateBriefIntroProfile *FactoryMock) CreateBriefIntroProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateBriefIntroProfile.beforeCreateBriefIntroProfileCounter)
}

// Calls returns a list of arguments used in each call to FactoryMock.CreateBriefIntroProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateBriefIntroProfile *mFactoryMockCreateBriefIntroProfile) Calls() []*FactoryMockCreateBriefIntroProfileParams {
	mmCreateBriefIntroProfile.mutex.RLock()

	argCopy := make([]*FactoryMockCreateBriefIntroProfileParams, len(mmCreateBriefIntroProfile.callArgs))
	copy(argCopy, mmCreateBriefIntroProfile.callArgs)

	mmCreateBriefIntroProfile.mutex.RUnlock()

	return argCopy
}

// MinimockCreateBriefIntroProfileDone returns true if the count of the CreateBriefIntroProfile invocations corresponds
// the number of defined expectations
func (m *FactoryMock) MinimockCreateBriefIntroProfileDone() bool {
	for _, e := range m.CreateBriefIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateBriefIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateBriefIntroProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateBriefIntroProfile != nil && mm_atomic.LoadUint64(&m.afterCreateBriefIntroProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateBriefIntroProfileInspect logs each unmet expectation
func (m *FactoryMock) MinimockCreateBriefIntroProfileInspect() {
	for _, e := range m.CreateBriefIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FactoryMock.CreateBriefIntroProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateBriefIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateBriefIntroProfileCounter) < 1 {
		if m.CreateBriefIntroProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FactoryMock.CreateBriefIntroProfile")
		} else {
			m.t.Errorf("Expected call to FactoryMock.CreateBriefIntroProfile with params: %#v", *m.CreateBriefIntroProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateBriefIntroProfile != nil && mm_atomic.LoadUint64(&m.afterCreateBriefIntroProfileCounter) < 1 {
		m.t.Error("Expected call to FactoryMock.CreateBriefIntroProfile")
	}
}

type mFactoryMockCreateFullIntroProfile struct {
	mock               *FactoryMock
	defaultExpectation *FactoryMockCreateFullIntroProfileExpectation
	expectations       []*FactoryMockCreateFullIntroProfileExpectation

	callArgs []*FactoryMockCreateFullIntroProfileParams
	mutex    sync.RWMutex
}

// FactoryMockCreateFullIntroProfileExpectation specifies expectation struct of the Factory.CreateFullIntroProfile
type FactoryMockCreateFullIntroProfileExpectation struct {
	mock    *FactoryMock
	params  *FactoryMockCreateFullIntroProfileParams
	results *FactoryMockCreateFullIntroProfileResults
	Counter uint64
}

// FactoryMockCreateFullIntroProfileParams contains parameters of the Factory.CreateFullIntroProfile
type FactoryMockCreateFullIntroProfileParams struct {
	candidate CandidateProfile
}

// FactoryMockCreateFullIntroProfileResults contains results of the Factory.CreateFullIntroProfile
type FactoryMockCreateFullIntroProfileResults struct {
	s1 StaticProfile
}

// Expect sets up expected params for Factory.CreateFullIntroProfile
func (mmCreateFullIntroProfile *mFactoryMockCreateFullIntroProfile) Expect(candidate CandidateProfile) *mFactoryMockCreateFullIntroProfile {
	if mmCreateFullIntroProfile.mock.funcCreateFullIntroProfile != nil {
		mmCreateFullIntroProfile.mock.t.Fatalf("FactoryMock.CreateFullIntroProfile mock is already set by Set")
	}

	if mmCreateFullIntroProfile.defaultExpectation == nil {
		mmCreateFullIntroProfile.defaultExpectation = &FactoryMockCreateFullIntroProfileExpectation{}
	}

	mmCreateFullIntroProfile.defaultExpectation.params = &FactoryMockCreateFullIntroProfileParams{candidate}
	for _, e := range mmCreateFullIntroProfile.expectations {
		if minimock.Equal(e.params, mmCreateFullIntroProfile.defaultExpectation.params) {
			mmCreateFullIntroProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateFullIntroProfile.defaultExpectation.params)
		}
	}

	return mmCreateFullIntroProfile
}

// Inspect accepts an inspector function that has same arguments as the Factory.CreateFullIntroProfile
func (mmCreateFullIntroProfile *mFactoryMockCreateFullIntroProfile) Inspect(f func(candidate CandidateProfile)) *mFactoryMockCreateFullIntroProfile {
	if mmCreateFullIntroProfile.mock.inspectFuncCreateFullIntroProfile != nil {
		mmCreateFullIntroProfile.mock.t.Fatalf("Inspect function is already set for FactoryMock.CreateFullIntroProfile")
	}

	mmCreateFullIntroProfile.mock.inspectFuncCreateFullIntroProfile = f

	return mmCreateFullIntroProfile
}

// Return sets up results that will be returned by Factory.CreateFullIntroProfile
func (mmCreateFullIntroProfile *mFactoryMockCreateFullIntroProfile) Return(s1 StaticProfile) *FactoryMock {
	if mmCreateFullIntroProfile.mock.funcCreateFullIntroProfile != nil {
		mmCreateFullIntroProfile.mock.t.Fatalf("FactoryMock.CreateFullIntroProfile mock is already set by Set")
	}

	if mmCreateFullIntroProfile.defaultExpectation == nil {
		mmCreateFullIntroProfile.defaultExpectation = &FactoryMockCreateFullIntroProfileExpectation{mock: mmCreateFullIntroProfile.mock}
	}
	mmCreateFullIntroProfile.defaultExpectation.results = &FactoryMockCreateFullIntroProfileResults{s1}
	return mmCreateFullIntroProfile.mock
}

//Set uses given function f to mock the Factory.CreateFullIntroProfile method
func (mmCreateFullIntroProfile *mFactoryMockCreateFullIntroProfile) Set(f func(candidate CandidateProfile) (s1 StaticProfile)) *FactoryMock {
	if mmCreateFullIntroProfile.defaultExpectation != nil {
		mmCreateFullIntroProfile.mock.t.Fatalf("Default expectation is already set for the Factory.CreateFullIntroProfile method")
	}

	if len(mmCreateFullIntroProfile.expectations) > 0 {
		mmCreateFullIntroProfile.mock.t.Fatalf("Some expectations are already set for the Factory.CreateFullIntroProfile method")
	}

	mmCreateFullIntroProfile.mock.funcCreateFullIntroProfile = f
	return mmCreateFullIntroProfile.mock
}

// When sets expectation for the Factory.CreateFullIntroProfile which will trigger the result defined by the following
// Then helper
func (mmCreateFullIntroProfile *mFactoryMockCreateFullIntroProfile) When(candidate CandidateProfile) *FactoryMockCreateFullIntroProfileExpectation {
	if mmCreateFullIntroProfile.mock.funcCreateFullIntroProfile != nil {
		mmCreateFullIntroProfile.mock.t.Fatalf("FactoryMock.CreateFullIntroProfile mock is already set by Set")
	}

	expectation := &FactoryMockCreateFullIntroProfileExpectation{
		mock:   mmCreateFullIntroProfile.mock,
		params: &FactoryMockCreateFullIntroProfileParams{candidate},
	}
	mmCreateFullIntroProfile.expectations = append(mmCreateFullIntroProfile.expectations, expectation)
	return expectation
}

// Then sets up Factory.CreateFullIntroProfile return parameters for the expectation previously defined by the When method
func (e *FactoryMockCreateFullIntroProfileExpectation) Then(s1 StaticProfile) *FactoryMock {
	e.results = &FactoryMockCreateFullIntroProfileResults{s1}
	return e.mock
}

// CreateFullIntroProfile implements Factory
func (mmCreateFullIntroProfile *FactoryMock) CreateFullIntroProfile(candidate CandidateProfile) (s1 StaticProfile) {
	mm_atomic.AddUint64(&mmCreateFullIntroProfile.beforeCreateFullIntroProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateFullIntroProfile.afterCreateFullIntroProfileCounter, 1)

	if mmCreateFullIntroProfile.inspectFuncCreateFullIntroProfile != nil {
		mmCreateFullIntroProfile.inspectFuncCreateFullIntroProfile(candidate)
	}

	params := &FactoryMockCreateFullIntroProfileParams{candidate}

	// Record call args
	mmCreateFullIntroProfile.CreateFullIntroProfileMock.mutex.Lock()
	mmCreateFullIntroProfile.CreateFullIntroProfileMock.callArgs = append(mmCreateFullIntroProfile.CreateFullIntroProfileMock.callArgs, params)
	mmCreateFullIntroProfile.CreateFullIntroProfileMock.mutex.Unlock()

	for _, e := range mmCreateFullIntroProfile.CreateFullIntroProfileMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmCreateFullIntroProfile.CreateFullIntroProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateFullIntroProfile.CreateFullIntroProfileMock.defaultExpectation.Counter, 1)
		want := mmCreateFullIntroProfile.CreateFullIntroProfileMock.defaultExpectation.params
		got := FactoryMockCreateFullIntroProfileParams{candidate}
		if want != nil && !minimock.Equal(*want, got) {
			mmCreateFullIntroProfile.t.Errorf("FactoryMock.CreateFullIntroProfile got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmCreateFullIntroProfile.CreateFullIntroProfileMock.defaultExpectation.results
		if results == nil {
			mmCreateFullIntroProfile.t.Fatal("No results are set for the FactoryMock.CreateFullIntroProfile")
		}
		return (*results).s1
	}
	if mmCreateFullIntroProfile.funcCreateFullIntroProfile != nil {
		return mmCreateFullIntroProfile.funcCreateFullIntroProfile(candidate)
	}
	mmCreateFullIntroProfile.t.Fatalf("Unexpected call to FactoryMock.CreateFullIntroProfile. %v", candidate)
	return
}

// CreateFullIntroProfileAfterCounter returns a count of finished FactoryMock.CreateFullIntroProfile invocations
func (mmCreateFullIntroProfile *FactoryMock) CreateFullIntroProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateFullIntroProfile.afterCreateFullIntroProfileCounter)
}

// CreateFullIntroProfileBeforeCounter returns a count of FactoryMock.CreateFullIntroProfile invocations
func (mmCreateFullIntroProfile *FactoryMock) CreateFullIntroProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateFullIntroProfile.beforeCreateFullIntroProfileCounter)
}

// Calls returns a list of arguments used in each call to FactoryMock.CreateFullIntroProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateFullIntroProfile *mFactoryMockCreateFullIntroProfile) Calls() []*FactoryMockCreateFullIntroProfileParams {
	mmCreateFullIntroProfile.mutex.RLock()

	argCopy := make([]*FactoryMockCreateFullIntroProfileParams, len(mmCreateFullIntroProfile.callArgs))
	copy(argCopy, mmCreateFullIntroProfile.callArgs)

	mmCreateFullIntroProfile.mutex.RUnlock()

	return argCopy
}

// MinimockCreateFullIntroProfileDone returns true if the count of the CreateFullIntroProfile invocations corresponds
// the number of defined expectations
func (m *FactoryMock) MinimockCreateFullIntroProfileDone() bool {
	for _, e := range m.CreateFullIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateFullIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateFullIntroProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateFullIntroProfile != nil && mm_atomic.LoadUint64(&m.afterCreateFullIntroProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateFullIntroProfileInspect logs each unmet expectation
func (m *FactoryMock) MinimockCreateFullIntroProfileInspect() {
	for _, e := range m.CreateFullIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FactoryMock.CreateFullIntroProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateFullIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateFullIntroProfileCounter) < 1 {
		if m.CreateFullIntroProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FactoryMock.CreateFullIntroProfile")
		} else {
			m.t.Errorf("Expected call to FactoryMock.CreateFullIntroProfile with params: %#v", *m.CreateFullIntroProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateFullIntroProfile != nil && mm_atomic.LoadUint64(&m.afterCreateFullIntroProfileCounter) < 1 {
		m.t.Error("Expected call to FactoryMock.CreateFullIntroProfile")
	}
}

type mFactoryMockCreateUpgradableIntroProfile struct {
	mock               *FactoryMock
	defaultExpectation *FactoryMockCreateUpgradableIntroProfileExpectation
	expectations       []*FactoryMockCreateUpgradableIntroProfileExpectation

	callArgs []*FactoryMockCreateUpgradableIntroProfileParams
	mutex    sync.RWMutex
}

// FactoryMockCreateUpgradableIntroProfileExpectation specifies expectation struct of the Factory.CreateUpgradableIntroProfile
type FactoryMockCreateUpgradableIntroProfileExpectation struct {
	mock    *FactoryMock
	params  *FactoryMockCreateUpgradableIntroProfileParams
	results *FactoryMockCreateUpgradableIntroProfileResults
	Counter uint64
}

// FactoryMockCreateUpgradableIntroProfileParams contains parameters of the Factory.CreateUpgradableIntroProfile
type FactoryMockCreateUpgradableIntroProfileParams struct {
	candidate BriefCandidateProfile
}

// FactoryMockCreateUpgradableIntroProfileResults contains results of the Factory.CreateUpgradableIntroProfile
type FactoryMockCreateUpgradableIntroProfileResults struct {
	s1 StaticProfile
}

// Expect sets up expected params for Factory.CreateUpgradableIntroProfile
func (mmCreateUpgradableIntroProfile *mFactoryMockCreateUpgradableIntroProfile) Expect(candidate BriefCandidateProfile) *mFactoryMockCreateUpgradableIntroProfile {
	if mmCreateUpgradableIntroProfile.mock.funcCreateUpgradableIntroProfile != nil {
		mmCreateUpgradableIntroProfile.mock.t.Fatalf("FactoryMock.CreateUpgradableIntroProfile mock is already set by Set")
	}

	if mmCreateUpgradableIntroProfile.defaultExpectation == nil {
		mmCreateUpgradableIntroProfile.defaultExpectation = &FactoryMockCreateUpgradableIntroProfileExpectation{}
	}

	mmCreateUpgradableIntroProfile.defaultExpectation.params = &FactoryMockCreateUpgradableIntroProfileParams{candidate}
	for _, e := range mmCreateUpgradableIntroProfile.expectations {
		if minimock.Equal(e.params, mmCreateUpgradableIntroProfile.defaultExpectation.params) {
			mmCreateUpgradableIntroProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateUpgradableIntroProfile.defaultExpectation.params)
		}
	}

	return mmCreateUpgradableIntroProfile
}

// Inspect accepts an inspector function that has same arguments as the Factory.CreateUpgradableIntroProfile
func (mmCreateUpgradableIntroProfile *mFactoryMockCreateUpgradableIntroProfile) Inspect(f func(candidate BriefCandidateProfile)) *mFactoryMockCreateUpgradableIntroProfile {
	if mmCreateUpgradableIntroProfile.mock.inspectFuncCreateUpgradableIntroProfile != nil {
		mmCreateUpgradableIntroProfile.mock.t.Fatalf("Inspect function is already set for FactoryMock.CreateUpgradableIntroProfile")
	}

	mmCreateUpgradableIntroProfile.mock.inspectFuncCreateUpgradableIntroProfile = f

	return mmCreateUpgradableIntroProfile
}

// Return sets up results that will be returned by Factory.CreateUpgradableIntroProfile
func (mmCreateUpgradableIntroProfile *mFactoryMockCreateUpgradableIntroProfile) Return(s1 StaticProfile) *FactoryMock {
	if mmCreateUpgradableIntroProfile.mock.funcCreateUpgradableIntroProfile != nil {
		mmCreateUpgradableIntroProfile.mock.t.Fatalf("FactoryMock.CreateUpgradableIntroProfile mock is already set by Set")
	}

	if mmCreateUpgradableIntroProfile.defaultExpectation == nil {
		mmCreateUpgradableIntroProfile.defaultExpectation = &FactoryMockCreateUpgradableIntroProfileExpectation{mock: mmCreateUpgradableIntroProfile.mock}
	}
	mmCreateUpgradableIntroProfile.defaultExpectation.results = &FactoryMockCreateUpgradableIntroProfileResults{s1}
	return mmCreateUpgradableIntroProfile.mock
}

//Set uses given function f to mock the Factory.CreateUpgradableIntroProfile method
func (mmCreateUpgradableIntroProfile *mFactoryMockCreateUpgradableIntroProfile) Set(f func(candidate BriefCandidateProfile) (s1 StaticProfile)) *FactoryMock {
	if mmCreateUpgradableIntroProfile.defaultExpectation != nil {
		mmCreateUpgradableIntroProfile.mock.t.Fatalf("Default expectation is already set for the Factory.CreateUpgradableIntroProfile method")
	}

	if len(mmCreateUpgradableIntroProfile.expectations) > 0 {
		mmCreateUpgradableIntroProfile.mock.t.Fatalf("Some expectations are already set for the Factory.CreateUpgradableIntroProfile method")
	}

	mmCreateUpgradableIntroProfile.mock.funcCreateUpgradableIntroProfile = f
	return mmCreateUpgradableIntroProfile.mock
}

// When sets expectation for the Factory.CreateUpgradableIntroProfile which will trigger the result defined by the following
// Then helper
func (mmCreateUpgradableIntroProfile *mFactoryMockCreateUpgradableIntroProfile) When(candidate BriefCandidateProfile) *FactoryMockCreateUpgradableIntroProfileExpectation {
	if mmCreateUpgradableIntroProfile.mock.funcCreateUpgradableIntroProfile != nil {
		mmCreateUpgradableIntroProfile.mock.t.Fatalf("FactoryMock.CreateUpgradableIntroProfile mock is already set by Set")
	}

	expectation := &FactoryMockCreateUpgradableIntroProfileExpectation{
		mock:   mmCreateUpgradableIntroProfile.mock,
		params: &FactoryMockCreateUpgradableIntroProfileParams{candidate},
	}
	mmCreateUpgradableIntroProfile.expectations = append(mmCreateUpgradableIntroProfile.expectations, expectation)
	return expectation
}

// Then sets up Factory.CreateUpgradableIntroProfile return parameters for the expectation previously defined by the When method
func (e *FactoryMockCreateUpgradableIntroProfileExpectation) Then(s1 StaticProfile) *FactoryMock {
	e.results = &FactoryMockCreateUpgradableIntroProfileResults{s1}
	return e.mock
}

// CreateUpgradableIntroProfile implements Factory
func (mmCreateUpgradableIntroProfile *FactoryMock) CreateUpgradableIntroProfile(candidate BriefCandidateProfile) (s1 StaticProfile) {
	mm_atomic.AddUint64(&mmCreateUpgradableIntroProfile.beforeCreateUpgradableIntroProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateUpgradableIntroProfile.afterCreateUpgradableIntroProfileCounter, 1)

	if mmCreateUpgradableIntroProfile.inspectFuncCreateUpgradableIntroProfile != nil {
		mmCreateUpgradableIntroProfile.inspectFuncCreateUpgradableIntroProfile(candidate)
	}

	params := &FactoryMockCreateUpgradableIntroProfileParams{candidate}

	// Record call args
	mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.mutex.Lock()
	mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.callArgs = append(mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.callArgs, params)
	mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.mutex.Unlock()

	for _, e := range mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1
		}
	}

	if mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.defaultExpectation.Counter, 1)
		want := mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.defaultExpectation.params
		got := FactoryMockCreateUpgradableIntroProfileParams{candidate}
		if want != nil && !minimock.Equal(*want, got) {
			mmCreateUpgradableIntroProfile.t.Errorf("FactoryMock.CreateUpgradableIntroProfile got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmCreateUpgradableIntroProfile.CreateUpgradableIntroProfileMock.defaultExpectation.results
		if results == nil {
			mmCreateUpgradableIntroProfile.t.Fatal("No results are set for the FactoryMock.CreateUpgradableIntroProfile")
		}
		return (*results).s1
	}
	if mmCreateUpgradableIntroProfile.funcCreateUpgradableIntroProfile != nil {
		return mmCreateUpgradableIntroProfile.funcCreateUpgradableIntroProfile(candidate)
	}
	mmCreateUpgradableIntroProfile.t.Fatalf("Unexpected call to FactoryMock.CreateUpgradableIntroProfile. %v", candidate)
	return
}

// CreateUpgradableIntroProfileAfterCounter returns a count of finished FactoryMock.CreateUpgradableIntroProfile invocations
func (mmCreateUpgradableIntroProfile *FactoryMock) CreateUpgradableIntroProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUpgradableIntroProfile.afterCreateUpgradableIntroProfileCounter)
}

// CreateUpgradableIntroProfileBeforeCounter returns a count of FactoryMock.CreateUpgradableIntroProfile invocations
func (mmCreateUpgradableIntroProfile *FactoryMock) CreateUpgradableIntroProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateUpgradableIntroProfile.beforeCreateUpgradableIntroProfileCounter)
}

// Calls returns a list of arguments used in each call to FactoryMock.CreateUpgradableIntroProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateUpgradableIntroProfile *mFactoryMockCreateUpgradableIntroProfile) Calls() []*FactoryMockCreateUpgradableIntroProfileParams {
	mmCreateUpgradableIntroProfile.mutex.RLock()

	argCopy := make([]*FactoryMockCreateUpgradableIntroProfileParams, len(mmCreateUpgradableIntroProfile.callArgs))
	copy(argCopy, mmCreateUpgradableIntroProfile.callArgs)

	mmCreateUpgradableIntroProfile.mutex.RUnlock()

	return argCopy
}

// MinimockCreateUpgradableIntroProfileDone returns true if the count of the CreateUpgradableIntroProfile invocations corresponds
// the number of defined expectations
func (m *FactoryMock) MinimockCreateUpgradableIntroProfileDone() bool {
	for _, e := range m.CreateUpgradableIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUpgradableIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUpgradableIntroProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUpgradableIntroProfile != nil && mm_atomic.LoadUint64(&m.afterCreateUpgradableIntroProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateUpgradableIntroProfileInspect logs each unmet expectation
func (m *FactoryMock) MinimockCreateUpgradableIntroProfileInspect() {
	for _, e := range m.CreateUpgradableIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FactoryMock.CreateUpgradableIntroProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateUpgradableIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateUpgradableIntroProfileCounter) < 1 {
		if m.CreateUpgradableIntroProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FactoryMock.CreateUpgradableIntroProfile")
		} else {
			m.t.Errorf("Expected call to FactoryMock.CreateUpgradableIntroProfile with params: %#v", *m.CreateUpgradableIntroProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateUpgradableIntroProfile != nil && mm_atomic.LoadUint64(&m.afterCreateUpgradableIntroProfileCounter) < 1 {
		m.t.Error("Expected call to FactoryMock.CreateUpgradableIntroProfile")
	}
}

type mFactoryMockTryConvertUpgradableIntroProfile struct {
	mock               *FactoryMock
	defaultExpectation *FactoryMockTryConvertUpgradableIntroProfileExpectation
	expectations       []*FactoryMockTryConvertUpgradableIntroProfileExpectation

	callArgs []*FactoryMockTryConvertUpgradableIntroProfileParams
	mutex    sync.RWMutex
}

// FactoryMockTryConvertUpgradableIntroProfileExpectation specifies expectation struct of the Factory.TryConvertUpgradableIntroProfile
type FactoryMockTryConvertUpgradableIntroProfileExpectation struct {
	mock    *FactoryMock
	params  *FactoryMockTryConvertUpgradableIntroProfileParams
	results *FactoryMockTryConvertUpgradableIntroProfileResults
	Counter uint64
}

// FactoryMockTryConvertUpgradableIntroProfileParams contains parameters of the Factory.TryConvertUpgradableIntroProfile
type FactoryMockTryConvertUpgradableIntroProfileParams struct {
	profile StaticProfile
}

// FactoryMockTryConvertUpgradableIntroProfileResults contains results of the Factory.TryConvertUpgradableIntroProfile
type FactoryMockTryConvertUpgradableIntroProfileResults struct {
	s1 StaticProfile
	b1 bool
}

// Expect sets up expected params for Factory.TryConvertUpgradableIntroProfile
func (mmTryConvertUpgradableIntroProfile *mFactoryMockTryConvertUpgradableIntroProfile) Expect(profile StaticProfile) *mFactoryMockTryConvertUpgradableIntroProfile {
	if mmTryConvertUpgradableIntroProfile.mock.funcTryConvertUpgradableIntroProfile != nil {
		mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("FactoryMock.TryConvertUpgradableIntroProfile mock is already set by Set")
	}

	if mmTryConvertUpgradableIntroProfile.defaultExpectation == nil {
		mmTryConvertUpgradableIntroProfile.defaultExpectation = &FactoryMockTryConvertUpgradableIntroProfileExpectation{}
	}

	mmTryConvertUpgradableIntroProfile.defaultExpectation.params = &FactoryMockTryConvertUpgradableIntroProfileParams{profile}
	for _, e := range mmTryConvertUpgradableIntroProfile.expectations {
		if minimock.Equal(e.params, mmTryConvertUpgradableIntroProfile.defaultExpectation.params) {
			mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTryConvertUpgradableIntroProfile.defaultExpectation.params)
		}
	}

	return mmTryConvertUpgradableIntroProfile
}

// Inspect accepts an inspector function that has same arguments as the Factory.TryConvertUpgradableIntroProfile
func (mmTryConvertUpgradableIntroProfile *mFactoryMockTryConvertUpgradableIntroProfile) Inspect(f func(profile StaticProfile)) *mFactoryMockTryConvertUpgradableIntroProfile {
	if mmTryConvertUpgradableIntroProfile.mock.inspectFuncTryConvertUpgradableIntroProfile != nil {
		mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("Inspect function is already set for FactoryMock.TryConvertUpgradableIntroProfile")
	}

	mmTryConvertUpgradableIntroProfile.mock.inspectFuncTryConvertUpgradableIntroProfile = f

	return mmTryConvertUpgradableIntroProfile
}

// Return sets up results that will be returned by Factory.TryConvertUpgradableIntroProfile
func (mmTryConvertUpgradableIntroProfile *mFactoryMockTryConvertUpgradableIntroProfile) Return(s1 StaticProfile, b1 bool) *FactoryMock {
	if mmTryConvertUpgradableIntroProfile.mock.funcTryConvertUpgradableIntroProfile != nil {
		mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("FactoryMock.TryConvertUpgradableIntroProfile mock is already set by Set")
	}

	if mmTryConvertUpgradableIntroProfile.defaultExpectation == nil {
		mmTryConvertUpgradableIntroProfile.defaultExpectation = &FactoryMockTryConvertUpgradableIntroProfileExpectation{mock: mmTryConvertUpgradableIntroProfile.mock}
	}
	mmTryConvertUpgradableIntroProfile.defaultExpectation.results = &FactoryMockTryConvertUpgradableIntroProfileResults{s1, b1}
	return mmTryConvertUpgradableIntroProfile.mock
}

//Set uses given function f to mock the Factory.TryConvertUpgradableIntroProfile method
func (mmTryConvertUpgradableIntroProfile *mFactoryMockTryConvertUpgradableIntroProfile) Set(f func(profile StaticProfile) (s1 StaticProfile, b1 bool)) *FactoryMock {
	if mmTryConvertUpgradableIntroProfile.defaultExpectation != nil {
		mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("Default expectation is already set for the Factory.TryConvertUpgradableIntroProfile method")
	}

	if len(mmTryConvertUpgradableIntroProfile.expectations) > 0 {
		mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("Some expectations are already set for the Factory.TryConvertUpgradableIntroProfile method")
	}

	mmTryConvertUpgradableIntroProfile.mock.funcTryConvertUpgradableIntroProfile = f
	return mmTryConvertUpgradableIntroProfile.mock
}

// When sets expectation for the Factory.TryConvertUpgradableIntroProfile which will trigger the result defined by the following
// Then helper
func (mmTryConvertUpgradableIntroProfile *mFactoryMockTryConvertUpgradableIntroProfile) When(profile StaticProfile) *FactoryMockTryConvertUpgradableIntroProfileExpectation {
	if mmTryConvertUpgradableIntroProfile.mock.funcTryConvertUpgradableIntroProfile != nil {
		mmTryConvertUpgradableIntroProfile.mock.t.Fatalf("FactoryMock.TryConvertUpgradableIntroProfile mock is already set by Set")
	}

	expectation := &FactoryMockTryConvertUpgradableIntroProfileExpectation{
		mock:   mmTryConvertUpgradableIntroProfile.mock,
		params: &FactoryMockTryConvertUpgradableIntroProfileParams{profile},
	}
	mmTryConvertUpgradableIntroProfile.expectations = append(mmTryConvertUpgradableIntroProfile.expectations, expectation)
	return expectation
}

// Then sets up Factory.TryConvertUpgradableIntroProfile return parameters for the expectation previously defined by the When method
func (e *FactoryMockTryConvertUpgradableIntroProfileExpectation) Then(s1 StaticProfile, b1 bool) *FactoryMock {
	e.results = &FactoryMockTryConvertUpgradableIntroProfileResults{s1, b1}
	return e.mock
}

// TryConvertUpgradableIntroProfile implements Factory
func (mmTryConvertUpgradableIntroProfile *FactoryMock) TryConvertUpgradableIntroProfile(profile StaticProfile) (s1 StaticProfile, b1 bool) {
	mm_atomic.AddUint64(&mmTryConvertUpgradableIntroProfile.beforeTryConvertUpgradableIntroProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmTryConvertUpgradableIntroProfile.afterTryConvertUpgradableIntroProfileCounter, 1)

	if mmTryConvertUpgradableIntroProfile.inspectFuncTryConvertUpgradableIntroProfile != nil {
		mmTryConvertUpgradableIntroProfile.inspectFuncTryConvertUpgradableIntroProfile(profile)
	}

	params := &FactoryMockTryConvertUpgradableIntroProfileParams{profile}

	// Record call args
	mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.mutex.Lock()
	mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.callArgs = append(mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.callArgs, params)
	mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.mutex.Unlock()

	for _, e := range mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.b1
		}
	}

	if mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.defaultExpectation.Counter, 1)
		want := mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.defaultExpectation.params
		got := FactoryMockTryConvertUpgradableIntroProfileParams{profile}
		if want != nil && !minimock.Equal(*want, got) {
			mmTryConvertUpgradableIntroProfile.t.Errorf("FactoryMock.TryConvertUpgradableIntroProfile got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmTryConvertUpgradableIntroProfile.TryConvertUpgradableIntroProfileMock.defaultExpectation.results
		if results == nil {
			mmTryConvertUpgradableIntroProfile.t.Fatal("No results are set for the FactoryMock.TryConvertUpgradableIntroProfile")
		}
		return (*results).s1, (*results).b1
	}
	if mmTryConvertUpgradableIntroProfile.funcTryConvertUpgradableIntroProfile != nil {
		return mmTryConvertUpgradableIntroProfile.funcTryConvertUpgradableIntroProfile(profile)
	}
	mmTryConvertUpgradableIntroProfile.t.Fatalf("Unexpected call to FactoryMock.TryConvertUpgradableIntroProfile. %v", profile)
	return
}

// TryConvertUpgradableIntroProfileAfterCounter returns a count of finished FactoryMock.TryConvertUpgradableIntroProfile invocations
func (mmTryConvertUpgradableIntroProfile *FactoryMock) TryConvertUpgradableIntroProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTryConvertUpgradableIntroProfile.afterTryConvertUpgradableIntroProfileCounter)
}

// TryConvertUpgradableIntroProfileBeforeCounter returns a count of FactoryMock.TryConvertUpgradableIntroProfile invocations
func (mmTryConvertUpgradableIntroProfile *FactoryMock) TryConvertUpgradableIntroProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTryConvertUpgradableIntroProfile.beforeTryConvertUpgradableIntroProfileCounter)
}

// Calls returns a list of arguments used in each call to FactoryMock.TryConvertUpgradableIntroProfile.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTryConvertUpgradableIntroProfile *mFactoryMockTryConvertUpgradableIntroProfile) Calls() []*FactoryMockTryConvertUpgradableIntroProfileParams {
	mmTryConvertUpgradableIntroProfile.mutex.RLock()

	argCopy := make([]*FactoryMockTryConvertUpgradableIntroProfileParams, len(mmTryConvertUpgradableIntroProfile.callArgs))
	copy(argCopy, mmTryConvertUpgradableIntroProfile.callArgs)

	mmTryConvertUpgradableIntroProfile.mutex.RUnlock()

	return argCopy
}

// MinimockTryConvertUpgradableIntroProfileDone returns true if the count of the TryConvertUpgradableIntroProfile invocations corresponds
// the number of defined expectations
func (m *FactoryMock) MinimockTryConvertUpgradableIntroProfileDone() bool {
	for _, e := range m.TryConvertUpgradableIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TryConvertUpgradableIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTryConvertUpgradableIntroProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTryConvertUpgradableIntroProfile != nil && mm_atomic.LoadUint64(&m.afterTryConvertUpgradableIntroProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockTryConvertUpgradableIntroProfileInspect logs each unmet expectation
func (m *FactoryMock) MinimockTryConvertUpgradableIntroProfileInspect() {
	for _, e := range m.TryConvertUpgradableIntroProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FactoryMock.TryConvertUpgradableIntroProfile with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.TryConvertUpgradableIntroProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterTryConvertUpgradableIntroProfileCounter) < 1 {
		if m.TryConvertUpgradableIntroProfileMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FactoryMock.TryConvertUpgradableIntroProfile")
		} else {
			m.t.Errorf("Expected call to FactoryMock.TryConvertUpgradableIntroProfile with params: %#v", *m.TryConvertUpgradableIntroProfileMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTryConvertUpgradableIntroProfile != nil && mm_atomic.LoadUint64(&m.afterTryConvertUpgradableIntroProfileCounter) < 1 {
		m.t.Error("Expected call to FactoryMock.TryConvertUpgradableIntroProfile")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FactoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateBriefIntroProfileInspect()

		m.MinimockCreateFullIntroProfileInspect()

		m.MinimockCreateUpgradableIntroProfileInspect()

		m.MinimockTryConvertUpgradableIntroProfileInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateBriefIntroProfileDone() &&
		m.MinimockCreateFullIntroProfileDone() &&
		m.MinimockCreateUpgradableIntroProfileDone() &&
		m.MinimockTryConvertUpgradableIntroProfileDone()
}
