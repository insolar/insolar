package transport

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/phases"
	"github.com/insolar/insolar/pulse"
)

// PacketParserMock implements PacketParser
type PacketParserMock struct {
	t minimock.Tester

	funcGetMemberPacket          func() (m1 MemberPacketReader)
	inspectFuncGetMemberPacket   func()
	afterGetMemberPacketCounter  uint64
	beforeGetMemberPacketCounter uint64
	GetMemberPacketMock          mPacketParserMockGetMemberPacket

	funcGetPacketSignature          func() (s1 cryptkit.SignedDigest)
	inspectFuncGetPacketSignature   func()
	afterGetPacketSignatureCounter  uint64
	beforeGetPacketSignatureCounter uint64
	GetPacketSignatureMock          mPacketParserMockGetPacketSignature

	funcGetPacketType          func() (p1 phases.PacketType)
	inspectFuncGetPacketType   func()
	afterGetPacketTypeCounter  uint64
	beforeGetPacketTypeCounter uint64
	GetPacketTypeMock          mPacketParserMockGetPacketType

	funcGetPulseNumber          func() (n1 pulse.Number)
	inspectFuncGetPulseNumber   func()
	afterGetPulseNumberCounter  uint64
	beforeGetPulseNumberCounter uint64
	GetPulseNumberMock          mPacketParserMockGetPulseNumber

	funcGetPulsePacket          func() (p1 PulsePacketReader)
	inspectFuncGetPulsePacket   func()
	afterGetPulsePacketCounter  uint64
	beforeGetPulsePacketCounter uint64
	GetPulsePacketMock          mPacketParserMockGetPulsePacket

	funcGetReceiverID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetReceiverID   func()
	afterGetReceiverIDCounter  uint64
	beforeGetReceiverIDCounter uint64
	GetReceiverIDMock          mPacketParserMockGetReceiverID

	funcGetSourceID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetSourceID   func()
	afterGetSourceIDCounter  uint64
	beforeGetSourceIDCounter uint64
	GetSourceIDMock          mPacketParserMockGetSourceID

	funcGetTargetID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetTargetID   func()
	afterGetTargetIDCounter  uint64
	beforeGetTargetIDCounter uint64
	GetTargetIDMock          mPacketParserMockGetTargetID

	funcIsRelayForbidden          func() (b1 bool)
	inspectFuncIsRelayForbidden   func()
	afterIsRelayForbiddenCounter  uint64
	beforeIsRelayForbiddenCounter uint64
	IsRelayForbiddenMock          mPacketParserMockIsRelayForbidden

	funcParsePacketBody          func() (p1 PacketParser, err error)
	inspectFuncParsePacketBody   func()
	afterParsePacketBodyCounter  uint64
	beforeParsePacketBodyCounter uint64
	ParsePacketBodyMock          mPacketParserMockParsePacketBody
}

// NewPacketParserMock returns a mock for PacketParser
func NewPacketParserMock(t minimock.Tester) *PacketParserMock {
	m := &PacketParserMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMemberPacketMock = mPacketParserMockGetMemberPacket{mock: m}

	m.GetPacketSignatureMock = mPacketParserMockGetPacketSignature{mock: m}

	m.GetPacketTypeMock = mPacketParserMockGetPacketType{mock: m}

	m.GetPulseNumberMock = mPacketParserMockGetPulseNumber{mock: m}

	m.GetPulsePacketMock = mPacketParserMockGetPulsePacket{mock: m}

	m.GetReceiverIDMock = mPacketParserMockGetReceiverID{mock: m}

	m.GetSourceIDMock = mPacketParserMockGetSourceID{mock: m}

	m.GetTargetIDMock = mPacketParserMockGetTargetID{mock: m}

	m.IsRelayForbiddenMock = mPacketParserMockIsRelayForbidden{mock: m}

	m.ParsePacketBodyMock = mPacketParserMockParsePacketBody{mock: m}

	return m
}

type mPacketParserMockGetMemberPacket struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetMemberPacketExpectation
	expectations       []*PacketParserMockGetMemberPacketExpectation
}

// PacketParserMockGetMemberPacketExpectation specifies expectation struct of the PacketParser.GetMemberPacket
type PacketParserMockGetMemberPacketExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetMemberPacketResults
	Counter uint64
}

// PacketParserMockGetMemberPacketResults contains results of the PacketParser.GetMemberPacket
type PacketParserMockGetMemberPacketResults struct {
	m1 MemberPacketReader
}

// Expect sets up expected params for PacketParser.GetMemberPacket
func (mmGetMemberPacket *mPacketParserMockGetMemberPacket) Expect() *mPacketParserMockGetMemberPacket {
	if mmGetMemberPacket.mock.funcGetMemberPacket != nil {
		mmGetMemberPacket.mock.t.Fatalf("PacketParserMock.GetMemberPacket mock is already set by Set")
	}

	if mmGetMemberPacket.defaultExpectation == nil {
		mmGetMemberPacket.defaultExpectation = &PacketParserMockGetMemberPacketExpectation{}
	}

	return mmGetMemberPacket
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetMemberPacket
func (mmGetMemberPacket *mPacketParserMockGetMemberPacket) Inspect(f func()) *mPacketParserMockGetMemberPacket {
	if mmGetMemberPacket.mock.inspectFuncGetMemberPacket != nil {
		mmGetMemberPacket.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetMemberPacket")
	}

	mmGetMemberPacket.mock.inspectFuncGetMemberPacket = f

	return mmGetMemberPacket
}

// Return sets up results that will be returned by PacketParser.GetMemberPacket
func (mmGetMemberPacket *mPacketParserMockGetMemberPacket) Return(m1 MemberPacketReader) *PacketParserMock {
	if mmGetMemberPacket.mock.funcGetMemberPacket != nil {
		mmGetMemberPacket.mock.t.Fatalf("PacketParserMock.GetMemberPacket mock is already set by Set")
	}

	if mmGetMemberPacket.defaultExpectation == nil {
		mmGetMemberPacket.defaultExpectation = &PacketParserMockGetMemberPacketExpectation{mock: mmGetMemberPacket.mock}
	}
	mmGetMemberPacket.defaultExpectation.results = &PacketParserMockGetMemberPacketResults{m1}
	return mmGetMemberPacket.mock
}

//Set uses given function f to mock the PacketParser.GetMemberPacket method
func (mmGetMemberPacket *mPacketParserMockGetMemberPacket) Set(f func() (m1 MemberPacketReader)) *PacketParserMock {
	if mmGetMemberPacket.defaultExpectation != nil {
		mmGetMemberPacket.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetMemberPacket method")
	}

	if len(mmGetMemberPacket.expectations) > 0 {
		mmGetMemberPacket.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetMemberPacket method")
	}

	mmGetMemberPacket.mock.funcGetMemberPacket = f
	return mmGetMemberPacket.mock
}

// GetMemberPacket implements PacketParser
func (mmGetMemberPacket *PacketParserMock) GetMemberPacket() (m1 MemberPacketReader) {
	mm_atomic.AddUint64(&mmGetMemberPacket.beforeGetMemberPacketCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMemberPacket.afterGetMemberPacketCounter, 1)

	if mmGetMemberPacket.inspectFuncGetMemberPacket != nil {
		mmGetMemberPacket.inspectFuncGetMemberPacket()
	}

	if mmGetMemberPacket.GetMemberPacketMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMemberPacket.GetMemberPacketMock.defaultExpectation.Counter, 1)

		results := mmGetMemberPacket.GetMemberPacketMock.defaultExpectation.results
		if results == nil {
			mmGetMemberPacket.t.Fatal("No results are set for the PacketParserMock.GetMemberPacket")
		}
		return (*results).m1
	}
	if mmGetMemberPacket.funcGetMemberPacket != nil {
		return mmGetMemberPacket.funcGetMemberPacket()
	}
	mmGetMemberPacket.t.Fatalf("Unexpected call to PacketParserMock.GetMemberPacket.")
	return
}

// GetMemberPacketAfterCounter returns a count of finished PacketParserMock.GetMemberPacket invocations
func (mmGetMemberPacket *PacketParserMock) GetMemberPacketAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMemberPacket.afterGetMemberPacketCounter)
}

// GetMemberPacketBeforeCounter returns a count of PacketParserMock.GetMemberPacket invocations
func (mmGetMemberPacket *PacketParserMock) GetMemberPacketBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMemberPacket.beforeGetMemberPacketCounter)
}

// MinimockGetMemberPacketDone returns true if the count of the GetMemberPacket invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetMemberPacketDone() bool {
	for _, e := range m.GetMemberPacketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMemberPacketMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMemberPacketCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMemberPacket != nil && mm_atomic.LoadUint64(&m.afterGetMemberPacketCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMemberPacketInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetMemberPacketInspect() {
	for _, e := range m.GetMemberPacketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetMemberPacket")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMemberPacketMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMemberPacketCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetMemberPacket")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMemberPacket != nil && mm_atomic.LoadUint64(&m.afterGetMemberPacketCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetMemberPacket")
	}
}

type mPacketParserMockGetPacketSignature struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetPacketSignatureExpectation
	expectations       []*PacketParserMockGetPacketSignatureExpectation
}

// PacketParserMockGetPacketSignatureExpectation specifies expectation struct of the PacketParser.GetPacketSignature
type PacketParserMockGetPacketSignatureExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetPacketSignatureResults
	Counter uint64
}

// PacketParserMockGetPacketSignatureResults contains results of the PacketParser.GetPacketSignature
type PacketParserMockGetPacketSignatureResults struct {
	s1 cryptkit.SignedDigest
}

// Expect sets up expected params for PacketParser.GetPacketSignature
func (mmGetPacketSignature *mPacketParserMockGetPacketSignature) Expect() *mPacketParserMockGetPacketSignature {
	if mmGetPacketSignature.mock.funcGetPacketSignature != nil {
		mmGetPacketSignature.mock.t.Fatalf("PacketParserMock.GetPacketSignature mock is already set by Set")
	}

	if mmGetPacketSignature.defaultExpectation == nil {
		mmGetPacketSignature.defaultExpectation = &PacketParserMockGetPacketSignatureExpectation{}
	}

	return mmGetPacketSignature
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetPacketSignature
func (mmGetPacketSignature *mPacketParserMockGetPacketSignature) Inspect(f func()) *mPacketParserMockGetPacketSignature {
	if mmGetPacketSignature.mock.inspectFuncGetPacketSignature != nil {
		mmGetPacketSignature.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetPacketSignature")
	}

	mmGetPacketSignature.mock.inspectFuncGetPacketSignature = f

	return mmGetPacketSignature
}

// Return sets up results that will be returned by PacketParser.GetPacketSignature
func (mmGetPacketSignature *mPacketParserMockGetPacketSignature) Return(s1 cryptkit.SignedDigest) *PacketParserMock {
	if mmGetPacketSignature.mock.funcGetPacketSignature != nil {
		mmGetPacketSignature.mock.t.Fatalf("PacketParserMock.GetPacketSignature mock is already set by Set")
	}

	if mmGetPacketSignature.defaultExpectation == nil {
		mmGetPacketSignature.defaultExpectation = &PacketParserMockGetPacketSignatureExpectation{mock: mmGetPacketSignature.mock}
	}
	mmGetPacketSignature.defaultExpectation.results = &PacketParserMockGetPacketSignatureResults{s1}
	return mmGetPacketSignature.mock
}

//Set uses given function f to mock the PacketParser.GetPacketSignature method
func (mmGetPacketSignature *mPacketParserMockGetPacketSignature) Set(f func() (s1 cryptkit.SignedDigest)) *PacketParserMock {
	if mmGetPacketSignature.defaultExpectation != nil {
		mmGetPacketSignature.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetPacketSignature method")
	}

	if len(mmGetPacketSignature.expectations) > 0 {
		mmGetPacketSignature.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetPacketSignature method")
	}

	mmGetPacketSignature.mock.funcGetPacketSignature = f
	return mmGetPacketSignature.mock
}

// GetPacketSignature implements PacketParser
func (mmGetPacketSignature *PacketParserMock) GetPacketSignature() (s1 cryptkit.SignedDigest) {
	mm_atomic.AddUint64(&mmGetPacketSignature.beforeGetPacketSignatureCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPacketSignature.afterGetPacketSignatureCounter, 1)

	if mmGetPacketSignature.inspectFuncGetPacketSignature != nil {
		mmGetPacketSignature.inspectFuncGetPacketSignature()
	}

	if mmGetPacketSignature.GetPacketSignatureMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPacketSignature.GetPacketSignatureMock.defaultExpectation.Counter, 1)

		results := mmGetPacketSignature.GetPacketSignatureMock.defaultExpectation.results
		if results == nil {
			mmGetPacketSignature.t.Fatal("No results are set for the PacketParserMock.GetPacketSignature")
		}
		return (*results).s1
	}
	if mmGetPacketSignature.funcGetPacketSignature != nil {
		return mmGetPacketSignature.funcGetPacketSignature()
	}
	mmGetPacketSignature.t.Fatalf("Unexpected call to PacketParserMock.GetPacketSignature.")
	return
}

// GetPacketSignatureAfterCounter returns a count of finished PacketParserMock.GetPacketSignature invocations
func (mmGetPacketSignature *PacketParserMock) GetPacketSignatureAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPacketSignature.afterGetPacketSignatureCounter)
}

// GetPacketSignatureBeforeCounter returns a count of PacketParserMock.GetPacketSignature invocations
func (mmGetPacketSignature *PacketParserMock) GetPacketSignatureBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPacketSignature.beforeGetPacketSignatureCounter)
}

// MinimockGetPacketSignatureDone returns true if the count of the GetPacketSignature invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetPacketSignatureDone() bool {
	for _, e := range m.GetPacketSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPacketSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPacketSignatureCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPacketSignature != nil && mm_atomic.LoadUint64(&m.afterGetPacketSignatureCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPacketSignatureInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetPacketSignatureInspect() {
	for _, e := range m.GetPacketSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetPacketSignature")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPacketSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPacketSignatureCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPacketSignature")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPacketSignature != nil && mm_atomic.LoadUint64(&m.afterGetPacketSignatureCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPacketSignature")
	}
}

type mPacketParserMockGetPacketType struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetPacketTypeExpectation
	expectations       []*PacketParserMockGetPacketTypeExpectation
}

// PacketParserMockGetPacketTypeExpectation specifies expectation struct of the PacketParser.GetPacketType
type PacketParserMockGetPacketTypeExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetPacketTypeResults
	Counter uint64
}

// PacketParserMockGetPacketTypeResults contains results of the PacketParser.GetPacketType
type PacketParserMockGetPacketTypeResults struct {
	p1 phases.PacketType
}

// Expect sets up expected params for PacketParser.GetPacketType
func (mmGetPacketType *mPacketParserMockGetPacketType) Expect() *mPacketParserMockGetPacketType {
	if mmGetPacketType.mock.funcGetPacketType != nil {
		mmGetPacketType.mock.t.Fatalf("PacketParserMock.GetPacketType mock is already set by Set")
	}

	if mmGetPacketType.defaultExpectation == nil {
		mmGetPacketType.defaultExpectation = &PacketParserMockGetPacketTypeExpectation{}
	}

	return mmGetPacketType
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetPacketType
func (mmGetPacketType *mPacketParserMockGetPacketType) Inspect(f func()) *mPacketParserMockGetPacketType {
	if mmGetPacketType.mock.inspectFuncGetPacketType != nil {
		mmGetPacketType.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetPacketType")
	}

	mmGetPacketType.mock.inspectFuncGetPacketType = f

	return mmGetPacketType
}

// Return sets up results that will be returned by PacketParser.GetPacketType
func (mmGetPacketType *mPacketParserMockGetPacketType) Return(p1 phases.PacketType) *PacketParserMock {
	if mmGetPacketType.mock.funcGetPacketType != nil {
		mmGetPacketType.mock.t.Fatalf("PacketParserMock.GetPacketType mock is already set by Set")
	}

	if mmGetPacketType.defaultExpectation == nil {
		mmGetPacketType.defaultExpectation = &PacketParserMockGetPacketTypeExpectation{mock: mmGetPacketType.mock}
	}
	mmGetPacketType.defaultExpectation.results = &PacketParserMockGetPacketTypeResults{p1}
	return mmGetPacketType.mock
}

//Set uses given function f to mock the PacketParser.GetPacketType method
func (mmGetPacketType *mPacketParserMockGetPacketType) Set(f func() (p1 phases.PacketType)) *PacketParserMock {
	if mmGetPacketType.defaultExpectation != nil {
		mmGetPacketType.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetPacketType method")
	}

	if len(mmGetPacketType.expectations) > 0 {
		mmGetPacketType.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetPacketType method")
	}

	mmGetPacketType.mock.funcGetPacketType = f
	return mmGetPacketType.mock
}

// GetPacketType implements PacketParser
func (mmGetPacketType *PacketParserMock) GetPacketType() (p1 phases.PacketType) {
	mm_atomic.AddUint64(&mmGetPacketType.beforeGetPacketTypeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPacketType.afterGetPacketTypeCounter, 1)

	if mmGetPacketType.inspectFuncGetPacketType != nil {
		mmGetPacketType.inspectFuncGetPacketType()
	}

	if mmGetPacketType.GetPacketTypeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPacketType.GetPacketTypeMock.defaultExpectation.Counter, 1)

		results := mmGetPacketType.GetPacketTypeMock.defaultExpectation.results
		if results == nil {
			mmGetPacketType.t.Fatal("No results are set for the PacketParserMock.GetPacketType")
		}
		return (*results).p1
	}
	if mmGetPacketType.funcGetPacketType != nil {
		return mmGetPacketType.funcGetPacketType()
	}
	mmGetPacketType.t.Fatalf("Unexpected call to PacketParserMock.GetPacketType.")
	return
}

// GetPacketTypeAfterCounter returns a count of finished PacketParserMock.GetPacketType invocations
func (mmGetPacketType *PacketParserMock) GetPacketTypeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPacketType.afterGetPacketTypeCounter)
}

// GetPacketTypeBeforeCounter returns a count of PacketParserMock.GetPacketType invocations
func (mmGetPacketType *PacketParserMock) GetPacketTypeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPacketType.beforeGetPacketTypeCounter)
}

// MinimockGetPacketTypeDone returns true if the count of the GetPacketType invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetPacketTypeDone() bool {
	for _, e := range m.GetPacketTypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPacketTypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPacketTypeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPacketType != nil && mm_atomic.LoadUint64(&m.afterGetPacketTypeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPacketTypeInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetPacketTypeInspect() {
	for _, e := range m.GetPacketTypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetPacketType")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPacketTypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPacketTypeCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPacketType")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPacketType != nil && mm_atomic.LoadUint64(&m.afterGetPacketTypeCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPacketType")
	}
}

type mPacketParserMockGetPulseNumber struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetPulseNumberExpectation
	expectations       []*PacketParserMockGetPulseNumberExpectation
}

// PacketParserMockGetPulseNumberExpectation specifies expectation struct of the PacketParser.GetPulseNumber
type PacketParserMockGetPulseNumberExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetPulseNumberResults
	Counter uint64
}

// PacketParserMockGetPulseNumberResults contains results of the PacketParser.GetPulseNumber
type PacketParserMockGetPulseNumberResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for PacketParser.GetPulseNumber
func (mmGetPulseNumber *mPacketParserMockGetPulseNumber) Expect() *mPacketParserMockGetPulseNumber {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("PacketParserMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &PacketParserMockGetPulseNumberExpectation{}
	}

	return mmGetPulseNumber
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetPulseNumber
func (mmGetPulseNumber *mPacketParserMockGetPulseNumber) Inspect(f func()) *mPacketParserMockGetPulseNumber {
	if mmGetPulseNumber.mock.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetPulseNumber")
	}

	mmGetPulseNumber.mock.inspectFuncGetPulseNumber = f

	return mmGetPulseNumber
}

// Return sets up results that will be returned by PacketParser.GetPulseNumber
func (mmGetPulseNumber *mPacketParserMockGetPulseNumber) Return(n1 pulse.Number) *PacketParserMock {
	if mmGetPulseNumber.mock.funcGetPulseNumber != nil {
		mmGetPulseNumber.mock.t.Fatalf("PacketParserMock.GetPulseNumber mock is already set by Set")
	}

	if mmGetPulseNumber.defaultExpectation == nil {
		mmGetPulseNumber.defaultExpectation = &PacketParserMockGetPulseNumberExpectation{mock: mmGetPulseNumber.mock}
	}
	mmGetPulseNumber.defaultExpectation.results = &PacketParserMockGetPulseNumberResults{n1}
	return mmGetPulseNumber.mock
}

//Set uses given function f to mock the PacketParser.GetPulseNumber method
func (mmGetPulseNumber *mPacketParserMockGetPulseNumber) Set(f func() (n1 pulse.Number)) *PacketParserMock {
	if mmGetPulseNumber.defaultExpectation != nil {
		mmGetPulseNumber.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetPulseNumber method")
	}

	if len(mmGetPulseNumber.expectations) > 0 {
		mmGetPulseNumber.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetPulseNumber method")
	}

	mmGetPulseNumber.mock.funcGetPulseNumber = f
	return mmGetPulseNumber.mock
}

// GetPulseNumber implements PacketParser
func (mmGetPulseNumber *PacketParserMock) GetPulseNumber() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPulseNumber.afterGetPulseNumberCounter, 1)

	if mmGetPulseNumber.inspectFuncGetPulseNumber != nil {
		mmGetPulseNumber.inspectFuncGetPulseNumber()
	}

	if mmGetPulseNumber.GetPulseNumberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.Counter, 1)

		results := mmGetPulseNumber.GetPulseNumberMock.defaultExpectation.results
		if results == nil {
			mmGetPulseNumber.t.Fatal("No results are set for the PacketParserMock.GetPulseNumber")
		}
		return (*results).n1
	}
	if mmGetPulseNumber.funcGetPulseNumber != nil {
		return mmGetPulseNumber.funcGetPulseNumber()
	}
	mmGetPulseNumber.t.Fatalf("Unexpected call to PacketParserMock.GetPulseNumber.")
	return
}

// GetPulseNumberAfterCounter returns a count of finished PacketParserMock.GetPulseNumber invocations
func (mmGetPulseNumber *PacketParserMock) GetPulseNumberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.afterGetPulseNumberCounter)
}

// GetPulseNumberBeforeCounter returns a count of PacketParserMock.GetPulseNumber invocations
func (mmGetPulseNumber *PacketParserMock) GetPulseNumberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulseNumber.beforeGetPulseNumberCounter)
}

// MinimockGetPulseNumberDone returns true if the count of the GetPulseNumber invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetPulseNumberDone() bool {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPulseNumberInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetPulseNumberInspect() {
	for _, e := range m.GetPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetPulseNumber")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPulseNumber")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulseNumber != nil && mm_atomic.LoadUint64(&m.afterGetPulseNumberCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPulseNumber")
	}
}

type mPacketParserMockGetPulsePacket struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetPulsePacketExpectation
	expectations       []*PacketParserMockGetPulsePacketExpectation
}

// PacketParserMockGetPulsePacketExpectation specifies expectation struct of the PacketParser.GetPulsePacket
type PacketParserMockGetPulsePacketExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetPulsePacketResults
	Counter uint64
}

// PacketParserMockGetPulsePacketResults contains results of the PacketParser.GetPulsePacket
type PacketParserMockGetPulsePacketResults struct {
	p1 PulsePacketReader
}

// Expect sets up expected params for PacketParser.GetPulsePacket
func (mmGetPulsePacket *mPacketParserMockGetPulsePacket) Expect() *mPacketParserMockGetPulsePacket {
	if mmGetPulsePacket.mock.funcGetPulsePacket != nil {
		mmGetPulsePacket.mock.t.Fatalf("PacketParserMock.GetPulsePacket mock is already set by Set")
	}

	if mmGetPulsePacket.defaultExpectation == nil {
		mmGetPulsePacket.defaultExpectation = &PacketParserMockGetPulsePacketExpectation{}
	}

	return mmGetPulsePacket
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetPulsePacket
func (mmGetPulsePacket *mPacketParserMockGetPulsePacket) Inspect(f func()) *mPacketParserMockGetPulsePacket {
	if mmGetPulsePacket.mock.inspectFuncGetPulsePacket != nil {
		mmGetPulsePacket.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetPulsePacket")
	}

	mmGetPulsePacket.mock.inspectFuncGetPulsePacket = f

	return mmGetPulsePacket
}

// Return sets up results that will be returned by PacketParser.GetPulsePacket
func (mmGetPulsePacket *mPacketParserMockGetPulsePacket) Return(p1 PulsePacketReader) *PacketParserMock {
	if mmGetPulsePacket.mock.funcGetPulsePacket != nil {
		mmGetPulsePacket.mock.t.Fatalf("PacketParserMock.GetPulsePacket mock is already set by Set")
	}

	if mmGetPulsePacket.defaultExpectation == nil {
		mmGetPulsePacket.defaultExpectation = &PacketParserMockGetPulsePacketExpectation{mock: mmGetPulsePacket.mock}
	}
	mmGetPulsePacket.defaultExpectation.results = &PacketParserMockGetPulsePacketResults{p1}
	return mmGetPulsePacket.mock
}

//Set uses given function f to mock the PacketParser.GetPulsePacket method
func (mmGetPulsePacket *mPacketParserMockGetPulsePacket) Set(f func() (p1 PulsePacketReader)) *PacketParserMock {
	if mmGetPulsePacket.defaultExpectation != nil {
		mmGetPulsePacket.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetPulsePacket method")
	}

	if len(mmGetPulsePacket.expectations) > 0 {
		mmGetPulsePacket.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetPulsePacket method")
	}

	mmGetPulsePacket.mock.funcGetPulsePacket = f
	return mmGetPulsePacket.mock
}

// GetPulsePacket implements PacketParser
func (mmGetPulsePacket *PacketParserMock) GetPulsePacket() (p1 PulsePacketReader) {
	mm_atomic.AddUint64(&mmGetPulsePacket.beforeGetPulsePacketCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPulsePacket.afterGetPulsePacketCounter, 1)

	if mmGetPulsePacket.inspectFuncGetPulsePacket != nil {
		mmGetPulsePacket.inspectFuncGetPulsePacket()
	}

	if mmGetPulsePacket.GetPulsePacketMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPulsePacket.GetPulsePacketMock.defaultExpectation.Counter, 1)

		results := mmGetPulsePacket.GetPulsePacketMock.defaultExpectation.results
		if results == nil {
			mmGetPulsePacket.t.Fatal("No results are set for the PacketParserMock.GetPulsePacket")
		}
		return (*results).p1
	}
	if mmGetPulsePacket.funcGetPulsePacket != nil {
		return mmGetPulsePacket.funcGetPulsePacket()
	}
	mmGetPulsePacket.t.Fatalf("Unexpected call to PacketParserMock.GetPulsePacket.")
	return
}

// GetPulsePacketAfterCounter returns a count of finished PacketParserMock.GetPulsePacket invocations
func (mmGetPulsePacket *PacketParserMock) GetPulsePacketAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulsePacket.afterGetPulsePacketCounter)
}

// GetPulsePacketBeforeCounter returns a count of PacketParserMock.GetPulsePacket invocations
func (mmGetPulsePacket *PacketParserMock) GetPulsePacketBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPulsePacket.beforeGetPulsePacketCounter)
}

// MinimockGetPulsePacketDone returns true if the count of the GetPulsePacket invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetPulsePacketDone() bool {
	for _, e := range m.GetPulsePacketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulsePacketMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulsePacketCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulsePacket != nil && mm_atomic.LoadUint64(&m.afterGetPulsePacketCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPulsePacketInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetPulsePacketInspect() {
	for _, e := range m.GetPulsePacketMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetPulsePacket")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPulsePacketMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPulsePacketCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPulsePacket")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPulsePacket != nil && mm_atomic.LoadUint64(&m.afterGetPulsePacketCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetPulsePacket")
	}
}

type mPacketParserMockGetReceiverID struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetReceiverIDExpectation
	expectations       []*PacketParserMockGetReceiverIDExpectation
}

// PacketParserMockGetReceiverIDExpectation specifies expectation struct of the PacketParser.GetReceiverID
type PacketParserMockGetReceiverIDExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetReceiverIDResults
	Counter uint64
}

// PacketParserMockGetReceiverIDResults contains results of the PacketParser.GetReceiverID
type PacketParserMockGetReceiverIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for PacketParser.GetReceiverID
func (mmGetReceiverID *mPacketParserMockGetReceiverID) Expect() *mPacketParserMockGetReceiverID {
	if mmGetReceiverID.mock.funcGetReceiverID != nil {
		mmGetReceiverID.mock.t.Fatalf("PacketParserMock.GetReceiverID mock is already set by Set")
	}

	if mmGetReceiverID.defaultExpectation == nil {
		mmGetReceiverID.defaultExpectation = &PacketParserMockGetReceiverIDExpectation{}
	}

	return mmGetReceiverID
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetReceiverID
func (mmGetReceiverID *mPacketParserMockGetReceiverID) Inspect(f func()) *mPacketParserMockGetReceiverID {
	if mmGetReceiverID.mock.inspectFuncGetReceiverID != nil {
		mmGetReceiverID.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetReceiverID")
	}

	mmGetReceiverID.mock.inspectFuncGetReceiverID = f

	return mmGetReceiverID
}

// Return sets up results that will be returned by PacketParser.GetReceiverID
func (mmGetReceiverID *mPacketParserMockGetReceiverID) Return(s1 insolar.ShortNodeID) *PacketParserMock {
	if mmGetReceiverID.mock.funcGetReceiverID != nil {
		mmGetReceiverID.mock.t.Fatalf("PacketParserMock.GetReceiverID mock is already set by Set")
	}

	if mmGetReceiverID.defaultExpectation == nil {
		mmGetReceiverID.defaultExpectation = &PacketParserMockGetReceiverIDExpectation{mock: mmGetReceiverID.mock}
	}
	mmGetReceiverID.defaultExpectation.results = &PacketParserMockGetReceiverIDResults{s1}
	return mmGetReceiverID.mock
}

//Set uses given function f to mock the PacketParser.GetReceiverID method
func (mmGetReceiverID *mPacketParserMockGetReceiverID) Set(f func() (s1 insolar.ShortNodeID)) *PacketParserMock {
	if mmGetReceiverID.defaultExpectation != nil {
		mmGetReceiverID.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetReceiverID method")
	}

	if len(mmGetReceiverID.expectations) > 0 {
		mmGetReceiverID.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetReceiverID method")
	}

	mmGetReceiverID.mock.funcGetReceiverID = f
	return mmGetReceiverID.mock
}

// GetReceiverID implements PacketParser
func (mmGetReceiverID *PacketParserMock) GetReceiverID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetReceiverID.beforeGetReceiverIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReceiverID.afterGetReceiverIDCounter, 1)

	if mmGetReceiverID.inspectFuncGetReceiverID != nil {
		mmGetReceiverID.inspectFuncGetReceiverID()
	}

	if mmGetReceiverID.GetReceiverIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReceiverID.GetReceiverIDMock.defaultExpectation.Counter, 1)

		results := mmGetReceiverID.GetReceiverIDMock.defaultExpectation.results
		if results == nil {
			mmGetReceiverID.t.Fatal("No results are set for the PacketParserMock.GetReceiverID")
		}
		return (*results).s1
	}
	if mmGetReceiverID.funcGetReceiverID != nil {
		return mmGetReceiverID.funcGetReceiverID()
	}
	mmGetReceiverID.t.Fatalf("Unexpected call to PacketParserMock.GetReceiverID.")
	return
}

// GetReceiverIDAfterCounter returns a count of finished PacketParserMock.GetReceiverID invocations
func (mmGetReceiverID *PacketParserMock) GetReceiverIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReceiverID.afterGetReceiverIDCounter)
}

// GetReceiverIDBeforeCounter returns a count of PacketParserMock.GetReceiverID invocations
func (mmGetReceiverID *PacketParserMock) GetReceiverIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReceiverID.beforeGetReceiverIDCounter)
}

// MinimockGetReceiverIDDone returns true if the count of the GetReceiverID invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetReceiverIDDone() bool {
	for _, e := range m.GetReceiverIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReceiverIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReceiverIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReceiverID != nil && mm_atomic.LoadUint64(&m.afterGetReceiverIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReceiverIDInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetReceiverIDInspect() {
	for _, e := range m.GetReceiverIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetReceiverID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReceiverIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReceiverIDCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetReceiverID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReceiverID != nil && mm_atomic.LoadUint64(&m.afterGetReceiverIDCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetReceiverID")
	}
}

type mPacketParserMockGetSourceID struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetSourceIDExpectation
	expectations       []*PacketParserMockGetSourceIDExpectation
}

// PacketParserMockGetSourceIDExpectation specifies expectation struct of the PacketParser.GetSourceID
type PacketParserMockGetSourceIDExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetSourceIDResults
	Counter uint64
}

// PacketParserMockGetSourceIDResults contains results of the PacketParser.GetSourceID
type PacketParserMockGetSourceIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for PacketParser.GetSourceID
func (mmGetSourceID *mPacketParserMockGetSourceID) Expect() *mPacketParserMockGetSourceID {
	if mmGetSourceID.mock.funcGetSourceID != nil {
		mmGetSourceID.mock.t.Fatalf("PacketParserMock.GetSourceID mock is already set by Set")
	}

	if mmGetSourceID.defaultExpectation == nil {
		mmGetSourceID.defaultExpectation = &PacketParserMockGetSourceIDExpectation{}
	}

	return mmGetSourceID
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetSourceID
func (mmGetSourceID *mPacketParserMockGetSourceID) Inspect(f func()) *mPacketParserMockGetSourceID {
	if mmGetSourceID.mock.inspectFuncGetSourceID != nil {
		mmGetSourceID.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetSourceID")
	}

	mmGetSourceID.mock.inspectFuncGetSourceID = f

	return mmGetSourceID
}

// Return sets up results that will be returned by PacketParser.GetSourceID
func (mmGetSourceID *mPacketParserMockGetSourceID) Return(s1 insolar.ShortNodeID) *PacketParserMock {
	if mmGetSourceID.mock.funcGetSourceID != nil {
		mmGetSourceID.mock.t.Fatalf("PacketParserMock.GetSourceID mock is already set by Set")
	}

	if mmGetSourceID.defaultExpectation == nil {
		mmGetSourceID.defaultExpectation = &PacketParserMockGetSourceIDExpectation{mock: mmGetSourceID.mock}
	}
	mmGetSourceID.defaultExpectation.results = &PacketParserMockGetSourceIDResults{s1}
	return mmGetSourceID.mock
}

//Set uses given function f to mock the PacketParser.GetSourceID method
func (mmGetSourceID *mPacketParserMockGetSourceID) Set(f func() (s1 insolar.ShortNodeID)) *PacketParserMock {
	if mmGetSourceID.defaultExpectation != nil {
		mmGetSourceID.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetSourceID method")
	}

	if len(mmGetSourceID.expectations) > 0 {
		mmGetSourceID.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetSourceID method")
	}

	mmGetSourceID.mock.funcGetSourceID = f
	return mmGetSourceID.mock
}

// GetSourceID implements PacketParser
func (mmGetSourceID *PacketParserMock) GetSourceID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetSourceID.beforeGetSourceIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSourceID.afterGetSourceIDCounter, 1)

	if mmGetSourceID.inspectFuncGetSourceID != nil {
		mmGetSourceID.inspectFuncGetSourceID()
	}

	if mmGetSourceID.GetSourceIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSourceID.GetSourceIDMock.defaultExpectation.Counter, 1)

		results := mmGetSourceID.GetSourceIDMock.defaultExpectation.results
		if results == nil {
			mmGetSourceID.t.Fatal("No results are set for the PacketParserMock.GetSourceID")
		}
		return (*results).s1
	}
	if mmGetSourceID.funcGetSourceID != nil {
		return mmGetSourceID.funcGetSourceID()
	}
	mmGetSourceID.t.Fatalf("Unexpected call to PacketParserMock.GetSourceID.")
	return
}

// GetSourceIDAfterCounter returns a count of finished PacketParserMock.GetSourceID invocations
func (mmGetSourceID *PacketParserMock) GetSourceIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSourceID.afterGetSourceIDCounter)
}

// GetSourceIDBeforeCounter returns a count of PacketParserMock.GetSourceID invocations
func (mmGetSourceID *PacketParserMock) GetSourceIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSourceID.beforeGetSourceIDCounter)
}

// MinimockGetSourceIDDone returns true if the count of the GetSourceID invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetSourceIDDone() bool {
	for _, e := range m.GetSourceIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSourceIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSourceIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSourceID != nil && mm_atomic.LoadUint64(&m.afterGetSourceIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSourceIDInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetSourceIDInspect() {
	for _, e := range m.GetSourceIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetSourceID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSourceIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSourceIDCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetSourceID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSourceID != nil && mm_atomic.LoadUint64(&m.afterGetSourceIDCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetSourceID")
	}
}

type mPacketParserMockGetTargetID struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockGetTargetIDExpectation
	expectations       []*PacketParserMockGetTargetIDExpectation
}

// PacketParserMockGetTargetIDExpectation specifies expectation struct of the PacketParser.GetTargetID
type PacketParserMockGetTargetIDExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockGetTargetIDResults
	Counter uint64
}

// PacketParserMockGetTargetIDResults contains results of the PacketParser.GetTargetID
type PacketParserMockGetTargetIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for PacketParser.GetTargetID
func (mmGetTargetID *mPacketParserMockGetTargetID) Expect() *mPacketParserMockGetTargetID {
	if mmGetTargetID.mock.funcGetTargetID != nil {
		mmGetTargetID.mock.t.Fatalf("PacketParserMock.GetTargetID mock is already set by Set")
	}

	if mmGetTargetID.defaultExpectation == nil {
		mmGetTargetID.defaultExpectation = &PacketParserMockGetTargetIDExpectation{}
	}

	return mmGetTargetID
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.GetTargetID
func (mmGetTargetID *mPacketParserMockGetTargetID) Inspect(f func()) *mPacketParserMockGetTargetID {
	if mmGetTargetID.mock.inspectFuncGetTargetID != nil {
		mmGetTargetID.mock.t.Fatalf("Inspect function is already set for PacketParserMock.GetTargetID")
	}

	mmGetTargetID.mock.inspectFuncGetTargetID = f

	return mmGetTargetID
}

// Return sets up results that will be returned by PacketParser.GetTargetID
func (mmGetTargetID *mPacketParserMockGetTargetID) Return(s1 insolar.ShortNodeID) *PacketParserMock {
	if mmGetTargetID.mock.funcGetTargetID != nil {
		mmGetTargetID.mock.t.Fatalf("PacketParserMock.GetTargetID mock is already set by Set")
	}

	if mmGetTargetID.defaultExpectation == nil {
		mmGetTargetID.defaultExpectation = &PacketParserMockGetTargetIDExpectation{mock: mmGetTargetID.mock}
	}
	mmGetTargetID.defaultExpectation.results = &PacketParserMockGetTargetIDResults{s1}
	return mmGetTargetID.mock
}

//Set uses given function f to mock the PacketParser.GetTargetID method
func (mmGetTargetID *mPacketParserMockGetTargetID) Set(f func() (s1 insolar.ShortNodeID)) *PacketParserMock {
	if mmGetTargetID.defaultExpectation != nil {
		mmGetTargetID.mock.t.Fatalf("Default expectation is already set for the PacketParser.GetTargetID method")
	}

	if len(mmGetTargetID.expectations) > 0 {
		mmGetTargetID.mock.t.Fatalf("Some expectations are already set for the PacketParser.GetTargetID method")
	}

	mmGetTargetID.mock.funcGetTargetID = f
	return mmGetTargetID.mock
}

// GetTargetID implements PacketParser
func (mmGetTargetID *PacketParserMock) GetTargetID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetTargetID.beforeGetTargetIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetTargetID.afterGetTargetIDCounter, 1)

	if mmGetTargetID.inspectFuncGetTargetID != nil {
		mmGetTargetID.inspectFuncGetTargetID()
	}

	if mmGetTargetID.GetTargetIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetTargetID.GetTargetIDMock.defaultExpectation.Counter, 1)

		results := mmGetTargetID.GetTargetIDMock.defaultExpectation.results
		if results == nil {
			mmGetTargetID.t.Fatal("No results are set for the PacketParserMock.GetTargetID")
		}
		return (*results).s1
	}
	if mmGetTargetID.funcGetTargetID != nil {
		return mmGetTargetID.funcGetTargetID()
	}
	mmGetTargetID.t.Fatalf("Unexpected call to PacketParserMock.GetTargetID.")
	return
}

// GetTargetIDAfterCounter returns a count of finished PacketParserMock.GetTargetID invocations
func (mmGetTargetID *PacketParserMock) GetTargetIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTargetID.afterGetTargetIDCounter)
}

// GetTargetIDBeforeCounter returns a count of PacketParserMock.GetTargetID invocations
func (mmGetTargetID *PacketParserMock) GetTargetIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetTargetID.beforeGetTargetIDCounter)
}

// MinimockGetTargetIDDone returns true if the count of the GetTargetID invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockGetTargetIDDone() bool {
	for _, e := range m.GetTargetIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTargetIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTargetIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTargetID != nil && mm_atomic.LoadUint64(&m.afterGetTargetIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetTargetIDInspect logs each unmet expectation
func (m *PacketParserMock) MinimockGetTargetIDInspect() {
	for _, e := range m.GetTargetIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.GetTargetID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetTargetIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetTargetIDCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetTargetID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetTargetID != nil && mm_atomic.LoadUint64(&m.afterGetTargetIDCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.GetTargetID")
	}
}

type mPacketParserMockIsRelayForbidden struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockIsRelayForbiddenExpectation
	expectations       []*PacketParserMockIsRelayForbiddenExpectation
}

// PacketParserMockIsRelayForbiddenExpectation specifies expectation struct of the PacketParser.IsRelayForbidden
type PacketParserMockIsRelayForbiddenExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockIsRelayForbiddenResults
	Counter uint64
}

// PacketParserMockIsRelayForbiddenResults contains results of the PacketParser.IsRelayForbidden
type PacketParserMockIsRelayForbiddenResults struct {
	b1 bool
}

// Expect sets up expected params for PacketParser.IsRelayForbidden
func (mmIsRelayForbidden *mPacketParserMockIsRelayForbidden) Expect() *mPacketParserMockIsRelayForbidden {
	if mmIsRelayForbidden.mock.funcIsRelayForbidden != nil {
		mmIsRelayForbidden.mock.t.Fatalf("PacketParserMock.IsRelayForbidden mock is already set by Set")
	}

	if mmIsRelayForbidden.defaultExpectation == nil {
		mmIsRelayForbidden.defaultExpectation = &PacketParserMockIsRelayForbiddenExpectation{}
	}

	return mmIsRelayForbidden
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.IsRelayForbidden
func (mmIsRelayForbidden *mPacketParserMockIsRelayForbidden) Inspect(f func()) *mPacketParserMockIsRelayForbidden {
	if mmIsRelayForbidden.mock.inspectFuncIsRelayForbidden != nil {
		mmIsRelayForbidden.mock.t.Fatalf("Inspect function is already set for PacketParserMock.IsRelayForbidden")
	}

	mmIsRelayForbidden.mock.inspectFuncIsRelayForbidden = f

	return mmIsRelayForbidden
}

// Return sets up results that will be returned by PacketParser.IsRelayForbidden
func (mmIsRelayForbidden *mPacketParserMockIsRelayForbidden) Return(b1 bool) *PacketParserMock {
	if mmIsRelayForbidden.mock.funcIsRelayForbidden != nil {
		mmIsRelayForbidden.mock.t.Fatalf("PacketParserMock.IsRelayForbidden mock is already set by Set")
	}

	if mmIsRelayForbidden.defaultExpectation == nil {
		mmIsRelayForbidden.defaultExpectation = &PacketParserMockIsRelayForbiddenExpectation{mock: mmIsRelayForbidden.mock}
	}
	mmIsRelayForbidden.defaultExpectation.results = &PacketParserMockIsRelayForbiddenResults{b1}
	return mmIsRelayForbidden.mock
}

//Set uses given function f to mock the PacketParser.IsRelayForbidden method
func (mmIsRelayForbidden *mPacketParserMockIsRelayForbidden) Set(f func() (b1 bool)) *PacketParserMock {
	if mmIsRelayForbidden.defaultExpectation != nil {
		mmIsRelayForbidden.mock.t.Fatalf("Default expectation is already set for the PacketParser.IsRelayForbidden method")
	}

	if len(mmIsRelayForbidden.expectations) > 0 {
		mmIsRelayForbidden.mock.t.Fatalf("Some expectations are already set for the PacketParser.IsRelayForbidden method")
	}

	mmIsRelayForbidden.mock.funcIsRelayForbidden = f
	return mmIsRelayForbidden.mock
}

// IsRelayForbidden implements PacketParser
func (mmIsRelayForbidden *PacketParserMock) IsRelayForbidden() (b1 bool) {
	mm_atomic.AddUint64(&mmIsRelayForbidden.beforeIsRelayForbiddenCounter, 1)
	defer mm_atomic.AddUint64(&mmIsRelayForbidden.afterIsRelayForbiddenCounter, 1)

	if mmIsRelayForbidden.inspectFuncIsRelayForbidden != nil {
		mmIsRelayForbidden.inspectFuncIsRelayForbidden()
	}

	if mmIsRelayForbidden.IsRelayForbiddenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsRelayForbidden.IsRelayForbiddenMock.defaultExpectation.Counter, 1)

		results := mmIsRelayForbidden.IsRelayForbiddenMock.defaultExpectation.results
		if results == nil {
			mmIsRelayForbidden.t.Fatal("No results are set for the PacketParserMock.IsRelayForbidden")
		}
		return (*results).b1
	}
	if mmIsRelayForbidden.funcIsRelayForbidden != nil {
		return mmIsRelayForbidden.funcIsRelayForbidden()
	}
	mmIsRelayForbidden.t.Fatalf("Unexpected call to PacketParserMock.IsRelayForbidden.")
	return
}

// IsRelayForbiddenAfterCounter returns a count of finished PacketParserMock.IsRelayForbidden invocations
func (mmIsRelayForbidden *PacketParserMock) IsRelayForbiddenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsRelayForbidden.afterIsRelayForbiddenCounter)
}

// IsRelayForbiddenBeforeCounter returns a count of PacketParserMock.IsRelayForbidden invocations
func (mmIsRelayForbidden *PacketParserMock) IsRelayForbiddenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsRelayForbidden.beforeIsRelayForbiddenCounter)
}

// MinimockIsRelayForbiddenDone returns true if the count of the IsRelayForbidden invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockIsRelayForbiddenDone() bool {
	for _, e := range m.IsRelayForbiddenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsRelayForbiddenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsRelayForbiddenCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsRelayForbidden != nil && mm_atomic.LoadUint64(&m.afterIsRelayForbiddenCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsRelayForbiddenInspect logs each unmet expectation
func (m *PacketParserMock) MinimockIsRelayForbiddenInspect() {
	for _, e := range m.IsRelayForbiddenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.IsRelayForbidden")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsRelayForbiddenMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsRelayForbiddenCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.IsRelayForbidden")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsRelayForbidden != nil && mm_atomic.LoadUint64(&m.afterIsRelayForbiddenCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.IsRelayForbidden")
	}
}

type mPacketParserMockParsePacketBody struct {
	mock               *PacketParserMock
	defaultExpectation *PacketParserMockParsePacketBodyExpectation
	expectations       []*PacketParserMockParsePacketBodyExpectation
}

// PacketParserMockParsePacketBodyExpectation specifies expectation struct of the PacketParser.ParsePacketBody
type PacketParserMockParsePacketBodyExpectation struct {
	mock *PacketParserMock

	results *PacketParserMockParsePacketBodyResults
	Counter uint64
}

// PacketParserMockParsePacketBodyResults contains results of the PacketParser.ParsePacketBody
type PacketParserMockParsePacketBodyResults struct {
	p1  PacketParser
	err error
}

// Expect sets up expected params for PacketParser.ParsePacketBody
func (mmParsePacketBody *mPacketParserMockParsePacketBody) Expect() *mPacketParserMockParsePacketBody {
	if mmParsePacketBody.mock.funcParsePacketBody != nil {
		mmParsePacketBody.mock.t.Fatalf("PacketParserMock.ParsePacketBody mock is already set by Set")
	}

	if mmParsePacketBody.defaultExpectation == nil {
		mmParsePacketBody.defaultExpectation = &PacketParserMockParsePacketBodyExpectation{}
	}

	return mmParsePacketBody
}

// Inspect accepts an inspector function that has same arguments as the PacketParser.ParsePacketBody
func (mmParsePacketBody *mPacketParserMockParsePacketBody) Inspect(f func()) *mPacketParserMockParsePacketBody {
	if mmParsePacketBody.mock.inspectFuncParsePacketBody != nil {
		mmParsePacketBody.mock.t.Fatalf("Inspect function is already set for PacketParserMock.ParsePacketBody")
	}

	mmParsePacketBody.mock.inspectFuncParsePacketBody = f

	return mmParsePacketBody
}

// Return sets up results that will be returned by PacketParser.ParsePacketBody
func (mmParsePacketBody *mPacketParserMockParsePacketBody) Return(p1 PacketParser, err error) *PacketParserMock {
	if mmParsePacketBody.mock.funcParsePacketBody != nil {
		mmParsePacketBody.mock.t.Fatalf("PacketParserMock.ParsePacketBody mock is already set by Set")
	}

	if mmParsePacketBody.defaultExpectation == nil {
		mmParsePacketBody.defaultExpectation = &PacketParserMockParsePacketBodyExpectation{mock: mmParsePacketBody.mock}
	}
	mmParsePacketBody.defaultExpectation.results = &PacketParserMockParsePacketBodyResults{p1, err}
	return mmParsePacketBody.mock
}

//Set uses given function f to mock the PacketParser.ParsePacketBody method
func (mmParsePacketBody *mPacketParserMockParsePacketBody) Set(f func() (p1 PacketParser, err error)) *PacketParserMock {
	if mmParsePacketBody.defaultExpectation != nil {
		mmParsePacketBody.mock.t.Fatalf("Default expectation is already set for the PacketParser.ParsePacketBody method")
	}

	if len(mmParsePacketBody.expectations) > 0 {
		mmParsePacketBody.mock.t.Fatalf("Some expectations are already set for the PacketParser.ParsePacketBody method")
	}

	mmParsePacketBody.mock.funcParsePacketBody = f
	return mmParsePacketBody.mock
}

// ParsePacketBody implements PacketParser
func (mmParsePacketBody *PacketParserMock) ParsePacketBody() (p1 PacketParser, err error) {
	mm_atomic.AddUint64(&mmParsePacketBody.beforeParsePacketBodyCounter, 1)
	defer mm_atomic.AddUint64(&mmParsePacketBody.afterParsePacketBodyCounter, 1)

	if mmParsePacketBody.inspectFuncParsePacketBody != nil {
		mmParsePacketBody.inspectFuncParsePacketBody()
	}

	if mmParsePacketBody.ParsePacketBodyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmParsePacketBody.ParsePacketBodyMock.defaultExpectation.Counter, 1)

		results := mmParsePacketBody.ParsePacketBodyMock.defaultExpectation.results
		if results == nil {
			mmParsePacketBody.t.Fatal("No results are set for the PacketParserMock.ParsePacketBody")
		}
		return (*results).p1, (*results).err
	}
	if mmParsePacketBody.funcParsePacketBody != nil {
		return mmParsePacketBody.funcParsePacketBody()
	}
	mmParsePacketBody.t.Fatalf("Unexpected call to PacketParserMock.ParsePacketBody.")
	return
}

// ParsePacketBodyAfterCounter returns a count of finished PacketParserMock.ParsePacketBody invocations
func (mmParsePacketBody *PacketParserMock) ParsePacketBodyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParsePacketBody.afterParsePacketBodyCounter)
}

// ParsePacketBodyBeforeCounter returns a count of PacketParserMock.ParsePacketBody invocations
func (mmParsePacketBody *PacketParserMock) ParsePacketBodyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParsePacketBody.beforeParsePacketBodyCounter)
}

// MinimockParsePacketBodyDone returns true if the count of the ParsePacketBody invocations corresponds
// the number of defined expectations
func (m *PacketParserMock) MinimockParsePacketBodyDone() bool {
	for _, e := range m.ParsePacketBodyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ParsePacketBodyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterParsePacketBodyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParsePacketBody != nil && mm_atomic.LoadUint64(&m.afterParsePacketBodyCounter) < 1 {
		return false
	}
	return true
}

// MinimockParsePacketBodyInspect logs each unmet expectation
func (m *PacketParserMock) MinimockParsePacketBodyInspect() {
	for _, e := range m.ParsePacketBodyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PacketParserMock.ParsePacketBody")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ParsePacketBodyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterParsePacketBodyCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.ParsePacketBody")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParsePacketBody != nil && mm_atomic.LoadUint64(&m.afterParsePacketBodyCounter) < 1 {
		m.t.Error("Expected call to PacketParserMock.ParsePacketBody")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PacketParserMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetMemberPacketInspect()

		m.MinimockGetPacketSignatureInspect()

		m.MinimockGetPacketTypeInspect()

		m.MinimockGetPulseNumberInspect()

		m.MinimockGetPulsePacketInspect()

		m.MinimockGetReceiverIDInspect()

		m.MinimockGetSourceIDInspect()

		m.MinimockGetTargetIDInspect()

		m.MinimockIsRelayForbiddenInspect()

		m.MinimockParsePacketBodyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PacketParserMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PacketParserMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMemberPacketDone() &&
		m.MinimockGetPacketSignatureDone() &&
		m.MinimockGetPacketTypeDone() &&
		m.MinimockGetPulseNumberDone() &&
		m.MinimockGetPulsePacketDone() &&
		m.MinimockGetReceiverIDDone() &&
		m.MinimockGetSourceIDDone() &&
		m.MinimockGetTargetIDDone() &&
		m.MinimockIsRelayForbiddenDone() &&
		m.MinimockParsePacketBodyDone()
}
