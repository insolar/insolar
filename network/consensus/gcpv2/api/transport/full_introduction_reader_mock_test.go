package transport

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/common/endpoints"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/member"
	"github.com/insolar/insolar/pulse"
)

// FullIntroductionReaderMock implements FullIntroductionReader
type FullIntroductionReaderMock struct {
	t minimock.Tester

	funcGetBriefIntroSignedDigest          func() (s1 cryptkit.SignedDigestHolder)
	inspectFuncGetBriefIntroSignedDigest   func()
	afterGetBriefIntroSignedDigestCounter  uint64
	beforeGetBriefIntroSignedDigestCounter uint64
	GetBriefIntroSignedDigestMock          mFullIntroductionReaderMockGetBriefIntroSignedDigest

	funcGetDefaultEndpoint          func() (o1 endpoints.Outbound)
	inspectFuncGetDefaultEndpoint   func()
	afterGetDefaultEndpointCounter  uint64
	beforeGetDefaultEndpointCounter uint64
	GetDefaultEndpointMock          mFullIntroductionReaderMockGetDefaultEndpoint

	funcGetExtraEndpoints          func() (oa1 []endpoints.Outbound)
	inspectFuncGetExtraEndpoints   func()
	afterGetExtraEndpointsCounter  uint64
	beforeGetExtraEndpointsCounter uint64
	GetExtraEndpointsMock          mFullIntroductionReaderMockGetExtraEndpoints

	funcGetIssuedAtPulse          func() (n1 pulse.Number)
	inspectFuncGetIssuedAtPulse   func()
	afterGetIssuedAtPulseCounter  uint64
	beforeGetIssuedAtPulseCounter uint64
	GetIssuedAtPulseMock          mFullIntroductionReaderMockGetIssuedAtPulse

	funcGetIssuedAtTime          func() (t1 time.Time)
	inspectFuncGetIssuedAtTime   func()
	afterGetIssuedAtTimeCounter  uint64
	beforeGetIssuedAtTimeCounter uint64
	GetIssuedAtTimeMock          mFullIntroductionReaderMockGetIssuedAtTime

	funcGetIssuerID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetIssuerID   func()
	afterGetIssuerIDCounter  uint64
	beforeGetIssuerIDCounter uint64
	GetIssuerIDMock          mFullIntroductionReaderMockGetIssuerID

	funcGetIssuerSignature          func() (s1 cryptkit.SignatureHolder)
	inspectFuncGetIssuerSignature   func()
	afterGetIssuerSignatureCounter  uint64
	beforeGetIssuerSignatureCounter uint64
	GetIssuerSignatureMock          mFullIntroductionReaderMockGetIssuerSignature

	funcGetNodePublicKey          func() (s1 cryptkit.SignatureKeyHolder)
	inspectFuncGetNodePublicKey   func()
	afterGetNodePublicKeyCounter  uint64
	beforeGetNodePublicKeyCounter uint64
	GetNodePublicKeyMock          mFullIntroductionReaderMockGetNodePublicKey

	funcGetPowerLevels          func() (p1 member.PowerSet)
	inspectFuncGetPowerLevels   func()
	afterGetPowerLevelsCounter  uint64
	beforeGetPowerLevelsCounter uint64
	GetPowerLevelsMock          mFullIntroductionReaderMockGetPowerLevels

	funcGetPrimaryRole          func() (p1 member.PrimaryRole)
	inspectFuncGetPrimaryRole   func()
	afterGetPrimaryRoleCounter  uint64
	beforeGetPrimaryRoleCounter uint64
	GetPrimaryRoleMock          mFullIntroductionReaderMockGetPrimaryRole

	funcGetReference          func() (r1 insolar.Reference)
	inspectFuncGetReference   func()
	afterGetReferenceCounter  uint64
	beforeGetReferenceCounter uint64
	GetReferenceMock          mFullIntroductionReaderMockGetReference

	funcGetSpecialRoles          func() (s1 member.SpecialRole)
	inspectFuncGetSpecialRoles   func()
	afterGetSpecialRolesCounter  uint64
	beforeGetSpecialRolesCounter uint64
	GetSpecialRolesMock          mFullIntroductionReaderMockGetSpecialRoles

	funcGetStartPower          func() (p1 member.Power)
	inspectFuncGetStartPower   func()
	afterGetStartPowerCounter  uint64
	beforeGetStartPowerCounter uint64
	GetStartPowerMock          mFullIntroductionReaderMockGetStartPower

	funcGetStaticNodeID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetStaticNodeID   func()
	afterGetStaticNodeIDCounter  uint64
	beforeGetStaticNodeIDCounter uint64
	GetStaticNodeIDMock          mFullIntroductionReaderMockGetStaticNodeID
}

// NewFullIntroductionReaderMock returns a mock for FullIntroductionReader
func NewFullIntroductionReaderMock(t minimock.Tester) *FullIntroductionReaderMock {
	m := &FullIntroductionReaderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetBriefIntroSignedDigestMock = mFullIntroductionReaderMockGetBriefIntroSignedDigest{mock: m}

	m.GetDefaultEndpointMock = mFullIntroductionReaderMockGetDefaultEndpoint{mock: m}

	m.GetExtraEndpointsMock = mFullIntroductionReaderMockGetExtraEndpoints{mock: m}

	m.GetIssuedAtPulseMock = mFullIntroductionReaderMockGetIssuedAtPulse{mock: m}

	m.GetIssuedAtTimeMock = mFullIntroductionReaderMockGetIssuedAtTime{mock: m}

	m.GetIssuerIDMock = mFullIntroductionReaderMockGetIssuerID{mock: m}

	m.GetIssuerSignatureMock = mFullIntroductionReaderMockGetIssuerSignature{mock: m}

	m.GetNodePublicKeyMock = mFullIntroductionReaderMockGetNodePublicKey{mock: m}

	m.GetPowerLevelsMock = mFullIntroductionReaderMockGetPowerLevels{mock: m}

	m.GetPrimaryRoleMock = mFullIntroductionReaderMockGetPrimaryRole{mock: m}

	m.GetReferenceMock = mFullIntroductionReaderMockGetReference{mock: m}

	m.GetSpecialRolesMock = mFullIntroductionReaderMockGetSpecialRoles{mock: m}

	m.GetStartPowerMock = mFullIntroductionReaderMockGetStartPower{mock: m}

	m.GetStaticNodeIDMock = mFullIntroductionReaderMockGetStaticNodeID{mock: m}

	return m
}

type mFullIntroductionReaderMockGetBriefIntroSignedDigest struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetBriefIntroSignedDigestExpectation
	expectations       []*FullIntroductionReaderMockGetBriefIntroSignedDigestExpectation
}

// FullIntroductionReaderMockGetBriefIntroSignedDigestExpectation specifies expectation struct of the FullIntroductionReader.GetBriefIntroSignedDigest
type FullIntroductionReaderMockGetBriefIntroSignedDigestExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetBriefIntroSignedDigestResults
	Counter uint64
}

// FullIntroductionReaderMockGetBriefIntroSignedDigestResults contains results of the FullIntroductionReader.GetBriefIntroSignedDigest
type FullIntroductionReaderMockGetBriefIntroSignedDigestResults struct {
	s1 cryptkit.SignedDigestHolder
}

// Expect sets up expected params for FullIntroductionReader.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mFullIntroductionReaderMockGetBriefIntroSignedDigest) Expect() *mFullIntroductionReaderMockGetBriefIntroSignedDigest {
	if mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("FullIntroductionReaderMock.GetBriefIntroSignedDigest mock is already set by Set")
	}

	if mmGetBriefIntroSignedDigest.defaultExpectation == nil {
		mmGetBriefIntroSignedDigest.defaultExpectation = &FullIntroductionReaderMockGetBriefIntroSignedDigestExpectation{}
	}

	return mmGetBriefIntroSignedDigest
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mFullIntroductionReaderMockGetBriefIntroSignedDigest) Inspect(f func()) *mFullIntroductionReaderMockGetBriefIntroSignedDigest {
	if mmGetBriefIntroSignedDigest.mock.inspectFuncGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetBriefIntroSignedDigest")
	}

	mmGetBriefIntroSignedDigest.mock.inspectFuncGetBriefIntroSignedDigest = f

	return mmGetBriefIntroSignedDigest
}

// Return sets up results that will be returned by FullIntroductionReader.GetBriefIntroSignedDigest
func (mmGetBriefIntroSignedDigest *mFullIntroductionReaderMockGetBriefIntroSignedDigest) Return(s1 cryptkit.SignedDigestHolder) *FullIntroductionReaderMock {
	if mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("FullIntroductionReaderMock.GetBriefIntroSignedDigest mock is already set by Set")
	}

	if mmGetBriefIntroSignedDigest.defaultExpectation == nil {
		mmGetBriefIntroSignedDigest.defaultExpectation = &FullIntroductionReaderMockGetBriefIntroSignedDigestExpectation{mock: mmGetBriefIntroSignedDigest.mock}
	}
	mmGetBriefIntroSignedDigest.defaultExpectation.results = &FullIntroductionReaderMockGetBriefIntroSignedDigestResults{s1}
	return mmGetBriefIntroSignedDigest.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetBriefIntroSignedDigest method
func (mmGetBriefIntroSignedDigest *mFullIntroductionReaderMockGetBriefIntroSignedDigest) Set(f func() (s1 cryptkit.SignedDigestHolder)) *FullIntroductionReaderMock {
	if mmGetBriefIntroSignedDigest.defaultExpectation != nil {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetBriefIntroSignedDigest method")
	}

	if len(mmGetBriefIntroSignedDigest.expectations) > 0 {
		mmGetBriefIntroSignedDigest.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetBriefIntroSignedDigest method")
	}

	mmGetBriefIntroSignedDigest.mock.funcGetBriefIntroSignedDigest = f
	return mmGetBriefIntroSignedDigest.mock
}

// GetBriefIntroSignedDigest implements FullIntroductionReader
func (mmGetBriefIntroSignedDigest *FullIntroductionReaderMock) GetBriefIntroSignedDigest() (s1 cryptkit.SignedDigestHolder) {
	mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.beforeGetBriefIntroSignedDigestCounter, 1)
	defer mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.afterGetBriefIntroSignedDigestCounter, 1)

	if mmGetBriefIntroSignedDigest.inspectFuncGetBriefIntroSignedDigest != nil {
		mmGetBriefIntroSignedDigest.inspectFuncGetBriefIntroSignedDigest()
	}

	if mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation.Counter, 1)

		results := mmGetBriefIntroSignedDigest.GetBriefIntroSignedDigestMock.defaultExpectation.results
		if results == nil {
			mmGetBriefIntroSignedDigest.t.Fatal("No results are set for the FullIntroductionReaderMock.GetBriefIntroSignedDigest")
		}
		return (*results).s1
	}
	if mmGetBriefIntroSignedDigest.funcGetBriefIntroSignedDigest != nil {
		return mmGetBriefIntroSignedDigest.funcGetBriefIntroSignedDigest()
	}
	mmGetBriefIntroSignedDigest.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetBriefIntroSignedDigest.")
	return
}

// GetBriefIntroSignedDigestAfterCounter returns a count of finished FullIntroductionReaderMock.GetBriefIntroSignedDigest invocations
func (mmGetBriefIntroSignedDigest *FullIntroductionReaderMock) GetBriefIntroSignedDigestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBriefIntroSignedDigest.afterGetBriefIntroSignedDigestCounter)
}

// GetBriefIntroSignedDigestBeforeCounter returns a count of FullIntroductionReaderMock.GetBriefIntroSignedDigest invocations
func (mmGetBriefIntroSignedDigest *FullIntroductionReaderMock) GetBriefIntroSignedDigestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetBriefIntroSignedDigest.beforeGetBriefIntroSignedDigestCounter)
}

// MinimockGetBriefIntroSignedDigestDone returns true if the count of the GetBriefIntroSignedDigest invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetBriefIntroSignedDigestDone() bool {
	for _, e := range m.GetBriefIntroSignedDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBriefIntroSignedDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBriefIntroSignedDigest != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetBriefIntroSignedDigestInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetBriefIntroSignedDigestInspect() {
	for _, e := range m.GetBriefIntroSignedDigestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetBriefIntroSignedDigest")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetBriefIntroSignedDigestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetBriefIntroSignedDigest")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetBriefIntroSignedDigest != nil && mm_atomic.LoadUint64(&m.afterGetBriefIntroSignedDigestCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetBriefIntroSignedDigest")
	}
}

type mFullIntroductionReaderMockGetDefaultEndpoint struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetDefaultEndpointExpectation
	expectations       []*FullIntroductionReaderMockGetDefaultEndpointExpectation
}

// FullIntroductionReaderMockGetDefaultEndpointExpectation specifies expectation struct of the FullIntroductionReader.GetDefaultEndpoint
type FullIntroductionReaderMockGetDefaultEndpointExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetDefaultEndpointResults
	Counter uint64
}

// FullIntroductionReaderMockGetDefaultEndpointResults contains results of the FullIntroductionReader.GetDefaultEndpoint
type FullIntroductionReaderMockGetDefaultEndpointResults struct {
	o1 endpoints.Outbound
}

// Expect sets up expected params for FullIntroductionReader.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mFullIntroductionReaderMockGetDefaultEndpoint) Expect() *mFullIntroductionReaderMockGetDefaultEndpoint {
	if mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("FullIntroductionReaderMock.GetDefaultEndpoint mock is already set by Set")
	}

	if mmGetDefaultEndpoint.defaultExpectation == nil {
		mmGetDefaultEndpoint.defaultExpectation = &FullIntroductionReaderMockGetDefaultEndpointExpectation{}
	}

	return mmGetDefaultEndpoint
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mFullIntroductionReaderMockGetDefaultEndpoint) Inspect(f func()) *mFullIntroductionReaderMockGetDefaultEndpoint {
	if mmGetDefaultEndpoint.mock.inspectFuncGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetDefaultEndpoint")
	}

	mmGetDefaultEndpoint.mock.inspectFuncGetDefaultEndpoint = f

	return mmGetDefaultEndpoint
}

// Return sets up results that will be returned by FullIntroductionReader.GetDefaultEndpoint
func (mmGetDefaultEndpoint *mFullIntroductionReaderMockGetDefaultEndpoint) Return(o1 endpoints.Outbound) *FullIntroductionReaderMock {
	if mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("FullIntroductionReaderMock.GetDefaultEndpoint mock is already set by Set")
	}

	if mmGetDefaultEndpoint.defaultExpectation == nil {
		mmGetDefaultEndpoint.defaultExpectation = &FullIntroductionReaderMockGetDefaultEndpointExpectation{mock: mmGetDefaultEndpoint.mock}
	}
	mmGetDefaultEndpoint.defaultExpectation.results = &FullIntroductionReaderMockGetDefaultEndpointResults{o1}
	return mmGetDefaultEndpoint.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetDefaultEndpoint method
func (mmGetDefaultEndpoint *mFullIntroductionReaderMockGetDefaultEndpoint) Set(f func() (o1 endpoints.Outbound)) *FullIntroductionReaderMock {
	if mmGetDefaultEndpoint.defaultExpectation != nil {
		mmGetDefaultEndpoint.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetDefaultEndpoint method")
	}

	if len(mmGetDefaultEndpoint.expectations) > 0 {
		mmGetDefaultEndpoint.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetDefaultEndpoint method")
	}

	mmGetDefaultEndpoint.mock.funcGetDefaultEndpoint = f
	return mmGetDefaultEndpoint.mock
}

// GetDefaultEndpoint implements FullIntroductionReader
func (mmGetDefaultEndpoint *FullIntroductionReaderMock) GetDefaultEndpoint() (o1 endpoints.Outbound) {
	mm_atomic.AddUint64(&mmGetDefaultEndpoint.beforeGetDefaultEndpointCounter, 1)
	defer mm_atomic.AddUint64(&mmGetDefaultEndpoint.afterGetDefaultEndpointCounter, 1)

	if mmGetDefaultEndpoint.inspectFuncGetDefaultEndpoint != nil {
		mmGetDefaultEndpoint.inspectFuncGetDefaultEndpoint()
	}

	if mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation.Counter, 1)

		results := mmGetDefaultEndpoint.GetDefaultEndpointMock.defaultExpectation.results
		if results == nil {
			mmGetDefaultEndpoint.t.Fatal("No results are set for the FullIntroductionReaderMock.GetDefaultEndpoint")
		}
		return (*results).o1
	}
	if mmGetDefaultEndpoint.funcGetDefaultEndpoint != nil {
		return mmGetDefaultEndpoint.funcGetDefaultEndpoint()
	}
	mmGetDefaultEndpoint.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetDefaultEndpoint.")
	return
}

// GetDefaultEndpointAfterCounter returns a count of finished FullIntroductionReaderMock.GetDefaultEndpoint invocations
func (mmGetDefaultEndpoint *FullIntroductionReaderMock) GetDefaultEndpointAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDefaultEndpoint.afterGetDefaultEndpointCounter)
}

// GetDefaultEndpointBeforeCounter returns a count of FullIntroductionReaderMock.GetDefaultEndpoint invocations
func (mmGetDefaultEndpoint *FullIntroductionReaderMock) GetDefaultEndpointBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDefaultEndpoint.beforeGetDefaultEndpointCounter)
}

// MinimockGetDefaultEndpointDone returns true if the count of the GetDefaultEndpoint invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetDefaultEndpointDone() bool {
	for _, e := range m.GetDefaultEndpointMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDefaultEndpointMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDefaultEndpoint != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetDefaultEndpointInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetDefaultEndpointInspect() {
	for _, e := range m.GetDefaultEndpointMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetDefaultEndpoint")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDefaultEndpointMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetDefaultEndpoint")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDefaultEndpoint != nil && mm_atomic.LoadUint64(&m.afterGetDefaultEndpointCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetDefaultEndpoint")
	}
}

type mFullIntroductionReaderMockGetExtraEndpoints struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetExtraEndpointsExpectation
	expectations       []*FullIntroductionReaderMockGetExtraEndpointsExpectation
}

// FullIntroductionReaderMockGetExtraEndpointsExpectation specifies expectation struct of the FullIntroductionReader.GetExtraEndpoints
type FullIntroductionReaderMockGetExtraEndpointsExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetExtraEndpointsResults
	Counter uint64
}

// FullIntroductionReaderMockGetExtraEndpointsResults contains results of the FullIntroductionReader.GetExtraEndpoints
type FullIntroductionReaderMockGetExtraEndpointsResults struct {
	oa1 []endpoints.Outbound
}

// Expect sets up expected params for FullIntroductionReader.GetExtraEndpoints
func (mmGetExtraEndpoints *mFullIntroductionReaderMockGetExtraEndpoints) Expect() *mFullIntroductionReaderMockGetExtraEndpoints {
	if mmGetExtraEndpoints.mock.funcGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("FullIntroductionReaderMock.GetExtraEndpoints mock is already set by Set")
	}

	if mmGetExtraEndpoints.defaultExpectation == nil {
		mmGetExtraEndpoints.defaultExpectation = &FullIntroductionReaderMockGetExtraEndpointsExpectation{}
	}

	return mmGetExtraEndpoints
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetExtraEndpoints
func (mmGetExtraEndpoints *mFullIntroductionReaderMockGetExtraEndpoints) Inspect(f func()) *mFullIntroductionReaderMockGetExtraEndpoints {
	if mmGetExtraEndpoints.mock.inspectFuncGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetExtraEndpoints")
	}

	mmGetExtraEndpoints.mock.inspectFuncGetExtraEndpoints = f

	return mmGetExtraEndpoints
}

// Return sets up results that will be returned by FullIntroductionReader.GetExtraEndpoints
func (mmGetExtraEndpoints *mFullIntroductionReaderMockGetExtraEndpoints) Return(oa1 []endpoints.Outbound) *FullIntroductionReaderMock {
	if mmGetExtraEndpoints.mock.funcGetExtraEndpoints != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("FullIntroductionReaderMock.GetExtraEndpoints mock is already set by Set")
	}

	if mmGetExtraEndpoints.defaultExpectation == nil {
		mmGetExtraEndpoints.defaultExpectation = &FullIntroductionReaderMockGetExtraEndpointsExpectation{mock: mmGetExtraEndpoints.mock}
	}
	mmGetExtraEndpoints.defaultExpectation.results = &FullIntroductionReaderMockGetExtraEndpointsResults{oa1}
	return mmGetExtraEndpoints.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetExtraEndpoints method
func (mmGetExtraEndpoints *mFullIntroductionReaderMockGetExtraEndpoints) Set(f func() (oa1 []endpoints.Outbound)) *FullIntroductionReaderMock {
	if mmGetExtraEndpoints.defaultExpectation != nil {
		mmGetExtraEndpoints.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetExtraEndpoints method")
	}

	if len(mmGetExtraEndpoints.expectations) > 0 {
		mmGetExtraEndpoints.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetExtraEndpoints method")
	}

	mmGetExtraEndpoints.mock.funcGetExtraEndpoints = f
	return mmGetExtraEndpoints.mock
}

// GetExtraEndpoints implements FullIntroductionReader
func (mmGetExtraEndpoints *FullIntroductionReaderMock) GetExtraEndpoints() (oa1 []endpoints.Outbound) {
	mm_atomic.AddUint64(&mmGetExtraEndpoints.beforeGetExtraEndpointsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetExtraEndpoints.afterGetExtraEndpointsCounter, 1)

	if mmGetExtraEndpoints.inspectFuncGetExtraEndpoints != nil {
		mmGetExtraEndpoints.inspectFuncGetExtraEndpoints()
	}

	if mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation.Counter, 1)

		results := mmGetExtraEndpoints.GetExtraEndpointsMock.defaultExpectation.results
		if results == nil {
			mmGetExtraEndpoints.t.Fatal("No results are set for the FullIntroductionReaderMock.GetExtraEndpoints")
		}
		return (*results).oa1
	}
	if mmGetExtraEndpoints.funcGetExtraEndpoints != nil {
		return mmGetExtraEndpoints.funcGetExtraEndpoints()
	}
	mmGetExtraEndpoints.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetExtraEndpoints.")
	return
}

// GetExtraEndpointsAfterCounter returns a count of finished FullIntroductionReaderMock.GetExtraEndpoints invocations
func (mmGetExtraEndpoints *FullIntroductionReaderMock) GetExtraEndpointsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtraEndpoints.afterGetExtraEndpointsCounter)
}

// GetExtraEndpointsBeforeCounter returns a count of FullIntroductionReaderMock.GetExtraEndpoints invocations
func (mmGetExtraEndpoints *FullIntroductionReaderMock) GetExtraEndpointsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetExtraEndpoints.beforeGetExtraEndpointsCounter)
}

// MinimockGetExtraEndpointsDone returns true if the count of the GetExtraEndpoints invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetExtraEndpointsDone() bool {
	for _, e := range m.GetExtraEndpointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtraEndpointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtraEndpoints != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetExtraEndpointsInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetExtraEndpointsInspect() {
	for _, e := range m.GetExtraEndpointsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetExtraEndpoints")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetExtraEndpointsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetExtraEndpoints")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetExtraEndpoints != nil && mm_atomic.LoadUint64(&m.afterGetExtraEndpointsCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetExtraEndpoints")
	}
}

type mFullIntroductionReaderMockGetIssuedAtPulse struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetIssuedAtPulseExpectation
	expectations       []*FullIntroductionReaderMockGetIssuedAtPulseExpectation
}

// FullIntroductionReaderMockGetIssuedAtPulseExpectation specifies expectation struct of the FullIntroductionReader.GetIssuedAtPulse
type FullIntroductionReaderMockGetIssuedAtPulseExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetIssuedAtPulseResults
	Counter uint64
}

// FullIntroductionReaderMockGetIssuedAtPulseResults contains results of the FullIntroductionReader.GetIssuedAtPulse
type FullIntroductionReaderMockGetIssuedAtPulseResults struct {
	n1 pulse.Number
}

// Expect sets up expected params for FullIntroductionReader.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mFullIntroductionReaderMockGetIssuedAtPulse) Expect() *mFullIntroductionReaderMockGetIssuedAtPulse {
	if mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuedAtPulse mock is already set by Set")
	}

	if mmGetIssuedAtPulse.defaultExpectation == nil {
		mmGetIssuedAtPulse.defaultExpectation = &FullIntroductionReaderMockGetIssuedAtPulseExpectation{}
	}

	return mmGetIssuedAtPulse
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mFullIntroductionReaderMockGetIssuedAtPulse) Inspect(f func()) *mFullIntroductionReaderMockGetIssuedAtPulse {
	if mmGetIssuedAtPulse.mock.inspectFuncGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetIssuedAtPulse")
	}

	mmGetIssuedAtPulse.mock.inspectFuncGetIssuedAtPulse = f

	return mmGetIssuedAtPulse
}

// Return sets up results that will be returned by FullIntroductionReader.GetIssuedAtPulse
func (mmGetIssuedAtPulse *mFullIntroductionReaderMockGetIssuedAtPulse) Return(n1 pulse.Number) *FullIntroductionReaderMock {
	if mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuedAtPulse mock is already set by Set")
	}

	if mmGetIssuedAtPulse.defaultExpectation == nil {
		mmGetIssuedAtPulse.defaultExpectation = &FullIntroductionReaderMockGetIssuedAtPulseExpectation{mock: mmGetIssuedAtPulse.mock}
	}
	mmGetIssuedAtPulse.defaultExpectation.results = &FullIntroductionReaderMockGetIssuedAtPulseResults{n1}
	return mmGetIssuedAtPulse.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetIssuedAtPulse method
func (mmGetIssuedAtPulse *mFullIntroductionReaderMockGetIssuedAtPulse) Set(f func() (n1 pulse.Number)) *FullIntroductionReaderMock {
	if mmGetIssuedAtPulse.defaultExpectation != nil {
		mmGetIssuedAtPulse.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetIssuedAtPulse method")
	}

	if len(mmGetIssuedAtPulse.expectations) > 0 {
		mmGetIssuedAtPulse.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetIssuedAtPulse method")
	}

	mmGetIssuedAtPulse.mock.funcGetIssuedAtPulse = f
	return mmGetIssuedAtPulse.mock
}

// GetIssuedAtPulse implements FullIntroductionReader
func (mmGetIssuedAtPulse *FullIntroductionReaderMock) GetIssuedAtPulse() (n1 pulse.Number) {
	mm_atomic.AddUint64(&mmGetIssuedAtPulse.beforeGetIssuedAtPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuedAtPulse.afterGetIssuedAtPulseCounter, 1)

	if mmGetIssuedAtPulse.inspectFuncGetIssuedAtPulse != nil {
		mmGetIssuedAtPulse.inspectFuncGetIssuedAtPulse()
	}

	if mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation.Counter, 1)

		results := mmGetIssuedAtPulse.GetIssuedAtPulseMock.defaultExpectation.results
		if results == nil {
			mmGetIssuedAtPulse.t.Fatal("No results are set for the FullIntroductionReaderMock.GetIssuedAtPulse")
		}
		return (*results).n1
	}
	if mmGetIssuedAtPulse.funcGetIssuedAtPulse != nil {
		return mmGetIssuedAtPulse.funcGetIssuedAtPulse()
	}
	mmGetIssuedAtPulse.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetIssuedAtPulse.")
	return
}

// GetIssuedAtPulseAfterCounter returns a count of finished FullIntroductionReaderMock.GetIssuedAtPulse invocations
func (mmGetIssuedAtPulse *FullIntroductionReaderMock) GetIssuedAtPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtPulse.afterGetIssuedAtPulseCounter)
}

// GetIssuedAtPulseBeforeCounter returns a count of FullIntroductionReaderMock.GetIssuedAtPulse invocations
func (mmGetIssuedAtPulse *FullIntroductionReaderMock) GetIssuedAtPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtPulse.beforeGetIssuedAtPulseCounter)
}

// MinimockGetIssuedAtPulseDone returns true if the count of the GetIssuedAtPulse invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetIssuedAtPulseDone() bool {
	for _, e := range m.GetIssuedAtPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtPulse != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuedAtPulseInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetIssuedAtPulseInspect() {
	for _, e := range m.GetIssuedAtPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuedAtPulse")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuedAtPulse")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtPulse != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtPulseCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuedAtPulse")
	}
}

type mFullIntroductionReaderMockGetIssuedAtTime struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetIssuedAtTimeExpectation
	expectations       []*FullIntroductionReaderMockGetIssuedAtTimeExpectation
}

// FullIntroductionReaderMockGetIssuedAtTimeExpectation specifies expectation struct of the FullIntroductionReader.GetIssuedAtTime
type FullIntroductionReaderMockGetIssuedAtTimeExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetIssuedAtTimeResults
	Counter uint64
}

// FullIntroductionReaderMockGetIssuedAtTimeResults contains results of the FullIntroductionReader.GetIssuedAtTime
type FullIntroductionReaderMockGetIssuedAtTimeResults struct {
	t1 time.Time
}

// Expect sets up expected params for FullIntroductionReader.GetIssuedAtTime
func (mmGetIssuedAtTime *mFullIntroductionReaderMockGetIssuedAtTime) Expect() *mFullIntroductionReaderMockGetIssuedAtTime {
	if mmGetIssuedAtTime.mock.funcGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuedAtTime mock is already set by Set")
	}

	if mmGetIssuedAtTime.defaultExpectation == nil {
		mmGetIssuedAtTime.defaultExpectation = &FullIntroductionReaderMockGetIssuedAtTimeExpectation{}
	}

	return mmGetIssuedAtTime
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetIssuedAtTime
func (mmGetIssuedAtTime *mFullIntroductionReaderMockGetIssuedAtTime) Inspect(f func()) *mFullIntroductionReaderMockGetIssuedAtTime {
	if mmGetIssuedAtTime.mock.inspectFuncGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetIssuedAtTime")
	}

	mmGetIssuedAtTime.mock.inspectFuncGetIssuedAtTime = f

	return mmGetIssuedAtTime
}

// Return sets up results that will be returned by FullIntroductionReader.GetIssuedAtTime
func (mmGetIssuedAtTime *mFullIntroductionReaderMockGetIssuedAtTime) Return(t1 time.Time) *FullIntroductionReaderMock {
	if mmGetIssuedAtTime.mock.funcGetIssuedAtTime != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuedAtTime mock is already set by Set")
	}

	if mmGetIssuedAtTime.defaultExpectation == nil {
		mmGetIssuedAtTime.defaultExpectation = &FullIntroductionReaderMockGetIssuedAtTimeExpectation{mock: mmGetIssuedAtTime.mock}
	}
	mmGetIssuedAtTime.defaultExpectation.results = &FullIntroductionReaderMockGetIssuedAtTimeResults{t1}
	return mmGetIssuedAtTime.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetIssuedAtTime method
func (mmGetIssuedAtTime *mFullIntroductionReaderMockGetIssuedAtTime) Set(f func() (t1 time.Time)) *FullIntroductionReaderMock {
	if mmGetIssuedAtTime.defaultExpectation != nil {
		mmGetIssuedAtTime.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetIssuedAtTime method")
	}

	if len(mmGetIssuedAtTime.expectations) > 0 {
		mmGetIssuedAtTime.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetIssuedAtTime method")
	}

	mmGetIssuedAtTime.mock.funcGetIssuedAtTime = f
	return mmGetIssuedAtTime.mock
}

// GetIssuedAtTime implements FullIntroductionReader
func (mmGetIssuedAtTime *FullIntroductionReaderMock) GetIssuedAtTime() (t1 time.Time) {
	mm_atomic.AddUint64(&mmGetIssuedAtTime.beforeGetIssuedAtTimeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuedAtTime.afterGetIssuedAtTimeCounter, 1)

	if mmGetIssuedAtTime.inspectFuncGetIssuedAtTime != nil {
		mmGetIssuedAtTime.inspectFuncGetIssuedAtTime()
	}

	if mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation.Counter, 1)

		results := mmGetIssuedAtTime.GetIssuedAtTimeMock.defaultExpectation.results
		if results == nil {
			mmGetIssuedAtTime.t.Fatal("No results are set for the FullIntroductionReaderMock.GetIssuedAtTime")
		}
		return (*results).t1
	}
	if mmGetIssuedAtTime.funcGetIssuedAtTime != nil {
		return mmGetIssuedAtTime.funcGetIssuedAtTime()
	}
	mmGetIssuedAtTime.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetIssuedAtTime.")
	return
}

// GetIssuedAtTimeAfterCounter returns a count of finished FullIntroductionReaderMock.GetIssuedAtTime invocations
func (mmGetIssuedAtTime *FullIntroductionReaderMock) GetIssuedAtTimeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtTime.afterGetIssuedAtTimeCounter)
}

// GetIssuedAtTimeBeforeCounter returns a count of FullIntroductionReaderMock.GetIssuedAtTime invocations
func (mmGetIssuedAtTime *FullIntroductionReaderMock) GetIssuedAtTimeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuedAtTime.beforeGetIssuedAtTimeCounter)
}

// MinimockGetIssuedAtTimeDone returns true if the count of the GetIssuedAtTime invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetIssuedAtTimeDone() bool {
	for _, e := range m.GetIssuedAtTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtTime != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuedAtTimeInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetIssuedAtTimeInspect() {
	for _, e := range m.GetIssuedAtTimeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuedAtTime")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuedAtTimeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuedAtTime")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuedAtTime != nil && mm_atomic.LoadUint64(&m.afterGetIssuedAtTimeCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuedAtTime")
	}
}

type mFullIntroductionReaderMockGetIssuerID struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetIssuerIDExpectation
	expectations       []*FullIntroductionReaderMockGetIssuerIDExpectation
}

// FullIntroductionReaderMockGetIssuerIDExpectation specifies expectation struct of the FullIntroductionReader.GetIssuerID
type FullIntroductionReaderMockGetIssuerIDExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetIssuerIDResults
	Counter uint64
}

// FullIntroductionReaderMockGetIssuerIDResults contains results of the FullIntroductionReader.GetIssuerID
type FullIntroductionReaderMockGetIssuerIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for FullIntroductionReader.GetIssuerID
func (mmGetIssuerID *mFullIntroductionReaderMockGetIssuerID) Expect() *mFullIntroductionReaderMockGetIssuerID {
	if mmGetIssuerID.mock.funcGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuerID mock is already set by Set")
	}

	if mmGetIssuerID.defaultExpectation == nil {
		mmGetIssuerID.defaultExpectation = &FullIntroductionReaderMockGetIssuerIDExpectation{}
	}

	return mmGetIssuerID
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetIssuerID
func (mmGetIssuerID *mFullIntroductionReaderMockGetIssuerID) Inspect(f func()) *mFullIntroductionReaderMockGetIssuerID {
	if mmGetIssuerID.mock.inspectFuncGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetIssuerID")
	}

	mmGetIssuerID.mock.inspectFuncGetIssuerID = f

	return mmGetIssuerID
}

// Return sets up results that will be returned by FullIntroductionReader.GetIssuerID
func (mmGetIssuerID *mFullIntroductionReaderMockGetIssuerID) Return(s1 insolar.ShortNodeID) *FullIntroductionReaderMock {
	if mmGetIssuerID.mock.funcGetIssuerID != nil {
		mmGetIssuerID.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuerID mock is already set by Set")
	}

	if mmGetIssuerID.defaultExpectation == nil {
		mmGetIssuerID.defaultExpectation = &FullIntroductionReaderMockGetIssuerIDExpectation{mock: mmGetIssuerID.mock}
	}
	mmGetIssuerID.defaultExpectation.results = &FullIntroductionReaderMockGetIssuerIDResults{s1}
	return mmGetIssuerID.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetIssuerID method
func (mmGetIssuerID *mFullIntroductionReaderMockGetIssuerID) Set(f func() (s1 insolar.ShortNodeID)) *FullIntroductionReaderMock {
	if mmGetIssuerID.defaultExpectation != nil {
		mmGetIssuerID.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetIssuerID method")
	}

	if len(mmGetIssuerID.expectations) > 0 {
		mmGetIssuerID.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetIssuerID method")
	}

	mmGetIssuerID.mock.funcGetIssuerID = f
	return mmGetIssuerID.mock
}

// GetIssuerID implements FullIntroductionReader
func (mmGetIssuerID *FullIntroductionReaderMock) GetIssuerID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetIssuerID.beforeGetIssuerIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuerID.afterGetIssuerIDCounter, 1)

	if mmGetIssuerID.inspectFuncGetIssuerID != nil {
		mmGetIssuerID.inspectFuncGetIssuerID()
	}

	if mmGetIssuerID.GetIssuerIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuerID.GetIssuerIDMock.defaultExpectation.Counter, 1)

		results := mmGetIssuerID.GetIssuerIDMock.defaultExpectation.results
		if results == nil {
			mmGetIssuerID.t.Fatal("No results are set for the FullIntroductionReaderMock.GetIssuerID")
		}
		return (*results).s1
	}
	if mmGetIssuerID.funcGetIssuerID != nil {
		return mmGetIssuerID.funcGetIssuerID()
	}
	mmGetIssuerID.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetIssuerID.")
	return
}

// GetIssuerIDAfterCounter returns a count of finished FullIntroductionReaderMock.GetIssuerID invocations
func (mmGetIssuerID *FullIntroductionReaderMock) GetIssuerIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerID.afterGetIssuerIDCounter)
}

// GetIssuerIDBeforeCounter returns a count of FullIntroductionReaderMock.GetIssuerID invocations
func (mmGetIssuerID *FullIntroductionReaderMock) GetIssuerIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerID.beforeGetIssuerIDCounter)
}

// MinimockGetIssuerIDDone returns true if the count of the GetIssuerID invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetIssuerIDDone() bool {
	for _, e := range m.GetIssuerIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerID != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuerIDInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetIssuerIDInspect() {
	for _, e := range m.GetIssuerIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuerID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuerID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerID != nil && mm_atomic.LoadUint64(&m.afterGetIssuerIDCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuerID")
	}
}

type mFullIntroductionReaderMockGetIssuerSignature struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetIssuerSignatureExpectation
	expectations       []*FullIntroductionReaderMockGetIssuerSignatureExpectation
}

// FullIntroductionReaderMockGetIssuerSignatureExpectation specifies expectation struct of the FullIntroductionReader.GetIssuerSignature
type FullIntroductionReaderMockGetIssuerSignatureExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetIssuerSignatureResults
	Counter uint64
}

// FullIntroductionReaderMockGetIssuerSignatureResults contains results of the FullIntroductionReader.GetIssuerSignature
type FullIntroductionReaderMockGetIssuerSignatureResults struct {
	s1 cryptkit.SignatureHolder
}

// Expect sets up expected params for FullIntroductionReader.GetIssuerSignature
func (mmGetIssuerSignature *mFullIntroductionReaderMockGetIssuerSignature) Expect() *mFullIntroductionReaderMockGetIssuerSignature {
	if mmGetIssuerSignature.mock.funcGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuerSignature mock is already set by Set")
	}

	if mmGetIssuerSignature.defaultExpectation == nil {
		mmGetIssuerSignature.defaultExpectation = &FullIntroductionReaderMockGetIssuerSignatureExpectation{}
	}

	return mmGetIssuerSignature
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetIssuerSignature
func (mmGetIssuerSignature *mFullIntroductionReaderMockGetIssuerSignature) Inspect(f func()) *mFullIntroductionReaderMockGetIssuerSignature {
	if mmGetIssuerSignature.mock.inspectFuncGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetIssuerSignature")
	}

	mmGetIssuerSignature.mock.inspectFuncGetIssuerSignature = f

	return mmGetIssuerSignature
}

// Return sets up results that will be returned by FullIntroductionReader.GetIssuerSignature
func (mmGetIssuerSignature *mFullIntroductionReaderMockGetIssuerSignature) Return(s1 cryptkit.SignatureHolder) *FullIntroductionReaderMock {
	if mmGetIssuerSignature.mock.funcGetIssuerSignature != nil {
		mmGetIssuerSignature.mock.t.Fatalf("FullIntroductionReaderMock.GetIssuerSignature mock is already set by Set")
	}

	if mmGetIssuerSignature.defaultExpectation == nil {
		mmGetIssuerSignature.defaultExpectation = &FullIntroductionReaderMockGetIssuerSignatureExpectation{mock: mmGetIssuerSignature.mock}
	}
	mmGetIssuerSignature.defaultExpectation.results = &FullIntroductionReaderMockGetIssuerSignatureResults{s1}
	return mmGetIssuerSignature.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetIssuerSignature method
func (mmGetIssuerSignature *mFullIntroductionReaderMockGetIssuerSignature) Set(f func() (s1 cryptkit.SignatureHolder)) *FullIntroductionReaderMock {
	if mmGetIssuerSignature.defaultExpectation != nil {
		mmGetIssuerSignature.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetIssuerSignature method")
	}

	if len(mmGetIssuerSignature.expectations) > 0 {
		mmGetIssuerSignature.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetIssuerSignature method")
	}

	mmGetIssuerSignature.mock.funcGetIssuerSignature = f
	return mmGetIssuerSignature.mock
}

// GetIssuerSignature implements FullIntroductionReader
func (mmGetIssuerSignature *FullIntroductionReaderMock) GetIssuerSignature() (s1 cryptkit.SignatureHolder) {
	mm_atomic.AddUint64(&mmGetIssuerSignature.beforeGetIssuerSignatureCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIssuerSignature.afterGetIssuerSignatureCounter, 1)

	if mmGetIssuerSignature.inspectFuncGetIssuerSignature != nil {
		mmGetIssuerSignature.inspectFuncGetIssuerSignature()
	}

	if mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation.Counter, 1)

		results := mmGetIssuerSignature.GetIssuerSignatureMock.defaultExpectation.results
		if results == nil {
			mmGetIssuerSignature.t.Fatal("No results are set for the FullIntroductionReaderMock.GetIssuerSignature")
		}
		return (*results).s1
	}
	if mmGetIssuerSignature.funcGetIssuerSignature != nil {
		return mmGetIssuerSignature.funcGetIssuerSignature()
	}
	mmGetIssuerSignature.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetIssuerSignature.")
	return
}

// GetIssuerSignatureAfterCounter returns a count of finished FullIntroductionReaderMock.GetIssuerSignature invocations
func (mmGetIssuerSignature *FullIntroductionReaderMock) GetIssuerSignatureAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerSignature.afterGetIssuerSignatureCounter)
}

// GetIssuerSignatureBeforeCounter returns a count of FullIntroductionReaderMock.GetIssuerSignature invocations
func (mmGetIssuerSignature *FullIntroductionReaderMock) GetIssuerSignatureBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIssuerSignature.beforeGetIssuerSignatureCounter)
}

// MinimockGetIssuerSignatureDone returns true if the count of the GetIssuerSignature invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetIssuerSignatureDone() bool {
	for _, e := range m.GetIssuerSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerSignature != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIssuerSignatureInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetIssuerSignatureInspect() {
	for _, e := range m.GetIssuerSignatureMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuerSignature")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIssuerSignatureMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuerSignature")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIssuerSignature != nil && mm_atomic.LoadUint64(&m.afterGetIssuerSignatureCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetIssuerSignature")
	}
}

type mFullIntroductionReaderMockGetNodePublicKey struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetNodePublicKeyExpectation
	expectations       []*FullIntroductionReaderMockGetNodePublicKeyExpectation
}

// FullIntroductionReaderMockGetNodePublicKeyExpectation specifies expectation struct of the FullIntroductionReader.GetNodePublicKey
type FullIntroductionReaderMockGetNodePublicKeyExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetNodePublicKeyResults
	Counter uint64
}

// FullIntroductionReaderMockGetNodePublicKeyResults contains results of the FullIntroductionReader.GetNodePublicKey
type FullIntroductionReaderMockGetNodePublicKeyResults struct {
	s1 cryptkit.SignatureKeyHolder
}

// Expect sets up expected params for FullIntroductionReader.GetNodePublicKey
func (mmGetNodePublicKey *mFullIntroductionReaderMockGetNodePublicKey) Expect() *mFullIntroductionReaderMockGetNodePublicKey {
	if mmGetNodePublicKey.mock.funcGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("FullIntroductionReaderMock.GetNodePublicKey mock is already set by Set")
	}

	if mmGetNodePublicKey.defaultExpectation == nil {
		mmGetNodePublicKey.defaultExpectation = &FullIntroductionReaderMockGetNodePublicKeyExpectation{}
	}

	return mmGetNodePublicKey
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetNodePublicKey
func (mmGetNodePublicKey *mFullIntroductionReaderMockGetNodePublicKey) Inspect(f func()) *mFullIntroductionReaderMockGetNodePublicKey {
	if mmGetNodePublicKey.mock.inspectFuncGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetNodePublicKey")
	}

	mmGetNodePublicKey.mock.inspectFuncGetNodePublicKey = f

	return mmGetNodePublicKey
}

// Return sets up results that will be returned by FullIntroductionReader.GetNodePublicKey
func (mmGetNodePublicKey *mFullIntroductionReaderMockGetNodePublicKey) Return(s1 cryptkit.SignatureKeyHolder) *FullIntroductionReaderMock {
	if mmGetNodePublicKey.mock.funcGetNodePublicKey != nil {
		mmGetNodePublicKey.mock.t.Fatalf("FullIntroductionReaderMock.GetNodePublicKey mock is already set by Set")
	}

	if mmGetNodePublicKey.defaultExpectation == nil {
		mmGetNodePublicKey.defaultExpectation = &FullIntroductionReaderMockGetNodePublicKeyExpectation{mock: mmGetNodePublicKey.mock}
	}
	mmGetNodePublicKey.defaultExpectation.results = &FullIntroductionReaderMockGetNodePublicKeyResults{s1}
	return mmGetNodePublicKey.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetNodePublicKey method
func (mmGetNodePublicKey *mFullIntroductionReaderMockGetNodePublicKey) Set(f func() (s1 cryptkit.SignatureKeyHolder)) *FullIntroductionReaderMock {
	if mmGetNodePublicKey.defaultExpectation != nil {
		mmGetNodePublicKey.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetNodePublicKey method")
	}

	if len(mmGetNodePublicKey.expectations) > 0 {
		mmGetNodePublicKey.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetNodePublicKey method")
	}

	mmGetNodePublicKey.mock.funcGetNodePublicKey = f
	return mmGetNodePublicKey.mock
}

// GetNodePublicKey implements FullIntroductionReader
func (mmGetNodePublicKey *FullIntroductionReaderMock) GetNodePublicKey() (s1 cryptkit.SignatureKeyHolder) {
	mm_atomic.AddUint64(&mmGetNodePublicKey.beforeGetNodePublicKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNodePublicKey.afterGetNodePublicKeyCounter, 1)

	if mmGetNodePublicKey.inspectFuncGetNodePublicKey != nil {
		mmGetNodePublicKey.inspectFuncGetNodePublicKey()
	}

	if mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation.Counter, 1)

		results := mmGetNodePublicKey.GetNodePublicKeyMock.defaultExpectation.results
		if results == nil {
			mmGetNodePublicKey.t.Fatal("No results are set for the FullIntroductionReaderMock.GetNodePublicKey")
		}
		return (*results).s1
	}
	if mmGetNodePublicKey.funcGetNodePublicKey != nil {
		return mmGetNodePublicKey.funcGetNodePublicKey()
	}
	mmGetNodePublicKey.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetNodePublicKey.")
	return
}

// GetNodePublicKeyAfterCounter returns a count of finished FullIntroductionReaderMock.GetNodePublicKey invocations
func (mmGetNodePublicKey *FullIntroductionReaderMock) GetNodePublicKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodePublicKey.afterGetNodePublicKeyCounter)
}

// GetNodePublicKeyBeforeCounter returns a count of FullIntroductionReaderMock.GetNodePublicKey invocations
func (mmGetNodePublicKey *FullIntroductionReaderMock) GetNodePublicKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodePublicKey.beforeGetNodePublicKeyCounter)
}

// MinimockGetNodePublicKeyDone returns true if the count of the GetNodePublicKey invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetNodePublicKeyDone() bool {
	for _, e := range m.GetNodePublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodePublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodePublicKey != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNodePublicKeyInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetNodePublicKeyInspect() {
	for _, e := range m.GetNodePublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetNodePublicKey")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodePublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetNodePublicKey")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodePublicKey != nil && mm_atomic.LoadUint64(&m.afterGetNodePublicKeyCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetNodePublicKey")
	}
}

type mFullIntroductionReaderMockGetPowerLevels struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetPowerLevelsExpectation
	expectations       []*FullIntroductionReaderMockGetPowerLevelsExpectation
}

// FullIntroductionReaderMockGetPowerLevelsExpectation specifies expectation struct of the FullIntroductionReader.GetPowerLevels
type FullIntroductionReaderMockGetPowerLevelsExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetPowerLevelsResults
	Counter uint64
}

// FullIntroductionReaderMockGetPowerLevelsResults contains results of the FullIntroductionReader.GetPowerLevels
type FullIntroductionReaderMockGetPowerLevelsResults struct {
	p1 member.PowerSet
}

// Expect sets up expected params for FullIntroductionReader.GetPowerLevels
func (mmGetPowerLevels *mFullIntroductionReaderMockGetPowerLevels) Expect() *mFullIntroductionReaderMockGetPowerLevels {
	if mmGetPowerLevels.mock.funcGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("FullIntroductionReaderMock.GetPowerLevels mock is already set by Set")
	}

	if mmGetPowerLevels.defaultExpectation == nil {
		mmGetPowerLevels.defaultExpectation = &FullIntroductionReaderMockGetPowerLevelsExpectation{}
	}

	return mmGetPowerLevels
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetPowerLevels
func (mmGetPowerLevels *mFullIntroductionReaderMockGetPowerLevels) Inspect(f func()) *mFullIntroductionReaderMockGetPowerLevels {
	if mmGetPowerLevels.mock.inspectFuncGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetPowerLevels")
	}

	mmGetPowerLevels.mock.inspectFuncGetPowerLevels = f

	return mmGetPowerLevels
}

// Return sets up results that will be returned by FullIntroductionReader.GetPowerLevels
func (mmGetPowerLevels *mFullIntroductionReaderMockGetPowerLevels) Return(p1 member.PowerSet) *FullIntroductionReaderMock {
	if mmGetPowerLevels.mock.funcGetPowerLevels != nil {
		mmGetPowerLevels.mock.t.Fatalf("FullIntroductionReaderMock.GetPowerLevels mock is already set by Set")
	}

	if mmGetPowerLevels.defaultExpectation == nil {
		mmGetPowerLevels.defaultExpectation = &FullIntroductionReaderMockGetPowerLevelsExpectation{mock: mmGetPowerLevels.mock}
	}
	mmGetPowerLevels.defaultExpectation.results = &FullIntroductionReaderMockGetPowerLevelsResults{p1}
	return mmGetPowerLevels.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetPowerLevels method
func (mmGetPowerLevels *mFullIntroductionReaderMockGetPowerLevels) Set(f func() (p1 member.PowerSet)) *FullIntroductionReaderMock {
	if mmGetPowerLevels.defaultExpectation != nil {
		mmGetPowerLevels.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetPowerLevels method")
	}

	if len(mmGetPowerLevels.expectations) > 0 {
		mmGetPowerLevels.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetPowerLevels method")
	}

	mmGetPowerLevels.mock.funcGetPowerLevels = f
	return mmGetPowerLevels.mock
}

// GetPowerLevels implements FullIntroductionReader
func (mmGetPowerLevels *FullIntroductionReaderMock) GetPowerLevels() (p1 member.PowerSet) {
	mm_atomic.AddUint64(&mmGetPowerLevels.beforeGetPowerLevelsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPowerLevels.afterGetPowerLevelsCounter, 1)

	if mmGetPowerLevels.inspectFuncGetPowerLevels != nil {
		mmGetPowerLevels.inspectFuncGetPowerLevels()
	}

	if mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation.Counter, 1)

		results := mmGetPowerLevels.GetPowerLevelsMock.defaultExpectation.results
		if results == nil {
			mmGetPowerLevels.t.Fatal("No results are set for the FullIntroductionReaderMock.GetPowerLevels")
		}
		return (*results).p1
	}
	if mmGetPowerLevels.funcGetPowerLevels != nil {
		return mmGetPowerLevels.funcGetPowerLevels()
	}
	mmGetPowerLevels.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetPowerLevels.")
	return
}

// GetPowerLevelsAfterCounter returns a count of finished FullIntroductionReaderMock.GetPowerLevels invocations
func (mmGetPowerLevels *FullIntroductionReaderMock) GetPowerLevelsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPowerLevels.afterGetPowerLevelsCounter)
}

// GetPowerLevelsBeforeCounter returns a count of FullIntroductionReaderMock.GetPowerLevels invocations
func (mmGetPowerLevels *FullIntroductionReaderMock) GetPowerLevelsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPowerLevels.beforeGetPowerLevelsCounter)
}

// MinimockGetPowerLevelsDone returns true if the count of the GetPowerLevels invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetPowerLevelsDone() bool {
	for _, e := range m.GetPowerLevelsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerLevelsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPowerLevels != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPowerLevelsInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetPowerLevelsInspect() {
	for _, e := range m.GetPowerLevelsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetPowerLevels")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPowerLevelsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetPowerLevels")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPowerLevels != nil && mm_atomic.LoadUint64(&m.afterGetPowerLevelsCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetPowerLevels")
	}
}

type mFullIntroductionReaderMockGetPrimaryRole struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetPrimaryRoleExpectation
	expectations       []*FullIntroductionReaderMockGetPrimaryRoleExpectation
}

// FullIntroductionReaderMockGetPrimaryRoleExpectation specifies expectation struct of the FullIntroductionReader.GetPrimaryRole
type FullIntroductionReaderMockGetPrimaryRoleExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetPrimaryRoleResults
	Counter uint64
}

// FullIntroductionReaderMockGetPrimaryRoleResults contains results of the FullIntroductionReader.GetPrimaryRole
type FullIntroductionReaderMockGetPrimaryRoleResults struct {
	p1 member.PrimaryRole
}

// Expect sets up expected params for FullIntroductionReader.GetPrimaryRole
func (mmGetPrimaryRole *mFullIntroductionReaderMockGetPrimaryRole) Expect() *mFullIntroductionReaderMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("FullIntroductionReaderMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &FullIntroductionReaderMockGetPrimaryRoleExpectation{}
	}

	return mmGetPrimaryRole
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetPrimaryRole
func (mmGetPrimaryRole *mFullIntroductionReaderMockGetPrimaryRole) Inspect(f func()) *mFullIntroductionReaderMockGetPrimaryRole {
	if mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetPrimaryRole")
	}

	mmGetPrimaryRole.mock.inspectFuncGetPrimaryRole = f

	return mmGetPrimaryRole
}

// Return sets up results that will be returned by FullIntroductionReader.GetPrimaryRole
func (mmGetPrimaryRole *mFullIntroductionReaderMockGetPrimaryRole) Return(p1 member.PrimaryRole) *FullIntroductionReaderMock {
	if mmGetPrimaryRole.mock.funcGetPrimaryRole != nil {
		mmGetPrimaryRole.mock.t.Fatalf("FullIntroductionReaderMock.GetPrimaryRole mock is already set by Set")
	}

	if mmGetPrimaryRole.defaultExpectation == nil {
		mmGetPrimaryRole.defaultExpectation = &FullIntroductionReaderMockGetPrimaryRoleExpectation{mock: mmGetPrimaryRole.mock}
	}
	mmGetPrimaryRole.defaultExpectation.results = &FullIntroductionReaderMockGetPrimaryRoleResults{p1}
	return mmGetPrimaryRole.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetPrimaryRole method
func (mmGetPrimaryRole *mFullIntroductionReaderMockGetPrimaryRole) Set(f func() (p1 member.PrimaryRole)) *FullIntroductionReaderMock {
	if mmGetPrimaryRole.defaultExpectation != nil {
		mmGetPrimaryRole.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetPrimaryRole method")
	}

	if len(mmGetPrimaryRole.expectations) > 0 {
		mmGetPrimaryRole.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetPrimaryRole method")
	}

	mmGetPrimaryRole.mock.funcGetPrimaryRole = f
	return mmGetPrimaryRole.mock
}

// GetPrimaryRole implements FullIntroductionReader
func (mmGetPrimaryRole *FullIntroductionReaderMock) GetPrimaryRole() (p1 member.PrimaryRole) {
	mm_atomic.AddUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter, 1)

	if mmGetPrimaryRole.inspectFuncGetPrimaryRole != nil {
		mmGetPrimaryRole.inspectFuncGetPrimaryRole()
	}

	if mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.Counter, 1)

		results := mmGetPrimaryRole.GetPrimaryRoleMock.defaultExpectation.results
		if results == nil {
			mmGetPrimaryRole.t.Fatal("No results are set for the FullIntroductionReaderMock.GetPrimaryRole")
		}
		return (*results).p1
	}
	if mmGetPrimaryRole.funcGetPrimaryRole != nil {
		return mmGetPrimaryRole.funcGetPrimaryRole()
	}
	mmGetPrimaryRole.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetPrimaryRole.")
	return
}

// GetPrimaryRoleAfterCounter returns a count of finished FullIntroductionReaderMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *FullIntroductionReaderMock) GetPrimaryRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.afterGetPrimaryRoleCounter)
}

// GetPrimaryRoleBeforeCounter returns a count of FullIntroductionReaderMock.GetPrimaryRole invocations
func (mmGetPrimaryRole *FullIntroductionReaderMock) GetPrimaryRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPrimaryRole.beforeGetPrimaryRoleCounter)
}

// MinimockGetPrimaryRoleDone returns true if the count of the GetPrimaryRole invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetPrimaryRoleDone() bool {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPrimaryRoleInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetPrimaryRoleInspect() {
	for _, e := range m.GetPrimaryRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetPrimaryRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPrimaryRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetPrimaryRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPrimaryRole != nil && mm_atomic.LoadUint64(&m.afterGetPrimaryRoleCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetPrimaryRole")
	}
}

type mFullIntroductionReaderMockGetReference struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetReferenceExpectation
	expectations       []*FullIntroductionReaderMockGetReferenceExpectation
}

// FullIntroductionReaderMockGetReferenceExpectation specifies expectation struct of the FullIntroductionReader.GetReference
type FullIntroductionReaderMockGetReferenceExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetReferenceResults
	Counter uint64
}

// FullIntroductionReaderMockGetReferenceResults contains results of the FullIntroductionReader.GetReference
type FullIntroductionReaderMockGetReferenceResults struct {
	r1 insolar.Reference
}

// Expect sets up expected params for FullIntroductionReader.GetReference
func (mmGetReference *mFullIntroductionReaderMockGetReference) Expect() *mFullIntroductionReaderMockGetReference {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("FullIntroductionReaderMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &FullIntroductionReaderMockGetReferenceExpectation{}
	}

	return mmGetReference
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetReference
func (mmGetReference *mFullIntroductionReaderMockGetReference) Inspect(f func()) *mFullIntroductionReaderMockGetReference {
	if mmGetReference.mock.inspectFuncGetReference != nil {
		mmGetReference.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetReference")
	}

	mmGetReference.mock.inspectFuncGetReference = f

	return mmGetReference
}

// Return sets up results that will be returned by FullIntroductionReader.GetReference
func (mmGetReference *mFullIntroductionReaderMockGetReference) Return(r1 insolar.Reference) *FullIntroductionReaderMock {
	if mmGetReference.mock.funcGetReference != nil {
		mmGetReference.mock.t.Fatalf("FullIntroductionReaderMock.GetReference mock is already set by Set")
	}

	if mmGetReference.defaultExpectation == nil {
		mmGetReference.defaultExpectation = &FullIntroductionReaderMockGetReferenceExpectation{mock: mmGetReference.mock}
	}
	mmGetReference.defaultExpectation.results = &FullIntroductionReaderMockGetReferenceResults{r1}
	return mmGetReference.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetReference method
func (mmGetReference *mFullIntroductionReaderMockGetReference) Set(f func() (r1 insolar.Reference)) *FullIntroductionReaderMock {
	if mmGetReference.defaultExpectation != nil {
		mmGetReference.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetReference method")
	}

	if len(mmGetReference.expectations) > 0 {
		mmGetReference.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetReference method")
	}

	mmGetReference.mock.funcGetReference = f
	return mmGetReference.mock
}

// GetReference implements FullIntroductionReader
func (mmGetReference *FullIntroductionReaderMock) GetReference() (r1 insolar.Reference) {
	mm_atomic.AddUint64(&mmGetReference.beforeGetReferenceCounter, 1)
	defer mm_atomic.AddUint64(&mmGetReference.afterGetReferenceCounter, 1)

	if mmGetReference.inspectFuncGetReference != nil {
		mmGetReference.inspectFuncGetReference()
	}

	if mmGetReference.GetReferenceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetReference.GetReferenceMock.defaultExpectation.Counter, 1)

		results := mmGetReference.GetReferenceMock.defaultExpectation.results
		if results == nil {
			mmGetReference.t.Fatal("No results are set for the FullIntroductionReaderMock.GetReference")
		}
		return (*results).r1
	}
	if mmGetReference.funcGetReference != nil {
		return mmGetReference.funcGetReference()
	}
	mmGetReference.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetReference.")
	return
}

// GetReferenceAfterCounter returns a count of finished FullIntroductionReaderMock.GetReference invocations
func (mmGetReference *FullIntroductionReaderMock) GetReferenceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.afterGetReferenceCounter)
}

// GetReferenceBeforeCounter returns a count of FullIntroductionReaderMock.GetReference invocations
func (mmGetReference *FullIntroductionReaderMock) GetReferenceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetReference.beforeGetReferenceCounter)
}

// MinimockGetReferenceDone returns true if the count of the GetReference invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetReferenceDone() bool {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetReferenceInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetReferenceInspect() {
	for _, e := range m.GetReferenceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetReference")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetReferenceMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetReference")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetReference != nil && mm_atomic.LoadUint64(&m.afterGetReferenceCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetReference")
	}
}

type mFullIntroductionReaderMockGetSpecialRoles struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetSpecialRolesExpectation
	expectations       []*FullIntroductionReaderMockGetSpecialRolesExpectation
}

// FullIntroductionReaderMockGetSpecialRolesExpectation specifies expectation struct of the FullIntroductionReader.GetSpecialRoles
type FullIntroductionReaderMockGetSpecialRolesExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetSpecialRolesResults
	Counter uint64
}

// FullIntroductionReaderMockGetSpecialRolesResults contains results of the FullIntroductionReader.GetSpecialRoles
type FullIntroductionReaderMockGetSpecialRolesResults struct {
	s1 member.SpecialRole
}

// Expect sets up expected params for FullIntroductionReader.GetSpecialRoles
func (mmGetSpecialRoles *mFullIntroductionReaderMockGetSpecialRoles) Expect() *mFullIntroductionReaderMockGetSpecialRoles {
	if mmGetSpecialRoles.mock.funcGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("FullIntroductionReaderMock.GetSpecialRoles mock is already set by Set")
	}

	if mmGetSpecialRoles.defaultExpectation == nil {
		mmGetSpecialRoles.defaultExpectation = &FullIntroductionReaderMockGetSpecialRolesExpectation{}
	}

	return mmGetSpecialRoles
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetSpecialRoles
func (mmGetSpecialRoles *mFullIntroductionReaderMockGetSpecialRoles) Inspect(f func()) *mFullIntroductionReaderMockGetSpecialRoles {
	if mmGetSpecialRoles.mock.inspectFuncGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetSpecialRoles")
	}

	mmGetSpecialRoles.mock.inspectFuncGetSpecialRoles = f

	return mmGetSpecialRoles
}

// Return sets up results that will be returned by FullIntroductionReader.GetSpecialRoles
func (mmGetSpecialRoles *mFullIntroductionReaderMockGetSpecialRoles) Return(s1 member.SpecialRole) *FullIntroductionReaderMock {
	if mmGetSpecialRoles.mock.funcGetSpecialRoles != nil {
		mmGetSpecialRoles.mock.t.Fatalf("FullIntroductionReaderMock.GetSpecialRoles mock is already set by Set")
	}

	if mmGetSpecialRoles.defaultExpectation == nil {
		mmGetSpecialRoles.defaultExpectation = &FullIntroductionReaderMockGetSpecialRolesExpectation{mock: mmGetSpecialRoles.mock}
	}
	mmGetSpecialRoles.defaultExpectation.results = &FullIntroductionReaderMockGetSpecialRolesResults{s1}
	return mmGetSpecialRoles.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetSpecialRoles method
func (mmGetSpecialRoles *mFullIntroductionReaderMockGetSpecialRoles) Set(f func() (s1 member.SpecialRole)) *FullIntroductionReaderMock {
	if mmGetSpecialRoles.defaultExpectation != nil {
		mmGetSpecialRoles.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetSpecialRoles method")
	}

	if len(mmGetSpecialRoles.expectations) > 0 {
		mmGetSpecialRoles.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetSpecialRoles method")
	}

	mmGetSpecialRoles.mock.funcGetSpecialRoles = f
	return mmGetSpecialRoles.mock
}

// GetSpecialRoles implements FullIntroductionReader
func (mmGetSpecialRoles *FullIntroductionReaderMock) GetSpecialRoles() (s1 member.SpecialRole) {
	mm_atomic.AddUint64(&mmGetSpecialRoles.beforeGetSpecialRolesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSpecialRoles.afterGetSpecialRolesCounter, 1)

	if mmGetSpecialRoles.inspectFuncGetSpecialRoles != nil {
		mmGetSpecialRoles.inspectFuncGetSpecialRoles()
	}

	if mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation.Counter, 1)

		results := mmGetSpecialRoles.GetSpecialRolesMock.defaultExpectation.results
		if results == nil {
			mmGetSpecialRoles.t.Fatal("No results are set for the FullIntroductionReaderMock.GetSpecialRoles")
		}
		return (*results).s1
	}
	if mmGetSpecialRoles.funcGetSpecialRoles != nil {
		return mmGetSpecialRoles.funcGetSpecialRoles()
	}
	mmGetSpecialRoles.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetSpecialRoles.")
	return
}

// GetSpecialRolesAfterCounter returns a count of finished FullIntroductionReaderMock.GetSpecialRoles invocations
func (mmGetSpecialRoles *FullIntroductionReaderMock) GetSpecialRolesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpecialRoles.afterGetSpecialRolesCounter)
}

// GetSpecialRolesBeforeCounter returns a count of FullIntroductionReaderMock.GetSpecialRoles invocations
func (mmGetSpecialRoles *FullIntroductionReaderMock) GetSpecialRolesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSpecialRoles.beforeGetSpecialRolesCounter)
}

// MinimockGetSpecialRolesDone returns true if the count of the GetSpecialRoles invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetSpecialRolesDone() bool {
	for _, e := range m.GetSpecialRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpecialRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpecialRoles != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSpecialRolesInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetSpecialRolesInspect() {
	for _, e := range m.GetSpecialRolesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetSpecialRoles")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSpecialRolesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetSpecialRoles")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSpecialRoles != nil && mm_atomic.LoadUint64(&m.afterGetSpecialRolesCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetSpecialRoles")
	}
}

type mFullIntroductionReaderMockGetStartPower struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetStartPowerExpectation
	expectations       []*FullIntroductionReaderMockGetStartPowerExpectation
}

// FullIntroductionReaderMockGetStartPowerExpectation specifies expectation struct of the FullIntroductionReader.GetStartPower
type FullIntroductionReaderMockGetStartPowerExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetStartPowerResults
	Counter uint64
}

// FullIntroductionReaderMockGetStartPowerResults contains results of the FullIntroductionReader.GetStartPower
type FullIntroductionReaderMockGetStartPowerResults struct {
	p1 member.Power
}

// Expect sets up expected params for FullIntroductionReader.GetStartPower
func (mmGetStartPower *mFullIntroductionReaderMockGetStartPower) Expect() *mFullIntroductionReaderMockGetStartPower {
	if mmGetStartPower.mock.funcGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("FullIntroductionReaderMock.GetStartPower mock is already set by Set")
	}

	if mmGetStartPower.defaultExpectation == nil {
		mmGetStartPower.defaultExpectation = &FullIntroductionReaderMockGetStartPowerExpectation{}
	}

	return mmGetStartPower
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetStartPower
func (mmGetStartPower *mFullIntroductionReaderMockGetStartPower) Inspect(f func()) *mFullIntroductionReaderMockGetStartPower {
	if mmGetStartPower.mock.inspectFuncGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetStartPower")
	}

	mmGetStartPower.mock.inspectFuncGetStartPower = f

	return mmGetStartPower
}

// Return sets up results that will be returned by FullIntroductionReader.GetStartPower
func (mmGetStartPower *mFullIntroductionReaderMockGetStartPower) Return(p1 member.Power) *FullIntroductionReaderMock {
	if mmGetStartPower.mock.funcGetStartPower != nil {
		mmGetStartPower.mock.t.Fatalf("FullIntroductionReaderMock.GetStartPower mock is already set by Set")
	}

	if mmGetStartPower.defaultExpectation == nil {
		mmGetStartPower.defaultExpectation = &FullIntroductionReaderMockGetStartPowerExpectation{mock: mmGetStartPower.mock}
	}
	mmGetStartPower.defaultExpectation.results = &FullIntroductionReaderMockGetStartPowerResults{p1}
	return mmGetStartPower.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetStartPower method
func (mmGetStartPower *mFullIntroductionReaderMockGetStartPower) Set(f func() (p1 member.Power)) *FullIntroductionReaderMock {
	if mmGetStartPower.defaultExpectation != nil {
		mmGetStartPower.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetStartPower method")
	}

	if len(mmGetStartPower.expectations) > 0 {
		mmGetStartPower.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetStartPower method")
	}

	mmGetStartPower.mock.funcGetStartPower = f
	return mmGetStartPower.mock
}

// GetStartPower implements FullIntroductionReader
func (mmGetStartPower *FullIntroductionReaderMock) GetStartPower() (p1 member.Power) {
	mm_atomic.AddUint64(&mmGetStartPower.beforeGetStartPowerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStartPower.afterGetStartPowerCounter, 1)

	if mmGetStartPower.inspectFuncGetStartPower != nil {
		mmGetStartPower.inspectFuncGetStartPower()
	}

	if mmGetStartPower.GetStartPowerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStartPower.GetStartPowerMock.defaultExpectation.Counter, 1)

		results := mmGetStartPower.GetStartPowerMock.defaultExpectation.results
		if results == nil {
			mmGetStartPower.t.Fatal("No results are set for the FullIntroductionReaderMock.GetStartPower")
		}
		return (*results).p1
	}
	if mmGetStartPower.funcGetStartPower != nil {
		return mmGetStartPower.funcGetStartPower()
	}
	mmGetStartPower.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetStartPower.")
	return
}

// GetStartPowerAfterCounter returns a count of finished FullIntroductionReaderMock.GetStartPower invocations
func (mmGetStartPower *FullIntroductionReaderMock) GetStartPowerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStartPower.afterGetStartPowerCounter)
}

// GetStartPowerBeforeCounter returns a count of FullIntroductionReaderMock.GetStartPower invocations
func (mmGetStartPower *FullIntroductionReaderMock) GetStartPowerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStartPower.beforeGetStartPowerCounter)
}

// MinimockGetStartPowerDone returns true if the count of the GetStartPower invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetStartPowerDone() bool {
	for _, e := range m.GetStartPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStartPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStartPower != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStartPowerInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetStartPowerInspect() {
	for _, e := range m.GetStartPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetStartPower")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStartPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetStartPower")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStartPower != nil && mm_atomic.LoadUint64(&m.afterGetStartPowerCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetStartPower")
	}
}

type mFullIntroductionReaderMockGetStaticNodeID struct {
	mock               *FullIntroductionReaderMock
	defaultExpectation *FullIntroductionReaderMockGetStaticNodeIDExpectation
	expectations       []*FullIntroductionReaderMockGetStaticNodeIDExpectation
}

// FullIntroductionReaderMockGetStaticNodeIDExpectation specifies expectation struct of the FullIntroductionReader.GetStaticNodeID
type FullIntroductionReaderMockGetStaticNodeIDExpectation struct {
	mock *FullIntroductionReaderMock

	results *FullIntroductionReaderMockGetStaticNodeIDResults
	Counter uint64
}

// FullIntroductionReaderMockGetStaticNodeIDResults contains results of the FullIntroductionReader.GetStaticNodeID
type FullIntroductionReaderMockGetStaticNodeIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for FullIntroductionReader.GetStaticNodeID
func (mmGetStaticNodeID *mFullIntroductionReaderMockGetStaticNodeID) Expect() *mFullIntroductionReaderMockGetStaticNodeID {
	if mmGetStaticNodeID.mock.funcGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("FullIntroductionReaderMock.GetStaticNodeID mock is already set by Set")
	}

	if mmGetStaticNodeID.defaultExpectation == nil {
		mmGetStaticNodeID.defaultExpectation = &FullIntroductionReaderMockGetStaticNodeIDExpectation{}
	}

	return mmGetStaticNodeID
}

// Inspect accepts an inspector function that has same arguments as the FullIntroductionReader.GetStaticNodeID
func (mmGetStaticNodeID *mFullIntroductionReaderMockGetStaticNodeID) Inspect(f func()) *mFullIntroductionReaderMockGetStaticNodeID {
	if mmGetStaticNodeID.mock.inspectFuncGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("Inspect function is already set for FullIntroductionReaderMock.GetStaticNodeID")
	}

	mmGetStaticNodeID.mock.inspectFuncGetStaticNodeID = f

	return mmGetStaticNodeID
}

// Return sets up results that will be returned by FullIntroductionReader.GetStaticNodeID
func (mmGetStaticNodeID *mFullIntroductionReaderMockGetStaticNodeID) Return(s1 insolar.ShortNodeID) *FullIntroductionReaderMock {
	if mmGetStaticNodeID.mock.funcGetStaticNodeID != nil {
		mmGetStaticNodeID.mock.t.Fatalf("FullIntroductionReaderMock.GetStaticNodeID mock is already set by Set")
	}

	if mmGetStaticNodeID.defaultExpectation == nil {
		mmGetStaticNodeID.defaultExpectation = &FullIntroductionReaderMockGetStaticNodeIDExpectation{mock: mmGetStaticNodeID.mock}
	}
	mmGetStaticNodeID.defaultExpectation.results = &FullIntroductionReaderMockGetStaticNodeIDResults{s1}
	return mmGetStaticNodeID.mock
}

//Set uses given function f to mock the FullIntroductionReader.GetStaticNodeID method
func (mmGetStaticNodeID *mFullIntroductionReaderMockGetStaticNodeID) Set(f func() (s1 insolar.ShortNodeID)) *FullIntroductionReaderMock {
	if mmGetStaticNodeID.defaultExpectation != nil {
		mmGetStaticNodeID.mock.t.Fatalf("Default expectation is already set for the FullIntroductionReader.GetStaticNodeID method")
	}

	if len(mmGetStaticNodeID.expectations) > 0 {
		mmGetStaticNodeID.mock.t.Fatalf("Some expectations are already set for the FullIntroductionReader.GetStaticNodeID method")
	}

	mmGetStaticNodeID.mock.funcGetStaticNodeID = f
	return mmGetStaticNodeID.mock
}

// GetStaticNodeID implements FullIntroductionReader
func (mmGetStaticNodeID *FullIntroductionReaderMock) GetStaticNodeID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetStaticNodeID.beforeGetStaticNodeIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStaticNodeID.afterGetStaticNodeIDCounter, 1)

	if mmGetStaticNodeID.inspectFuncGetStaticNodeID != nil {
		mmGetStaticNodeID.inspectFuncGetStaticNodeID()
	}

	if mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation.Counter, 1)

		results := mmGetStaticNodeID.GetStaticNodeIDMock.defaultExpectation.results
		if results == nil {
			mmGetStaticNodeID.t.Fatal("No results are set for the FullIntroductionReaderMock.GetStaticNodeID")
		}
		return (*results).s1
	}
	if mmGetStaticNodeID.funcGetStaticNodeID != nil {
		return mmGetStaticNodeID.funcGetStaticNodeID()
	}
	mmGetStaticNodeID.t.Fatalf("Unexpected call to FullIntroductionReaderMock.GetStaticNodeID.")
	return
}

// GetStaticNodeIDAfterCounter returns a count of finished FullIntroductionReaderMock.GetStaticNodeID invocations
func (mmGetStaticNodeID *FullIntroductionReaderMock) GetStaticNodeIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStaticNodeID.afterGetStaticNodeIDCounter)
}

// GetStaticNodeIDBeforeCounter returns a count of FullIntroductionReaderMock.GetStaticNodeID invocations
func (mmGetStaticNodeID *FullIntroductionReaderMock) GetStaticNodeIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStaticNodeID.beforeGetStaticNodeIDCounter)
}

// MinimockGetStaticNodeIDDone returns true if the count of the GetStaticNodeID invocations corresponds
// the number of defined expectations
func (m *FullIntroductionReaderMock) MinimockGetStaticNodeIDDone() bool {
	for _, e := range m.GetStaticNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStaticNodeID != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStaticNodeIDInspect logs each unmet expectation
func (m *FullIntroductionReaderMock) MinimockGetStaticNodeIDInspect() {
	for _, e := range m.GetStaticNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to FullIntroductionReaderMock.GetStaticNodeID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetStaticNodeID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStaticNodeID != nil && mm_atomic.LoadUint64(&m.afterGetStaticNodeIDCounter) < 1 {
		m.t.Error("Expected call to FullIntroductionReaderMock.GetStaticNodeID")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FullIntroductionReaderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetBriefIntroSignedDigestInspect()

		m.MinimockGetDefaultEndpointInspect()

		m.MinimockGetExtraEndpointsInspect()

		m.MinimockGetIssuedAtPulseInspect()

		m.MinimockGetIssuedAtTimeInspect()

		m.MinimockGetIssuerIDInspect()

		m.MinimockGetIssuerSignatureInspect()

		m.MinimockGetNodePublicKeyInspect()

		m.MinimockGetPowerLevelsInspect()

		m.MinimockGetPrimaryRoleInspect()

		m.MinimockGetReferenceInspect()

		m.MinimockGetSpecialRolesInspect()

		m.MinimockGetStartPowerInspect()

		m.MinimockGetStaticNodeIDInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FullIntroductionReaderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FullIntroductionReaderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetBriefIntroSignedDigestDone() &&
		m.MinimockGetDefaultEndpointDone() &&
		m.MinimockGetExtraEndpointsDone() &&
		m.MinimockGetIssuedAtPulseDone() &&
		m.MinimockGetIssuedAtTimeDone() &&
		m.MinimockGetIssuerIDDone() &&
		m.MinimockGetIssuerSignatureDone() &&
		m.MinimockGetNodePublicKeyDone() &&
		m.MinimockGetPowerLevelsDone() &&
		m.MinimockGetPrimaryRoleDone() &&
		m.MinimockGetReferenceDone() &&
		m.MinimockGetSpecialRolesDone() &&
		m.MinimockGetStartPowerDone() &&
		m.MinimockGetStaticNodeIDDone()
}
