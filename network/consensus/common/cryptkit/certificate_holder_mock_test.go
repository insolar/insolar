package cryptkit

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// CertificateHolderMock implements CertificateHolder
type CertificateHolderMock struct {
	t minimock.Tester

	funcGetPublicKey          func() (s1 SignatureKeyHolder)
	inspectFuncGetPublicKey   func()
	afterGetPublicKeyCounter  uint64
	beforeGetPublicKeyCounter uint64
	GetPublicKeyMock          mCertificateHolderMockGetPublicKey

	funcIsValidForHostAddress          func(HostAddress string) (b1 bool)
	inspectFuncIsValidForHostAddress   func(HostAddress string)
	afterIsValidForHostAddressCounter  uint64
	beforeIsValidForHostAddressCounter uint64
	IsValidForHostAddressMock          mCertificateHolderMockIsValidForHostAddress
}

// NewCertificateHolderMock returns a mock for CertificateHolder
func NewCertificateHolderMock(t minimock.Tester) *CertificateHolderMock {
	m := &CertificateHolderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetPublicKeyMock = mCertificateHolderMockGetPublicKey{mock: m}

	m.IsValidForHostAddressMock = mCertificateHolderMockIsValidForHostAddress{mock: m}
	m.IsValidForHostAddressMock.callArgs = []*CertificateHolderMockIsValidForHostAddressParams{}

	return m
}

type mCertificateHolderMockGetPublicKey struct {
	mock               *CertificateHolderMock
	defaultExpectation *CertificateHolderMockGetPublicKeyExpectation
	expectations       []*CertificateHolderMockGetPublicKeyExpectation
}

// CertificateHolderMockGetPublicKeyExpectation specifies expectation struct of the CertificateHolder.GetPublicKey
type CertificateHolderMockGetPublicKeyExpectation struct {
	mock *CertificateHolderMock

	results *CertificateHolderMockGetPublicKeyResults
	Counter uint64
}

// CertificateHolderMockGetPublicKeyResults contains results of the CertificateHolder.GetPublicKey
type CertificateHolderMockGetPublicKeyResults struct {
	s1 SignatureKeyHolder
}

// Expect sets up expected params for CertificateHolder.GetPublicKey
func (mmGetPublicKey *mCertificateHolderMockGetPublicKey) Expect() *mCertificateHolderMockGetPublicKey {
	if mmGetPublicKey.mock.funcGetPublicKey != nil {
		mmGetPublicKey.mock.t.Fatalf("CertificateHolderMock.GetPublicKey mock is already set by Set")
	}

	if mmGetPublicKey.defaultExpectation == nil {
		mmGetPublicKey.defaultExpectation = &CertificateHolderMockGetPublicKeyExpectation{}
	}

	return mmGetPublicKey
}

// Inspect accepts an inspector function that has same arguments as the CertificateHolder.GetPublicKey
func (mmGetPublicKey *mCertificateHolderMockGetPublicKey) Inspect(f func()) *mCertificateHolderMockGetPublicKey {
	if mmGetPublicKey.mock.inspectFuncGetPublicKey != nil {
		mmGetPublicKey.mock.t.Fatalf("Inspect function is already set for CertificateHolderMock.GetPublicKey")
	}

	mmGetPublicKey.mock.inspectFuncGetPublicKey = f

	return mmGetPublicKey
}

// Return sets up results that will be returned by CertificateHolder.GetPublicKey
func (mmGetPublicKey *mCertificateHolderMockGetPublicKey) Return(s1 SignatureKeyHolder) *CertificateHolderMock {
	if mmGetPublicKey.mock.funcGetPublicKey != nil {
		mmGetPublicKey.mock.t.Fatalf("CertificateHolderMock.GetPublicKey mock is already set by Set")
	}

	if mmGetPublicKey.defaultExpectation == nil {
		mmGetPublicKey.defaultExpectation = &CertificateHolderMockGetPublicKeyExpectation{mock: mmGetPublicKey.mock}
	}
	mmGetPublicKey.defaultExpectation.results = &CertificateHolderMockGetPublicKeyResults{s1}
	return mmGetPublicKey.mock
}

//Set uses given function f to mock the CertificateHolder.GetPublicKey method
func (mmGetPublicKey *mCertificateHolderMockGetPublicKey) Set(f func() (s1 SignatureKeyHolder)) *CertificateHolderMock {
	if mmGetPublicKey.defaultExpectation != nil {
		mmGetPublicKey.mock.t.Fatalf("Default expectation is already set for the CertificateHolder.GetPublicKey method")
	}

	if len(mmGetPublicKey.expectations) > 0 {
		mmGetPublicKey.mock.t.Fatalf("Some expectations are already set for the CertificateHolder.GetPublicKey method")
	}

	mmGetPublicKey.mock.funcGetPublicKey = f
	return mmGetPublicKey.mock
}

// GetPublicKey implements CertificateHolder
func (mmGetPublicKey *CertificateHolderMock) GetPublicKey() (s1 SignatureKeyHolder) {
	mm_atomic.AddUint64(&mmGetPublicKey.beforeGetPublicKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPublicKey.afterGetPublicKeyCounter, 1)

	if mmGetPublicKey.inspectFuncGetPublicKey != nil {
		mmGetPublicKey.inspectFuncGetPublicKey()
	}

	if mmGetPublicKey.GetPublicKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPublicKey.GetPublicKeyMock.defaultExpectation.Counter, 1)

		results := mmGetPublicKey.GetPublicKeyMock.defaultExpectation.results
		if results == nil {
			mmGetPublicKey.t.Fatal("No results are set for the CertificateHolderMock.GetPublicKey")
		}
		return (*results).s1
	}
	if mmGetPublicKey.funcGetPublicKey != nil {
		return mmGetPublicKey.funcGetPublicKey()
	}
	mmGetPublicKey.t.Fatalf("Unexpected call to CertificateHolderMock.GetPublicKey.")
	return
}

// GetPublicKeyAfterCounter returns a count of finished CertificateHolderMock.GetPublicKey invocations
func (mmGetPublicKey *CertificateHolderMock) GetPublicKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPublicKey.afterGetPublicKeyCounter)
}

// GetPublicKeyBeforeCounter returns a count of CertificateHolderMock.GetPublicKey invocations
func (mmGetPublicKey *CertificateHolderMock) GetPublicKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPublicKey.beforeGetPublicKeyCounter)
}

// MinimockGetPublicKeyDone returns true if the count of the GetPublicKey invocations corresponds
// the number of defined expectations
func (m *CertificateHolderMock) MinimockGetPublicKeyDone() bool {
	for _, e := range m.GetPublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPublicKey != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPublicKeyInspect logs each unmet expectation
func (m *CertificateHolderMock) MinimockGetPublicKeyInspect() {
	for _, e := range m.GetPublicKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to CertificateHolderMock.GetPublicKey")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPublicKeyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyCounter) < 1 {
		m.t.Error("Expected call to CertificateHolderMock.GetPublicKey")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPublicKey != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyCounter) < 1 {
		m.t.Error("Expected call to CertificateHolderMock.GetPublicKey")
	}
}

type mCertificateHolderMockIsValidForHostAddress struct {
	mock               *CertificateHolderMock
	defaultExpectation *CertificateHolderMockIsValidForHostAddressExpectation
	expectations       []*CertificateHolderMockIsValidForHostAddressExpectation

	callArgs []*CertificateHolderMockIsValidForHostAddressParams
	mutex    sync.RWMutex
}

// CertificateHolderMockIsValidForHostAddressExpectation specifies expectation struct of the CertificateHolder.IsValidForHostAddress
type CertificateHolderMockIsValidForHostAddressExpectation struct {
	mock    *CertificateHolderMock
	params  *CertificateHolderMockIsValidForHostAddressParams
	results *CertificateHolderMockIsValidForHostAddressResults
	Counter uint64
}

// CertificateHolderMockIsValidForHostAddressParams contains parameters of the CertificateHolder.IsValidForHostAddress
type CertificateHolderMockIsValidForHostAddressParams struct {
	HostAddress string
}

// CertificateHolderMockIsValidForHostAddressResults contains results of the CertificateHolder.IsValidForHostAddress
type CertificateHolderMockIsValidForHostAddressResults struct {
	b1 bool
}

// Expect sets up expected params for CertificateHolder.IsValidForHostAddress
func (mmIsValidForHostAddress *mCertificateHolderMockIsValidForHostAddress) Expect(HostAddress string) *mCertificateHolderMockIsValidForHostAddress {
	if mmIsValidForHostAddress.mock.funcIsValidForHostAddress != nil {
		mmIsValidForHostAddress.mock.t.Fatalf("CertificateHolderMock.IsValidForHostAddress mock is already set by Set")
	}

	if mmIsValidForHostAddress.defaultExpectation == nil {
		mmIsValidForHostAddress.defaultExpectation = &CertificateHolderMockIsValidForHostAddressExpectation{}
	}

	mmIsValidForHostAddress.defaultExpectation.params = &CertificateHolderMockIsValidForHostAddressParams{HostAddress}
	for _, e := range mmIsValidForHostAddress.expectations {
		if minimock.Equal(e.params, mmIsValidForHostAddress.defaultExpectation.params) {
			mmIsValidForHostAddress.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIsValidForHostAddress.defaultExpectation.params)
		}
	}

	return mmIsValidForHostAddress
}

// Inspect accepts an inspector function that has same arguments as the CertificateHolder.IsValidForHostAddress
func (mmIsValidForHostAddress *mCertificateHolderMockIsValidForHostAddress) Inspect(f func(HostAddress string)) *mCertificateHolderMockIsValidForHostAddress {
	if mmIsValidForHostAddress.mock.inspectFuncIsValidForHostAddress != nil {
		mmIsValidForHostAddress.mock.t.Fatalf("Inspect function is already set for CertificateHolderMock.IsValidForHostAddress")
	}

	mmIsValidForHostAddress.mock.inspectFuncIsValidForHostAddress = f

	return mmIsValidForHostAddress
}

// Return sets up results that will be returned by CertificateHolder.IsValidForHostAddress
func (mmIsValidForHostAddress *mCertificateHolderMockIsValidForHostAddress) Return(b1 bool) *CertificateHolderMock {
	if mmIsValidForHostAddress.mock.funcIsValidForHostAddress != nil {
		mmIsValidForHostAddress.mock.t.Fatalf("CertificateHolderMock.IsValidForHostAddress mock is already set by Set")
	}

	if mmIsValidForHostAddress.defaultExpectation == nil {
		mmIsValidForHostAddress.defaultExpectation = &CertificateHolderMockIsValidForHostAddressExpectation{mock: mmIsValidForHostAddress.mock}
	}
	mmIsValidForHostAddress.defaultExpectation.results = &CertificateHolderMockIsValidForHostAddressResults{b1}
	return mmIsValidForHostAddress.mock
}

//Set uses given function f to mock the CertificateHolder.IsValidForHostAddress method
func (mmIsValidForHostAddress *mCertificateHolderMockIsValidForHostAddress) Set(f func(HostAddress string) (b1 bool)) *CertificateHolderMock {
	if mmIsValidForHostAddress.defaultExpectation != nil {
		mmIsValidForHostAddress.mock.t.Fatalf("Default expectation is already set for the CertificateHolder.IsValidForHostAddress method")
	}

	if len(mmIsValidForHostAddress.expectations) > 0 {
		mmIsValidForHostAddress.mock.t.Fatalf("Some expectations are already set for the CertificateHolder.IsValidForHostAddress method")
	}

	mmIsValidForHostAddress.mock.funcIsValidForHostAddress = f
	return mmIsValidForHostAddress.mock
}

// When sets expectation for the CertificateHolder.IsValidForHostAddress which will trigger the result defined by the following
// Then helper
func (mmIsValidForHostAddress *mCertificateHolderMockIsValidForHostAddress) When(HostAddress string) *CertificateHolderMockIsValidForHostAddressExpectation {
	if mmIsValidForHostAddress.mock.funcIsValidForHostAddress != nil {
		mmIsValidForHostAddress.mock.t.Fatalf("CertificateHolderMock.IsValidForHostAddress mock is already set by Set")
	}

	expectation := &CertificateHolderMockIsValidForHostAddressExpectation{
		mock:   mmIsValidForHostAddress.mock,
		params: &CertificateHolderMockIsValidForHostAddressParams{HostAddress},
	}
	mmIsValidForHostAddress.expectations = append(mmIsValidForHostAddress.expectations, expectation)
	return expectation
}

// Then sets up CertificateHolder.IsValidForHostAddress return parameters for the expectation previously defined by the When method
func (e *CertificateHolderMockIsValidForHostAddressExpectation) Then(b1 bool) *CertificateHolderMock {
	e.results = &CertificateHolderMockIsValidForHostAddressResults{b1}
	return e.mock
}

// IsValidForHostAddress implements CertificateHolder
func (mmIsValidForHostAddress *CertificateHolderMock) IsValidForHostAddress(HostAddress string) (b1 bool) {
	mm_atomic.AddUint64(&mmIsValidForHostAddress.beforeIsValidForHostAddressCounter, 1)
	defer mm_atomic.AddUint64(&mmIsValidForHostAddress.afterIsValidForHostAddressCounter, 1)

	if mmIsValidForHostAddress.inspectFuncIsValidForHostAddress != nil {
		mmIsValidForHostAddress.inspectFuncIsValidForHostAddress(HostAddress)
	}

	params := &CertificateHolderMockIsValidForHostAddressParams{HostAddress}

	// Record call args
	mmIsValidForHostAddress.IsValidForHostAddressMock.mutex.Lock()
	mmIsValidForHostAddress.IsValidForHostAddressMock.callArgs = append(mmIsValidForHostAddress.IsValidForHostAddressMock.callArgs, params)
	mmIsValidForHostAddress.IsValidForHostAddressMock.mutex.Unlock()

	for _, e := range mmIsValidForHostAddress.IsValidForHostAddressMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1
		}
	}

	if mmIsValidForHostAddress.IsValidForHostAddressMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsValidForHostAddress.IsValidForHostAddressMock.defaultExpectation.Counter, 1)
		want := mmIsValidForHostAddress.IsValidForHostAddressMock.defaultExpectation.params
		got := CertificateHolderMockIsValidForHostAddressParams{HostAddress}
		if want != nil && !minimock.Equal(*want, got) {
			mmIsValidForHostAddress.t.Errorf("CertificateHolderMock.IsValidForHostAddress got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmIsValidForHostAddress.IsValidForHostAddressMock.defaultExpectation.results
		if results == nil {
			mmIsValidForHostAddress.t.Fatal("No results are set for the CertificateHolderMock.IsValidForHostAddress")
		}
		return (*results).b1
	}
	if mmIsValidForHostAddress.funcIsValidForHostAddress != nil {
		return mmIsValidForHostAddress.funcIsValidForHostAddress(HostAddress)
	}
	mmIsValidForHostAddress.t.Fatalf("Unexpected call to CertificateHolderMock.IsValidForHostAddress. %v", HostAddress)
	return
}

// IsValidForHostAddressAfterCounter returns a count of finished CertificateHolderMock.IsValidForHostAddress invocations
func (mmIsValidForHostAddress *CertificateHolderMock) IsValidForHostAddressAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsValidForHostAddress.afterIsValidForHostAddressCounter)
}

// IsValidForHostAddressBeforeCounter returns a count of CertificateHolderMock.IsValidForHostAddress invocations
func (mmIsValidForHostAddress *CertificateHolderMock) IsValidForHostAddressBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsValidForHostAddress.beforeIsValidForHostAddressCounter)
}

// Calls returns a list of arguments used in each call to CertificateHolderMock.IsValidForHostAddress.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIsValidForHostAddress *mCertificateHolderMockIsValidForHostAddress) Calls() []*CertificateHolderMockIsValidForHostAddressParams {
	mmIsValidForHostAddress.mutex.RLock()

	argCopy := make([]*CertificateHolderMockIsValidForHostAddressParams, len(mmIsValidForHostAddress.callArgs))
	copy(argCopy, mmIsValidForHostAddress.callArgs)

	mmIsValidForHostAddress.mutex.RUnlock()

	return argCopy
}

// MinimockIsValidForHostAddressDone returns true if the count of the IsValidForHostAddress invocations corresponds
// the number of defined expectations
func (m *CertificateHolderMock) MinimockIsValidForHostAddressDone() bool {
	for _, e := range m.IsValidForHostAddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsValidForHostAddressMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsValidForHostAddressCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsValidForHostAddress != nil && mm_atomic.LoadUint64(&m.afterIsValidForHostAddressCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsValidForHostAddressInspect logs each unmet expectation
func (m *CertificateHolderMock) MinimockIsValidForHostAddressInspect() {
	for _, e := range m.IsValidForHostAddressMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CertificateHolderMock.IsValidForHostAddress with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsValidForHostAddressMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsValidForHostAddressCounter) < 1 {
		if m.IsValidForHostAddressMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CertificateHolderMock.IsValidForHostAddress")
		} else {
			m.t.Errorf("Expected call to CertificateHolderMock.IsValidForHostAddress with params: %#v", *m.IsValidForHostAddressMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsValidForHostAddress != nil && mm_atomic.LoadUint64(&m.afterIsValidForHostAddressCounter) < 1 {
		m.t.Error("Expected call to CertificateHolderMock.IsValidForHostAddress")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CertificateHolderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetPublicKeyInspect()

		m.MinimockIsValidForHostAddressInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CertificateHolderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CertificateHolderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetPublicKeyDone() &&
		m.MinimockIsValidForHostAddressDone()
}
