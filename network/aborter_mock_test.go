package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// AborterMock implements Aborter
type AborterMock struct {
	t minimock.Tester

	funcAbort          func(ctx context.Context, reason string)
	inspectFuncAbort   func(ctx context.Context, reason string)
	afterAbortCounter  uint64
	beforeAbortCounter uint64
	AbortMock          mAborterMockAbort
}

// NewAborterMock returns a mock for Aborter
func NewAborterMock(t minimock.Tester) *AborterMock {
	m := &AborterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AbortMock = mAborterMockAbort{mock: m}
	m.AbortMock.callArgs = []*AborterMockAbortParams{}

	return m
}

type mAborterMockAbort struct {
	mock               *AborterMock
	defaultExpectation *AborterMockAbortExpectation
	expectations       []*AborterMockAbortExpectation

	callArgs []*AborterMockAbortParams
	mutex    sync.RWMutex
}

// AborterMockAbortExpectation specifies expectation struct of the Aborter.Abort
type AborterMockAbortExpectation struct {
	mock   *AborterMock
	params *AborterMockAbortParams

	Counter uint64
}

// AborterMockAbortParams contains parameters of the Aborter.Abort
type AborterMockAbortParams struct {
	ctx    context.Context
	reason string
}

// Expect sets up expected params for Aborter.Abort
func (mmAbort *mAborterMockAbort) Expect(ctx context.Context, reason string) *mAborterMockAbort {
	if mmAbort.mock.funcAbort != nil {
		mmAbort.mock.t.Fatalf("AborterMock.Abort mock is already set by Set")
	}

	if mmAbort.defaultExpectation == nil {
		mmAbort.defaultExpectation = &AborterMockAbortExpectation{}
	}

	mmAbort.defaultExpectation.params = &AborterMockAbortParams{ctx, reason}
	for _, e := range mmAbort.expectations {
		if minimock.Equal(e.params, mmAbort.defaultExpectation.params) {
			mmAbort.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAbort.defaultExpectation.params)
		}
	}

	return mmAbort
}

// Inspect accepts an inspector function that has same arguments as the Aborter.Abort
func (mmAbort *mAborterMockAbort) Inspect(f func(ctx context.Context, reason string)) *mAborterMockAbort {
	if mmAbort.mock.inspectFuncAbort != nil {
		mmAbort.mock.t.Fatalf("Inspect function is already set for AborterMock.Abort")
	}

	mmAbort.mock.inspectFuncAbort = f

	return mmAbort
}

// Return sets up results that will be returned by Aborter.Abort
func (mmAbort *mAborterMockAbort) Return() *AborterMock {
	if mmAbort.mock.funcAbort != nil {
		mmAbort.mock.t.Fatalf("AborterMock.Abort mock is already set by Set")
	}

	if mmAbort.defaultExpectation == nil {
		mmAbort.defaultExpectation = &AborterMockAbortExpectation{mock: mmAbort.mock}
	}

	return mmAbort.mock
}

//Set uses given function f to mock the Aborter.Abort method
func (mmAbort *mAborterMockAbort) Set(f func(ctx context.Context, reason string)) *AborterMock {
	if mmAbort.defaultExpectation != nil {
		mmAbort.mock.t.Fatalf("Default expectation is already set for the Aborter.Abort method")
	}

	if len(mmAbort.expectations) > 0 {
		mmAbort.mock.t.Fatalf("Some expectations are already set for the Aborter.Abort method")
	}

	mmAbort.mock.funcAbort = f
	return mmAbort.mock
}

// Abort implements Aborter
func (mmAbort *AborterMock) Abort(ctx context.Context, reason string) {
	mm_atomic.AddUint64(&mmAbort.beforeAbortCounter, 1)
	defer mm_atomic.AddUint64(&mmAbort.afterAbortCounter, 1)

	if mmAbort.inspectFuncAbort != nil {
		mmAbort.inspectFuncAbort(ctx, reason)
	}

	params := &AborterMockAbortParams{ctx, reason}

	// Record call args
	mmAbort.AbortMock.mutex.Lock()
	mmAbort.AbortMock.callArgs = append(mmAbort.AbortMock.callArgs, params)
	mmAbort.AbortMock.mutex.Unlock()

	for _, e := range mmAbort.AbortMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAbort.AbortMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAbort.AbortMock.defaultExpectation.Counter, 1)
		want := mmAbort.AbortMock.defaultExpectation.params
		got := AborterMockAbortParams{ctx, reason}
		if want != nil && !minimock.Equal(*want, got) {
			mmAbort.t.Errorf("AborterMock.Abort got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmAbort.funcAbort != nil {
		mmAbort.funcAbort(ctx, reason)
		return
	}
	mmAbort.t.Fatalf("Unexpected call to AborterMock.Abort. %v %v", ctx, reason)

}

// AbortAfterCounter returns a count of finished AborterMock.Abort invocations
func (mmAbort *AborterMock) AbortAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAbort.afterAbortCounter)
}

// AbortBeforeCounter returns a count of AborterMock.Abort invocations
func (mmAbort *AborterMock) AbortBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAbort.beforeAbortCounter)
}

// Calls returns a list of arguments used in each call to AborterMock.Abort.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAbort *mAborterMockAbort) Calls() []*AborterMockAbortParams {
	mmAbort.mutex.RLock()

	argCopy := make([]*AborterMockAbortParams, len(mmAbort.callArgs))
	copy(argCopy, mmAbort.callArgs)

	mmAbort.mutex.RUnlock()

	return argCopy
}

// MinimockAbortDone returns true if the count of the Abort invocations corresponds
// the number of defined expectations
func (m *AborterMock) MinimockAbortDone() bool {
	for _, e := range m.AbortMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AbortMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAbortCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAbort != nil && mm_atomic.LoadUint64(&m.afterAbortCounter) < 1 {
		return false
	}
	return true
}

// MinimockAbortInspect logs each unmet expectation
func (m *AborterMock) MinimockAbortInspect() {
	for _, e := range m.AbortMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AborterMock.Abort with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AbortMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAbortCounter) < 1 {
		if m.AbortMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AborterMock.Abort")
		} else {
			m.t.Errorf("Expected call to AborterMock.Abort with params: %#v", *m.AbortMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAbort != nil && mm_atomic.LoadUint64(&m.afterAbortCounter) < 1 {
		m.t.Error("Expected call to AborterMock.Abort")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AborterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAbortInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AborterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AborterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAbortDone()
}
