package bootstrap

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/adapters"
	"github.com/insolar/insolar/network/hostnetwork/host"
	"github.com/insolar/insolar/network/hostnetwork/packet"
)

// RequesterMock implements Requester
type RequesterMock struct {
	t minimock.Tester

	funcAuthorize          func(ctx context.Context, c2 insolar.Certificate) (pp1 *packet.Permit, err error)
	inspectFuncAuthorize   func(ctx context.Context, c2 insolar.Certificate)
	afterAuthorizeCounter  uint64
	beforeAuthorizeCounter uint64
	AuthorizeMock          mRequesterMockAuthorize

	funcBootstrap          func(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse) (bp1 *packet.BootstrapResponse, err error)
	inspectFuncBootstrap   func(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse)
	afterBootstrapCounter  uint64
	beforeBootstrapCounter uint64
	BootstrapMock          mRequesterMockBootstrap

	funcReconnect          func(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit) (rp1 *packet.ReconnectResponse, err error)
	inspectFuncReconnect   func(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit)
	afterReconnectCounter  uint64
	beforeReconnectCounter uint64
	ReconnectMock          mRequesterMockReconnect

	funcUpdateSchedule          func(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber) (up1 *packet.UpdateScheduleResponse, err error)
	inspectFuncUpdateSchedule   func(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber)
	afterUpdateScheduleCounter  uint64
	beforeUpdateScheduleCounter uint64
	UpdateScheduleMock          mRequesterMockUpdateSchedule
}

// NewRequesterMock returns a mock for Requester
func NewRequesterMock(t minimock.Tester) *RequesterMock {
	m := &RequesterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AuthorizeMock = mRequesterMockAuthorize{mock: m}
	m.AuthorizeMock.callArgs = []*RequesterMockAuthorizeParams{}

	m.BootstrapMock = mRequesterMockBootstrap{mock: m}
	m.BootstrapMock.callArgs = []*RequesterMockBootstrapParams{}

	m.ReconnectMock = mRequesterMockReconnect{mock: m}
	m.ReconnectMock.callArgs = []*RequesterMockReconnectParams{}

	m.UpdateScheduleMock = mRequesterMockUpdateSchedule{mock: m}
	m.UpdateScheduleMock.callArgs = []*RequesterMockUpdateScheduleParams{}

	return m
}

type mRequesterMockAuthorize struct {
	mock               *RequesterMock
	defaultExpectation *RequesterMockAuthorizeExpectation
	expectations       []*RequesterMockAuthorizeExpectation

	callArgs []*RequesterMockAuthorizeParams
	mutex    sync.RWMutex
}

// RequesterMockAuthorizeExpectation specifies expectation struct of the Requester.Authorize
type RequesterMockAuthorizeExpectation struct {
	mock    *RequesterMock
	params  *RequesterMockAuthorizeParams
	results *RequesterMockAuthorizeResults
	Counter uint64
}

// RequesterMockAuthorizeParams contains parameters of the Requester.Authorize
type RequesterMockAuthorizeParams struct {
	ctx context.Context
	c2  insolar.Certificate
}

// RequesterMockAuthorizeResults contains results of the Requester.Authorize
type RequesterMockAuthorizeResults struct {
	pp1 *packet.Permit
	err error
}

// Expect sets up expected params for Requester.Authorize
func (mmAuthorize *mRequesterMockAuthorize) Expect(ctx context.Context, c2 insolar.Certificate) *mRequesterMockAuthorize {
	if mmAuthorize.mock.funcAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("RequesterMock.Authorize mock is already set by Set")
	}

	if mmAuthorize.defaultExpectation == nil {
		mmAuthorize.defaultExpectation = &RequesterMockAuthorizeExpectation{}
	}

	mmAuthorize.defaultExpectation.params = &RequesterMockAuthorizeParams{ctx, c2}
	for _, e := range mmAuthorize.expectations {
		if minimock.Equal(e.params, mmAuthorize.defaultExpectation.params) {
			mmAuthorize.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAuthorize.defaultExpectation.params)
		}
	}

	return mmAuthorize
}

// Inspect accepts an inspector function that has same arguments as the Requester.Authorize
func (mmAuthorize *mRequesterMockAuthorize) Inspect(f func(ctx context.Context, c2 insolar.Certificate)) *mRequesterMockAuthorize {
	if mmAuthorize.mock.inspectFuncAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("Inspect function is already set for RequesterMock.Authorize")
	}

	mmAuthorize.mock.inspectFuncAuthorize = f

	return mmAuthorize
}

// Return sets up results that will be returned by Requester.Authorize
func (mmAuthorize *mRequesterMockAuthorize) Return(pp1 *packet.Permit, err error) *RequesterMock {
	if mmAuthorize.mock.funcAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("RequesterMock.Authorize mock is already set by Set")
	}

	if mmAuthorize.defaultExpectation == nil {
		mmAuthorize.defaultExpectation = &RequesterMockAuthorizeExpectation{mock: mmAuthorize.mock}
	}
	mmAuthorize.defaultExpectation.results = &RequesterMockAuthorizeResults{pp1, err}
	return mmAuthorize.mock
}

//Set uses given function f to mock the Requester.Authorize method
func (mmAuthorize *mRequesterMockAuthorize) Set(f func(ctx context.Context, c2 insolar.Certificate) (pp1 *packet.Permit, err error)) *RequesterMock {
	if mmAuthorize.defaultExpectation != nil {
		mmAuthorize.mock.t.Fatalf("Default expectation is already set for the Requester.Authorize method")
	}

	if len(mmAuthorize.expectations) > 0 {
		mmAuthorize.mock.t.Fatalf("Some expectations are already set for the Requester.Authorize method")
	}

	mmAuthorize.mock.funcAuthorize = f
	return mmAuthorize.mock
}

// When sets expectation for the Requester.Authorize which will trigger the result defined by the following
// Then helper
func (mmAuthorize *mRequesterMockAuthorize) When(ctx context.Context, c2 insolar.Certificate) *RequesterMockAuthorizeExpectation {
	if mmAuthorize.mock.funcAuthorize != nil {
		mmAuthorize.mock.t.Fatalf("RequesterMock.Authorize mock is already set by Set")
	}

	expectation := &RequesterMockAuthorizeExpectation{
		mock:   mmAuthorize.mock,
		params: &RequesterMockAuthorizeParams{ctx, c2},
	}
	mmAuthorize.expectations = append(mmAuthorize.expectations, expectation)
	return expectation
}

// Then sets up Requester.Authorize return parameters for the expectation previously defined by the When method
func (e *RequesterMockAuthorizeExpectation) Then(pp1 *packet.Permit, err error) *RequesterMock {
	e.results = &RequesterMockAuthorizeResults{pp1, err}
	return e.mock
}

// Authorize implements Requester
func (mmAuthorize *RequesterMock) Authorize(ctx context.Context, c2 insolar.Certificate) (pp1 *packet.Permit, err error) {
	mm_atomic.AddUint64(&mmAuthorize.beforeAuthorizeCounter, 1)
	defer mm_atomic.AddUint64(&mmAuthorize.afterAuthorizeCounter, 1)

	if mmAuthorize.inspectFuncAuthorize != nil {
		mmAuthorize.inspectFuncAuthorize(ctx, c2)
	}

	params := &RequesterMockAuthorizeParams{ctx, c2}

	// Record call args
	mmAuthorize.AuthorizeMock.mutex.Lock()
	mmAuthorize.AuthorizeMock.callArgs = append(mmAuthorize.AuthorizeMock.callArgs, params)
	mmAuthorize.AuthorizeMock.mutex.Unlock()

	for _, e := range mmAuthorize.AuthorizeMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmAuthorize.AuthorizeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAuthorize.AuthorizeMock.defaultExpectation.Counter, 1)
		want := mmAuthorize.AuthorizeMock.defaultExpectation.params
		got := RequesterMockAuthorizeParams{ctx, c2}
		if want != nil && !minimock.Equal(*want, got) {
			mmAuthorize.t.Errorf("RequesterMock.Authorize got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmAuthorize.AuthorizeMock.defaultExpectation.results
		if results == nil {
			mmAuthorize.t.Fatal("No results are set for the RequesterMock.Authorize")
		}
		return (*results).pp1, (*results).err
	}
	if mmAuthorize.funcAuthorize != nil {
		return mmAuthorize.funcAuthorize(ctx, c2)
	}
	mmAuthorize.t.Fatalf("Unexpected call to RequesterMock.Authorize. %v %v", ctx, c2)
	return
}

// AuthorizeAfterCounter returns a count of finished RequesterMock.Authorize invocations
func (mmAuthorize *RequesterMock) AuthorizeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthorize.afterAuthorizeCounter)
}

// AuthorizeBeforeCounter returns a count of RequesterMock.Authorize invocations
func (mmAuthorize *RequesterMock) AuthorizeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAuthorize.beforeAuthorizeCounter)
}

// Calls returns a list of arguments used in each call to RequesterMock.Authorize.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAuthorize *mRequesterMockAuthorize) Calls() []*RequesterMockAuthorizeParams {
	mmAuthorize.mutex.RLock()

	argCopy := make([]*RequesterMockAuthorizeParams, len(mmAuthorize.callArgs))
	copy(argCopy, mmAuthorize.callArgs)

	mmAuthorize.mutex.RUnlock()

	return argCopy
}

// MinimockAuthorizeDone returns true if the count of the Authorize invocations corresponds
// the number of defined expectations
func (m *RequesterMock) MinimockAuthorizeDone() bool {
	for _, e := range m.AuthorizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthorizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthorize != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		return false
	}
	return true
}

// MinimockAuthorizeInspect logs each unmet expectation
func (m *RequesterMock) MinimockAuthorizeInspect() {
	for _, e := range m.AuthorizeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RequesterMock.Authorize with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AuthorizeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		if m.AuthorizeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RequesterMock.Authorize")
		} else {
			m.t.Errorf("Expected call to RequesterMock.Authorize with params: %#v", *m.AuthorizeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAuthorize != nil && mm_atomic.LoadUint64(&m.afterAuthorizeCounter) < 1 {
		m.t.Error("Expected call to RequesterMock.Authorize")
	}
}

type mRequesterMockBootstrap struct {
	mock               *RequesterMock
	defaultExpectation *RequesterMockBootstrapExpectation
	expectations       []*RequesterMockBootstrapExpectation

	callArgs []*RequesterMockBootstrapParams
	mutex    sync.RWMutex
}

// RequesterMockBootstrapExpectation specifies expectation struct of the Requester.Bootstrap
type RequesterMockBootstrapExpectation struct {
	mock    *RequesterMock
	params  *RequesterMockBootstrapParams
	results *RequesterMockBootstrapResults
	Counter uint64
}

// RequesterMockBootstrapParams contains parameters of the Requester.Bootstrap
type RequesterMockBootstrapParams struct {
	ctx context.Context
	pp1 *packet.Permit
	c2  adapters.Candidate
	pp2 *insolar.Pulse
}

// RequesterMockBootstrapResults contains results of the Requester.Bootstrap
type RequesterMockBootstrapResults struct {
	bp1 *packet.BootstrapResponse
	err error
}

// Expect sets up expected params for Requester.Bootstrap
func (mmBootstrap *mRequesterMockBootstrap) Expect(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse) *mRequesterMockBootstrap {
	if mmBootstrap.mock.funcBootstrap != nil {
		mmBootstrap.mock.t.Fatalf("RequesterMock.Bootstrap mock is already set by Set")
	}

	if mmBootstrap.defaultExpectation == nil {
		mmBootstrap.defaultExpectation = &RequesterMockBootstrapExpectation{}
	}

	mmBootstrap.defaultExpectation.params = &RequesterMockBootstrapParams{ctx, pp1, c2, pp2}
	for _, e := range mmBootstrap.expectations {
		if minimock.Equal(e.params, mmBootstrap.defaultExpectation.params) {
			mmBootstrap.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBootstrap.defaultExpectation.params)
		}
	}

	return mmBootstrap
}

// Inspect accepts an inspector function that has same arguments as the Requester.Bootstrap
func (mmBootstrap *mRequesterMockBootstrap) Inspect(f func(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse)) *mRequesterMockBootstrap {
	if mmBootstrap.mock.inspectFuncBootstrap != nil {
		mmBootstrap.mock.t.Fatalf("Inspect function is already set for RequesterMock.Bootstrap")
	}

	mmBootstrap.mock.inspectFuncBootstrap = f

	return mmBootstrap
}

// Return sets up results that will be returned by Requester.Bootstrap
func (mmBootstrap *mRequesterMockBootstrap) Return(bp1 *packet.BootstrapResponse, err error) *RequesterMock {
	if mmBootstrap.mock.funcBootstrap != nil {
		mmBootstrap.mock.t.Fatalf("RequesterMock.Bootstrap mock is already set by Set")
	}

	if mmBootstrap.defaultExpectation == nil {
		mmBootstrap.defaultExpectation = &RequesterMockBootstrapExpectation{mock: mmBootstrap.mock}
	}
	mmBootstrap.defaultExpectation.results = &RequesterMockBootstrapResults{bp1, err}
	return mmBootstrap.mock
}

//Set uses given function f to mock the Requester.Bootstrap method
func (mmBootstrap *mRequesterMockBootstrap) Set(f func(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse) (bp1 *packet.BootstrapResponse, err error)) *RequesterMock {
	if mmBootstrap.defaultExpectation != nil {
		mmBootstrap.mock.t.Fatalf("Default expectation is already set for the Requester.Bootstrap method")
	}

	if len(mmBootstrap.expectations) > 0 {
		mmBootstrap.mock.t.Fatalf("Some expectations are already set for the Requester.Bootstrap method")
	}

	mmBootstrap.mock.funcBootstrap = f
	return mmBootstrap.mock
}

// When sets expectation for the Requester.Bootstrap which will trigger the result defined by the following
// Then helper
func (mmBootstrap *mRequesterMockBootstrap) When(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse) *RequesterMockBootstrapExpectation {
	if mmBootstrap.mock.funcBootstrap != nil {
		mmBootstrap.mock.t.Fatalf("RequesterMock.Bootstrap mock is already set by Set")
	}

	expectation := &RequesterMockBootstrapExpectation{
		mock:   mmBootstrap.mock,
		params: &RequesterMockBootstrapParams{ctx, pp1, c2, pp2},
	}
	mmBootstrap.expectations = append(mmBootstrap.expectations, expectation)
	return expectation
}

// Then sets up Requester.Bootstrap return parameters for the expectation previously defined by the When method
func (e *RequesterMockBootstrapExpectation) Then(bp1 *packet.BootstrapResponse, err error) *RequesterMock {
	e.results = &RequesterMockBootstrapResults{bp1, err}
	return e.mock
}

// Bootstrap implements Requester
func (mmBootstrap *RequesterMock) Bootstrap(ctx context.Context, pp1 *packet.Permit, c2 adapters.Candidate, pp2 *insolar.Pulse) (bp1 *packet.BootstrapResponse, err error) {
	mm_atomic.AddUint64(&mmBootstrap.beforeBootstrapCounter, 1)
	defer mm_atomic.AddUint64(&mmBootstrap.afterBootstrapCounter, 1)

	if mmBootstrap.inspectFuncBootstrap != nil {
		mmBootstrap.inspectFuncBootstrap(ctx, pp1, c2, pp2)
	}

	params := &RequesterMockBootstrapParams{ctx, pp1, c2, pp2}

	// Record call args
	mmBootstrap.BootstrapMock.mutex.Lock()
	mmBootstrap.BootstrapMock.callArgs = append(mmBootstrap.BootstrapMock.callArgs, params)
	mmBootstrap.BootstrapMock.mutex.Unlock()

	for _, e := range mmBootstrap.BootstrapMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.bp1, e.results.err
		}
	}

	if mmBootstrap.BootstrapMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBootstrap.BootstrapMock.defaultExpectation.Counter, 1)
		want := mmBootstrap.BootstrapMock.defaultExpectation.params
		got := RequesterMockBootstrapParams{ctx, pp1, c2, pp2}
		if want != nil && !minimock.Equal(*want, got) {
			mmBootstrap.t.Errorf("RequesterMock.Bootstrap got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmBootstrap.BootstrapMock.defaultExpectation.results
		if results == nil {
			mmBootstrap.t.Fatal("No results are set for the RequesterMock.Bootstrap")
		}
		return (*results).bp1, (*results).err
	}
	if mmBootstrap.funcBootstrap != nil {
		return mmBootstrap.funcBootstrap(ctx, pp1, c2, pp2)
	}
	mmBootstrap.t.Fatalf("Unexpected call to RequesterMock.Bootstrap. %v %v %v %v", ctx, pp1, c2, pp2)
	return
}

// BootstrapAfterCounter returns a count of finished RequesterMock.Bootstrap invocations
func (mmBootstrap *RequesterMock) BootstrapAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBootstrap.afterBootstrapCounter)
}

// BootstrapBeforeCounter returns a count of RequesterMock.Bootstrap invocations
func (mmBootstrap *RequesterMock) BootstrapBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBootstrap.beforeBootstrapCounter)
}

// Calls returns a list of arguments used in each call to RequesterMock.Bootstrap.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBootstrap *mRequesterMockBootstrap) Calls() []*RequesterMockBootstrapParams {
	mmBootstrap.mutex.RLock()

	argCopy := make([]*RequesterMockBootstrapParams, len(mmBootstrap.callArgs))
	copy(argCopy, mmBootstrap.callArgs)

	mmBootstrap.mutex.RUnlock()

	return argCopy
}

// MinimockBootstrapDone returns true if the count of the Bootstrap invocations corresponds
// the number of defined expectations
func (m *RequesterMock) MinimockBootstrapDone() bool {
	for _, e := range m.BootstrapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BootstrapMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBootstrapCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBootstrap != nil && mm_atomic.LoadUint64(&m.afterBootstrapCounter) < 1 {
		return false
	}
	return true
}

// MinimockBootstrapInspect logs each unmet expectation
func (m *RequesterMock) MinimockBootstrapInspect() {
	for _, e := range m.BootstrapMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RequesterMock.Bootstrap with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BootstrapMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBootstrapCounter) < 1 {
		if m.BootstrapMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RequesterMock.Bootstrap")
		} else {
			m.t.Errorf("Expected call to RequesterMock.Bootstrap with params: %#v", *m.BootstrapMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBootstrap != nil && mm_atomic.LoadUint64(&m.afterBootstrapCounter) < 1 {
		m.t.Error("Expected call to RequesterMock.Bootstrap")
	}
}

type mRequesterMockReconnect struct {
	mock               *RequesterMock
	defaultExpectation *RequesterMockReconnectExpectation
	expectations       []*RequesterMockReconnectExpectation

	callArgs []*RequesterMockReconnectParams
	mutex    sync.RWMutex
}

// RequesterMockReconnectExpectation specifies expectation struct of the Requester.Reconnect
type RequesterMockReconnectExpectation struct {
	mock    *RequesterMock
	params  *RequesterMockReconnectParams
	results *RequesterMockReconnectResults
	Counter uint64
}

// RequesterMockReconnectParams contains parameters of the Requester.Reconnect
type RequesterMockReconnectParams struct {
	ctx context.Context
	hp1 *host.Host
	pp1 *packet.Permit
}

// RequesterMockReconnectResults contains results of the Requester.Reconnect
type RequesterMockReconnectResults struct {
	rp1 *packet.ReconnectResponse
	err error
}

// Expect sets up expected params for Requester.Reconnect
func (mmReconnect *mRequesterMockReconnect) Expect(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit) *mRequesterMockReconnect {
	if mmReconnect.mock.funcReconnect != nil {
		mmReconnect.mock.t.Fatalf("RequesterMock.Reconnect mock is already set by Set")
	}

	if mmReconnect.defaultExpectation == nil {
		mmReconnect.defaultExpectation = &RequesterMockReconnectExpectation{}
	}

	mmReconnect.defaultExpectation.params = &RequesterMockReconnectParams{ctx, hp1, pp1}
	for _, e := range mmReconnect.expectations {
		if minimock.Equal(e.params, mmReconnect.defaultExpectation.params) {
			mmReconnect.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReconnect.defaultExpectation.params)
		}
	}

	return mmReconnect
}

// Inspect accepts an inspector function that has same arguments as the Requester.Reconnect
func (mmReconnect *mRequesterMockReconnect) Inspect(f func(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit)) *mRequesterMockReconnect {
	if mmReconnect.mock.inspectFuncReconnect != nil {
		mmReconnect.mock.t.Fatalf("Inspect function is already set for RequesterMock.Reconnect")
	}

	mmReconnect.mock.inspectFuncReconnect = f

	return mmReconnect
}

// Return sets up results that will be returned by Requester.Reconnect
func (mmReconnect *mRequesterMockReconnect) Return(rp1 *packet.ReconnectResponse, err error) *RequesterMock {
	if mmReconnect.mock.funcReconnect != nil {
		mmReconnect.mock.t.Fatalf("RequesterMock.Reconnect mock is already set by Set")
	}

	if mmReconnect.defaultExpectation == nil {
		mmReconnect.defaultExpectation = &RequesterMockReconnectExpectation{mock: mmReconnect.mock}
	}
	mmReconnect.defaultExpectation.results = &RequesterMockReconnectResults{rp1, err}
	return mmReconnect.mock
}

//Set uses given function f to mock the Requester.Reconnect method
func (mmReconnect *mRequesterMockReconnect) Set(f func(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit) (rp1 *packet.ReconnectResponse, err error)) *RequesterMock {
	if mmReconnect.defaultExpectation != nil {
		mmReconnect.mock.t.Fatalf("Default expectation is already set for the Requester.Reconnect method")
	}

	if len(mmReconnect.expectations) > 0 {
		mmReconnect.mock.t.Fatalf("Some expectations are already set for the Requester.Reconnect method")
	}

	mmReconnect.mock.funcReconnect = f
	return mmReconnect.mock
}

// When sets expectation for the Requester.Reconnect which will trigger the result defined by the following
// Then helper
func (mmReconnect *mRequesterMockReconnect) When(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit) *RequesterMockReconnectExpectation {
	if mmReconnect.mock.funcReconnect != nil {
		mmReconnect.mock.t.Fatalf("RequesterMock.Reconnect mock is already set by Set")
	}

	expectation := &RequesterMockReconnectExpectation{
		mock:   mmReconnect.mock,
		params: &RequesterMockReconnectParams{ctx, hp1, pp1},
	}
	mmReconnect.expectations = append(mmReconnect.expectations, expectation)
	return expectation
}

// Then sets up Requester.Reconnect return parameters for the expectation previously defined by the When method
func (e *RequesterMockReconnectExpectation) Then(rp1 *packet.ReconnectResponse, err error) *RequesterMock {
	e.results = &RequesterMockReconnectResults{rp1, err}
	return e.mock
}

// Reconnect implements Requester
func (mmReconnect *RequesterMock) Reconnect(ctx context.Context, hp1 *host.Host, pp1 *packet.Permit) (rp1 *packet.ReconnectResponse, err error) {
	mm_atomic.AddUint64(&mmReconnect.beforeReconnectCounter, 1)
	defer mm_atomic.AddUint64(&mmReconnect.afterReconnectCounter, 1)

	if mmReconnect.inspectFuncReconnect != nil {
		mmReconnect.inspectFuncReconnect(ctx, hp1, pp1)
	}

	params := &RequesterMockReconnectParams{ctx, hp1, pp1}

	// Record call args
	mmReconnect.ReconnectMock.mutex.Lock()
	mmReconnect.ReconnectMock.callArgs = append(mmReconnect.ReconnectMock.callArgs, params)
	mmReconnect.ReconnectMock.mutex.Unlock()

	for _, e := range mmReconnect.ReconnectMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmReconnect.ReconnectMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReconnect.ReconnectMock.defaultExpectation.Counter, 1)
		want := mmReconnect.ReconnectMock.defaultExpectation.params
		got := RequesterMockReconnectParams{ctx, hp1, pp1}
		if want != nil && !minimock.Equal(*want, got) {
			mmReconnect.t.Errorf("RequesterMock.Reconnect got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmReconnect.ReconnectMock.defaultExpectation.results
		if results == nil {
			mmReconnect.t.Fatal("No results are set for the RequesterMock.Reconnect")
		}
		return (*results).rp1, (*results).err
	}
	if mmReconnect.funcReconnect != nil {
		return mmReconnect.funcReconnect(ctx, hp1, pp1)
	}
	mmReconnect.t.Fatalf("Unexpected call to RequesterMock.Reconnect. %v %v %v", ctx, hp1, pp1)
	return
}

// ReconnectAfterCounter returns a count of finished RequesterMock.Reconnect invocations
func (mmReconnect *RequesterMock) ReconnectAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReconnect.afterReconnectCounter)
}

// ReconnectBeforeCounter returns a count of RequesterMock.Reconnect invocations
func (mmReconnect *RequesterMock) ReconnectBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReconnect.beforeReconnectCounter)
}

// Calls returns a list of arguments used in each call to RequesterMock.Reconnect.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReconnect *mRequesterMockReconnect) Calls() []*RequesterMockReconnectParams {
	mmReconnect.mutex.RLock()

	argCopy := make([]*RequesterMockReconnectParams, len(mmReconnect.callArgs))
	copy(argCopy, mmReconnect.callArgs)

	mmReconnect.mutex.RUnlock()

	return argCopy
}

// MinimockReconnectDone returns true if the count of the Reconnect invocations corresponds
// the number of defined expectations
func (m *RequesterMock) MinimockReconnectDone() bool {
	for _, e := range m.ReconnectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReconnectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReconnectCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReconnect != nil && mm_atomic.LoadUint64(&m.afterReconnectCounter) < 1 {
		return false
	}
	return true
}

// MinimockReconnectInspect logs each unmet expectation
func (m *RequesterMock) MinimockReconnectInspect() {
	for _, e := range m.ReconnectMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RequesterMock.Reconnect with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReconnectMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReconnectCounter) < 1 {
		if m.ReconnectMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RequesterMock.Reconnect")
		} else {
			m.t.Errorf("Expected call to RequesterMock.Reconnect with params: %#v", *m.ReconnectMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReconnect != nil && mm_atomic.LoadUint64(&m.afterReconnectCounter) < 1 {
		m.t.Error("Expected call to RequesterMock.Reconnect")
	}
}

type mRequesterMockUpdateSchedule struct {
	mock               *RequesterMock
	defaultExpectation *RequesterMockUpdateScheduleExpectation
	expectations       []*RequesterMockUpdateScheduleExpectation

	callArgs []*RequesterMockUpdateScheduleParams
	mutex    sync.RWMutex
}

// RequesterMockUpdateScheduleExpectation specifies expectation struct of the Requester.UpdateSchedule
type RequesterMockUpdateScheduleExpectation struct {
	mock    *RequesterMock
	params  *RequesterMockUpdateScheduleParams
	results *RequesterMockUpdateScheduleResults
	Counter uint64
}

// RequesterMockUpdateScheduleParams contains parameters of the Requester.UpdateSchedule
type RequesterMockUpdateScheduleParams struct {
	ctx context.Context
	pp1 *packet.Permit
	p1  insolar.PulseNumber
}

// RequesterMockUpdateScheduleResults contains results of the Requester.UpdateSchedule
type RequesterMockUpdateScheduleResults struct {
	up1 *packet.UpdateScheduleResponse
	err error
}

// Expect sets up expected params for Requester.UpdateSchedule
func (mmUpdateSchedule *mRequesterMockUpdateSchedule) Expect(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber) *mRequesterMockUpdateSchedule {
	if mmUpdateSchedule.mock.funcUpdateSchedule != nil {
		mmUpdateSchedule.mock.t.Fatalf("RequesterMock.UpdateSchedule mock is already set by Set")
	}

	if mmUpdateSchedule.defaultExpectation == nil {
		mmUpdateSchedule.defaultExpectation = &RequesterMockUpdateScheduleExpectation{}
	}

	mmUpdateSchedule.defaultExpectation.params = &RequesterMockUpdateScheduleParams{ctx, pp1, p1}
	for _, e := range mmUpdateSchedule.expectations {
		if minimock.Equal(e.params, mmUpdateSchedule.defaultExpectation.params) {
			mmUpdateSchedule.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdateSchedule.defaultExpectation.params)
		}
	}

	return mmUpdateSchedule
}

// Inspect accepts an inspector function that has same arguments as the Requester.UpdateSchedule
func (mmUpdateSchedule *mRequesterMockUpdateSchedule) Inspect(f func(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber)) *mRequesterMockUpdateSchedule {
	if mmUpdateSchedule.mock.inspectFuncUpdateSchedule != nil {
		mmUpdateSchedule.mock.t.Fatalf("Inspect function is already set for RequesterMock.UpdateSchedule")
	}

	mmUpdateSchedule.mock.inspectFuncUpdateSchedule = f

	return mmUpdateSchedule
}

// Return sets up results that will be returned by Requester.UpdateSchedule
func (mmUpdateSchedule *mRequesterMockUpdateSchedule) Return(up1 *packet.UpdateScheduleResponse, err error) *RequesterMock {
	if mmUpdateSchedule.mock.funcUpdateSchedule != nil {
		mmUpdateSchedule.mock.t.Fatalf("RequesterMock.UpdateSchedule mock is already set by Set")
	}

	if mmUpdateSchedule.defaultExpectation == nil {
		mmUpdateSchedule.defaultExpectation = &RequesterMockUpdateScheduleExpectation{mock: mmUpdateSchedule.mock}
	}
	mmUpdateSchedule.defaultExpectation.results = &RequesterMockUpdateScheduleResults{up1, err}
	return mmUpdateSchedule.mock
}

//Set uses given function f to mock the Requester.UpdateSchedule method
func (mmUpdateSchedule *mRequesterMockUpdateSchedule) Set(f func(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber) (up1 *packet.UpdateScheduleResponse, err error)) *RequesterMock {
	if mmUpdateSchedule.defaultExpectation != nil {
		mmUpdateSchedule.mock.t.Fatalf("Default expectation is already set for the Requester.UpdateSchedule method")
	}

	if len(mmUpdateSchedule.expectations) > 0 {
		mmUpdateSchedule.mock.t.Fatalf("Some expectations are already set for the Requester.UpdateSchedule method")
	}

	mmUpdateSchedule.mock.funcUpdateSchedule = f
	return mmUpdateSchedule.mock
}

// When sets expectation for the Requester.UpdateSchedule which will trigger the result defined by the following
// Then helper
func (mmUpdateSchedule *mRequesterMockUpdateSchedule) When(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber) *RequesterMockUpdateScheduleExpectation {
	if mmUpdateSchedule.mock.funcUpdateSchedule != nil {
		mmUpdateSchedule.mock.t.Fatalf("RequesterMock.UpdateSchedule mock is already set by Set")
	}

	expectation := &RequesterMockUpdateScheduleExpectation{
		mock:   mmUpdateSchedule.mock,
		params: &RequesterMockUpdateScheduleParams{ctx, pp1, p1},
	}
	mmUpdateSchedule.expectations = append(mmUpdateSchedule.expectations, expectation)
	return expectation
}

// Then sets up Requester.UpdateSchedule return parameters for the expectation previously defined by the When method
func (e *RequesterMockUpdateScheduleExpectation) Then(up1 *packet.UpdateScheduleResponse, err error) *RequesterMock {
	e.results = &RequesterMockUpdateScheduleResults{up1, err}
	return e.mock
}

// UpdateSchedule implements Requester
func (mmUpdateSchedule *RequesterMock) UpdateSchedule(ctx context.Context, pp1 *packet.Permit, p1 insolar.PulseNumber) (up1 *packet.UpdateScheduleResponse, err error) {
	mm_atomic.AddUint64(&mmUpdateSchedule.beforeUpdateScheduleCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdateSchedule.afterUpdateScheduleCounter, 1)

	if mmUpdateSchedule.inspectFuncUpdateSchedule != nil {
		mmUpdateSchedule.inspectFuncUpdateSchedule(ctx, pp1, p1)
	}

	params := &RequesterMockUpdateScheduleParams{ctx, pp1, p1}

	// Record call args
	mmUpdateSchedule.UpdateScheduleMock.mutex.Lock()
	mmUpdateSchedule.UpdateScheduleMock.callArgs = append(mmUpdateSchedule.UpdateScheduleMock.callArgs, params)
	mmUpdateSchedule.UpdateScheduleMock.mutex.Unlock()

	for _, e := range mmUpdateSchedule.UpdateScheduleMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmUpdateSchedule.UpdateScheduleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdateSchedule.UpdateScheduleMock.defaultExpectation.Counter, 1)
		want := mmUpdateSchedule.UpdateScheduleMock.defaultExpectation.params
		got := RequesterMockUpdateScheduleParams{ctx, pp1, p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmUpdateSchedule.t.Errorf("RequesterMock.UpdateSchedule got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmUpdateSchedule.UpdateScheduleMock.defaultExpectation.results
		if results == nil {
			mmUpdateSchedule.t.Fatal("No results are set for the RequesterMock.UpdateSchedule")
		}
		return (*results).up1, (*results).err
	}
	if mmUpdateSchedule.funcUpdateSchedule != nil {
		return mmUpdateSchedule.funcUpdateSchedule(ctx, pp1, p1)
	}
	mmUpdateSchedule.t.Fatalf("Unexpected call to RequesterMock.UpdateSchedule. %v %v %v", ctx, pp1, p1)
	return
}

// UpdateScheduleAfterCounter returns a count of finished RequesterMock.UpdateSchedule invocations
func (mmUpdateSchedule *RequesterMock) UpdateScheduleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateSchedule.afterUpdateScheduleCounter)
}

// UpdateScheduleBeforeCounter returns a count of RequesterMock.UpdateSchedule invocations
func (mmUpdateSchedule *RequesterMock) UpdateScheduleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdateSchedule.beforeUpdateScheduleCounter)
}

// Calls returns a list of arguments used in each call to RequesterMock.UpdateSchedule.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdateSchedule *mRequesterMockUpdateSchedule) Calls() []*RequesterMockUpdateScheduleParams {
	mmUpdateSchedule.mutex.RLock()

	argCopy := make([]*RequesterMockUpdateScheduleParams, len(mmUpdateSchedule.callArgs))
	copy(argCopy, mmUpdateSchedule.callArgs)

	mmUpdateSchedule.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateScheduleDone returns true if the count of the UpdateSchedule invocations corresponds
// the number of defined expectations
func (m *RequesterMock) MinimockUpdateScheduleDone() bool {
	for _, e := range m.UpdateScheduleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateScheduleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateScheduleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateSchedule != nil && mm_atomic.LoadUint64(&m.afterUpdateScheduleCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateScheduleInspect logs each unmet expectation
func (m *RequesterMock) MinimockUpdateScheduleInspect() {
	for _, e := range m.UpdateScheduleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RequesterMock.UpdateSchedule with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateScheduleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateScheduleCounter) < 1 {
		if m.UpdateScheduleMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RequesterMock.UpdateSchedule")
		} else {
			m.t.Errorf("Expected call to RequesterMock.UpdateSchedule with params: %#v", *m.UpdateScheduleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdateSchedule != nil && mm_atomic.LoadUint64(&m.afterUpdateScheduleCounter) < 1 {
		m.t.Error("Expected call to RequesterMock.UpdateSchedule")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RequesterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAuthorizeInspect()

		m.MinimockBootstrapInspect()

		m.MinimockReconnectInspect()

		m.MinimockUpdateScheduleInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RequesterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RequesterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAuthorizeDone() &&
		m.MinimockBootstrapDone() &&
		m.MinimockReconnectDone() &&
		m.MinimockUpdateScheduleDone()
}
