package executor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// InitialStateAccessorMock implements InitialStateAccessor
type InitialStateAccessorMock struct {
	t minimock.Tester

	funcGet          func(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber) (ip1 *InitialState)
	inspectFuncGet   func(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mInitialStateAccessorMockGet
}

// NewInitialStateAccessorMock returns a mock for InitialStateAccessor
func NewInitialStateAccessorMock(t minimock.Tester) *InitialStateAccessorMock {
	m := &InitialStateAccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMock = mInitialStateAccessorMockGet{mock: m}
	m.GetMock.callArgs = []*InitialStateAccessorMockGetParams{}

	return m
}

type mInitialStateAccessorMockGet struct {
	mock               *InitialStateAccessorMock
	defaultExpectation *InitialStateAccessorMockGetExpectation
	expectations       []*InitialStateAccessorMockGetExpectation

	callArgs []*InitialStateAccessorMockGetParams
	mutex    sync.RWMutex
}

// InitialStateAccessorMockGetExpectation specifies expectation struct of the InitialStateAccessor.Get
type InitialStateAccessorMockGetExpectation struct {
	mock    *InitialStateAccessorMock
	params  *InitialStateAccessorMockGetParams
	results *InitialStateAccessorMockGetResults
	Counter uint64
}

// InitialStateAccessorMockGetParams contains parameters of the InitialStateAccessor.Get
type InitialStateAccessorMockGetParams struct {
	ctx           context.Context
	lightExecutor insolar.Reference
	pulse         insolar.PulseNumber
}

// InitialStateAccessorMockGetResults contains results of the InitialStateAccessor.Get
type InitialStateAccessorMockGetResults struct {
	ip1 *InitialState
}

// Expect sets up expected params for InitialStateAccessor.Get
func (mmGet *mInitialStateAccessorMockGet) Expect(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber) *mInitialStateAccessorMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("InitialStateAccessorMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &InitialStateAccessorMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &InitialStateAccessorMockGetParams{ctx, lightExecutor, pulse}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the InitialStateAccessor.Get
func (mmGet *mInitialStateAccessorMockGet) Inspect(f func(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber)) *mInitialStateAccessorMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for InitialStateAccessorMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by InitialStateAccessor.Get
func (mmGet *mInitialStateAccessorMockGet) Return(ip1 *InitialState) *InitialStateAccessorMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("InitialStateAccessorMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &InitialStateAccessorMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &InitialStateAccessorMockGetResults{ip1}
	return mmGet.mock
}

//Set uses given function f to mock the InitialStateAccessor.Get method
func (mmGet *mInitialStateAccessorMockGet) Set(f func(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber) (ip1 *InitialState)) *InitialStateAccessorMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the InitialStateAccessor.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the InitialStateAccessor.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the InitialStateAccessor.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mInitialStateAccessorMockGet) When(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber) *InitialStateAccessorMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("InitialStateAccessorMock.Get mock is already set by Set")
	}

	expectation := &InitialStateAccessorMockGetExpectation{
		mock:   mmGet.mock,
		params: &InitialStateAccessorMockGetParams{ctx, lightExecutor, pulse},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up InitialStateAccessor.Get return parameters for the expectation previously defined by the When method
func (e *InitialStateAccessorMockGetExpectation) Then(ip1 *InitialState) *InitialStateAccessorMock {
	e.results = &InitialStateAccessorMockGetResults{ip1}
	return e.mock
}

// Get implements InitialStateAccessor
func (mmGet *InitialStateAccessorMock) Get(ctx context.Context, lightExecutor insolar.Reference, pulse insolar.PulseNumber) (ip1 *InitialState) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, lightExecutor, pulse)
	}

	params := &InitialStateAccessorMockGetParams{ctx, lightExecutor, pulse}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ip1
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		want := mmGet.GetMock.defaultExpectation.params
		got := InitialStateAccessorMockGetParams{ctx, lightExecutor, pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmGet.t.Errorf("InitialStateAccessorMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGet.GetMock.defaultExpectation.results
		if results == nil {
			mmGet.t.Fatal("No results are set for the InitialStateAccessorMock.Get")
		}
		return (*results).ip1
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, lightExecutor, pulse)
	}
	mmGet.t.Fatalf("Unexpected call to InitialStateAccessorMock.Get. %v %v %v", ctx, lightExecutor, pulse)
	return
}

// GetAfterCounter returns a count of finished InitialStateAccessorMock.Get invocations
func (mmGet *InitialStateAccessorMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of InitialStateAccessorMock.Get invocations
func (mmGet *InitialStateAccessorMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to InitialStateAccessorMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mInitialStateAccessorMockGet) Calls() []*InitialStateAccessorMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*InitialStateAccessorMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *InitialStateAccessorMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *InitialStateAccessorMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to InitialStateAccessorMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to InitialStateAccessorMock.Get")
		} else {
			m.t.Errorf("Expected call to InitialStateAccessorMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to InitialStateAccessorMock.Get")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *InitialStateAccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *InitialStateAccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *InitialStateAccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDone()
}
