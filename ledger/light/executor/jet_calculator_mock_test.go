package executor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// JetCalculatorMock implements JetCalculator
type JetCalculatorMock struct {
	t minimock.Tester

	funcMineForPulse          func(ctx context.Context, pn insolar.PulseNumber) (ja1 []insolar.JetID, err error)
	inspectFuncMineForPulse   func(ctx context.Context, pn insolar.PulseNumber)
	afterMineForPulseCounter  uint64
	beforeMineForPulseCounter uint64
	MineForPulseMock          mJetCalculatorMockMineForPulse
}

// NewJetCalculatorMock returns a mock for JetCalculator
func NewJetCalculatorMock(t minimock.Tester) *JetCalculatorMock {
	m := &JetCalculatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.MineForPulseMock = mJetCalculatorMockMineForPulse{mock: m}
	m.MineForPulseMock.callArgs = []*JetCalculatorMockMineForPulseParams{}

	return m
}

type mJetCalculatorMockMineForPulse struct {
	mock               *JetCalculatorMock
	defaultExpectation *JetCalculatorMockMineForPulseExpectation
	expectations       []*JetCalculatorMockMineForPulseExpectation

	callArgs []*JetCalculatorMockMineForPulseParams
	mutex    sync.RWMutex
}

// JetCalculatorMockMineForPulseExpectation specifies expectation struct of the JetCalculator.MineForPulse
type JetCalculatorMockMineForPulseExpectation struct {
	mock    *JetCalculatorMock
	params  *JetCalculatorMockMineForPulseParams
	results *JetCalculatorMockMineForPulseResults
	Counter uint64
}

// JetCalculatorMockMineForPulseParams contains parameters of the JetCalculator.MineForPulse
type JetCalculatorMockMineForPulseParams struct {
	ctx context.Context
	pn  insolar.PulseNumber
}

// JetCalculatorMockMineForPulseResults contains results of the JetCalculator.MineForPulse
type JetCalculatorMockMineForPulseResults struct {
	ja1 []insolar.JetID
	err error
}

// Expect sets up expected params for JetCalculator.MineForPulse
func (mmMineForPulse *mJetCalculatorMockMineForPulse) Expect(ctx context.Context, pn insolar.PulseNumber) *mJetCalculatorMockMineForPulse {
	if mmMineForPulse.mock.funcMineForPulse != nil {
		mmMineForPulse.mock.t.Fatalf("JetCalculatorMock.MineForPulse mock is already set by Set")
	}

	if mmMineForPulse.defaultExpectation == nil {
		mmMineForPulse.defaultExpectation = &JetCalculatorMockMineForPulseExpectation{}
	}

	mmMineForPulse.defaultExpectation.params = &JetCalculatorMockMineForPulseParams{ctx, pn}
	for _, e := range mmMineForPulse.expectations {
		if minimock.Equal(e.params, mmMineForPulse.defaultExpectation.params) {
			mmMineForPulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMineForPulse.defaultExpectation.params)
		}
	}

	return mmMineForPulse
}

// Inspect accepts an inspector function that has same arguments as the JetCalculator.MineForPulse
func (mmMineForPulse *mJetCalculatorMockMineForPulse) Inspect(f func(ctx context.Context, pn insolar.PulseNumber)) *mJetCalculatorMockMineForPulse {
	if mmMineForPulse.mock.inspectFuncMineForPulse != nil {
		mmMineForPulse.mock.t.Fatalf("Inspect function is already set for JetCalculatorMock.MineForPulse")
	}

	mmMineForPulse.mock.inspectFuncMineForPulse = f

	return mmMineForPulse
}

// Return sets up results that will be returned by JetCalculator.MineForPulse
func (mmMineForPulse *mJetCalculatorMockMineForPulse) Return(ja1 []insolar.JetID, err error) *JetCalculatorMock {
	if mmMineForPulse.mock.funcMineForPulse != nil {
		mmMineForPulse.mock.t.Fatalf("JetCalculatorMock.MineForPulse mock is already set by Set")
	}

	if mmMineForPulse.defaultExpectation == nil {
		mmMineForPulse.defaultExpectation = &JetCalculatorMockMineForPulseExpectation{mock: mmMineForPulse.mock}
	}
	mmMineForPulse.defaultExpectation.results = &JetCalculatorMockMineForPulseResults{ja1, err}
	return mmMineForPulse.mock
}

//Set uses given function f to mock the JetCalculator.MineForPulse method
func (mmMineForPulse *mJetCalculatorMockMineForPulse) Set(f func(ctx context.Context, pn insolar.PulseNumber) (ja1 []insolar.JetID, err error)) *JetCalculatorMock {
	if mmMineForPulse.defaultExpectation != nil {
		mmMineForPulse.mock.t.Fatalf("Default expectation is already set for the JetCalculator.MineForPulse method")
	}

	if len(mmMineForPulse.expectations) > 0 {
		mmMineForPulse.mock.t.Fatalf("Some expectations are already set for the JetCalculator.MineForPulse method")
	}

	mmMineForPulse.mock.funcMineForPulse = f
	return mmMineForPulse.mock
}

// When sets expectation for the JetCalculator.MineForPulse which will trigger the result defined by the following
// Then helper
func (mmMineForPulse *mJetCalculatorMockMineForPulse) When(ctx context.Context, pn insolar.PulseNumber) *JetCalculatorMockMineForPulseExpectation {
	if mmMineForPulse.mock.funcMineForPulse != nil {
		mmMineForPulse.mock.t.Fatalf("JetCalculatorMock.MineForPulse mock is already set by Set")
	}

	expectation := &JetCalculatorMockMineForPulseExpectation{
		mock:   mmMineForPulse.mock,
		params: &JetCalculatorMockMineForPulseParams{ctx, pn},
	}
	mmMineForPulse.expectations = append(mmMineForPulse.expectations, expectation)
	return expectation
}

// Then sets up JetCalculator.MineForPulse return parameters for the expectation previously defined by the When method
func (e *JetCalculatorMockMineForPulseExpectation) Then(ja1 []insolar.JetID, err error) *JetCalculatorMock {
	e.results = &JetCalculatorMockMineForPulseResults{ja1, err}
	return e.mock
}

// MineForPulse implements JetCalculator
func (mmMineForPulse *JetCalculatorMock) MineForPulse(ctx context.Context, pn insolar.PulseNumber) (ja1 []insolar.JetID, err error) {
	mm_atomic.AddUint64(&mmMineForPulse.beforeMineForPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmMineForPulse.afterMineForPulseCounter, 1)

	if mmMineForPulse.inspectFuncMineForPulse != nil {
		mmMineForPulse.inspectFuncMineForPulse(ctx, pn)
	}

	params := &JetCalculatorMockMineForPulseParams{ctx, pn}

	// Record call args
	mmMineForPulse.MineForPulseMock.mutex.Lock()
	mmMineForPulse.MineForPulseMock.callArgs = append(mmMineForPulse.MineForPulseMock.callArgs, params)
	mmMineForPulse.MineForPulseMock.mutex.Unlock()

	for _, e := range mmMineForPulse.MineForPulseMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ja1, e.results.err
		}
	}

	if mmMineForPulse.MineForPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMineForPulse.MineForPulseMock.defaultExpectation.Counter, 1)
		want := mmMineForPulse.MineForPulseMock.defaultExpectation.params
		got := JetCalculatorMockMineForPulseParams{ctx, pn}
		if want != nil && !minimock.Equal(*want, got) {
			mmMineForPulse.t.Errorf("JetCalculatorMock.MineForPulse got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmMineForPulse.MineForPulseMock.defaultExpectation.results
		if results == nil {
			mmMineForPulse.t.Fatal("No results are set for the JetCalculatorMock.MineForPulse")
		}
		return (*results).ja1, (*results).err
	}
	if mmMineForPulse.funcMineForPulse != nil {
		return mmMineForPulse.funcMineForPulse(ctx, pn)
	}
	mmMineForPulse.t.Fatalf("Unexpected call to JetCalculatorMock.MineForPulse. %v %v", ctx, pn)
	return
}

// MineForPulseAfterCounter returns a count of finished JetCalculatorMock.MineForPulse invocations
func (mmMineForPulse *JetCalculatorMock) MineForPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMineForPulse.afterMineForPulseCounter)
}

// MineForPulseBeforeCounter returns a count of JetCalculatorMock.MineForPulse invocations
func (mmMineForPulse *JetCalculatorMock) MineForPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMineForPulse.beforeMineForPulseCounter)
}

// Calls returns a list of arguments used in each call to JetCalculatorMock.MineForPulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMineForPulse *mJetCalculatorMockMineForPulse) Calls() []*JetCalculatorMockMineForPulseParams {
	mmMineForPulse.mutex.RLock()

	argCopy := make([]*JetCalculatorMockMineForPulseParams, len(mmMineForPulse.callArgs))
	copy(argCopy, mmMineForPulse.callArgs)

	mmMineForPulse.mutex.RUnlock()

	return argCopy
}

// MinimockMineForPulseDone returns true if the count of the MineForPulse invocations corresponds
// the number of defined expectations
func (m *JetCalculatorMock) MinimockMineForPulseDone() bool {
	for _, e := range m.MineForPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MineForPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMineForPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMineForPulse != nil && mm_atomic.LoadUint64(&m.afterMineForPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockMineForPulseInspect logs each unmet expectation
func (m *JetCalculatorMock) MinimockMineForPulseInspect() {
	for _, e := range m.MineForPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to JetCalculatorMock.MineForPulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MineForPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMineForPulseCounter) < 1 {
		if m.MineForPulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to JetCalculatorMock.MineForPulse")
		} else {
			m.t.Errorf("Expected call to JetCalculatorMock.MineForPulse with params: %#v", *m.MineForPulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMineForPulse != nil && mm_atomic.LoadUint64(&m.afterMineForPulseCounter) < 1 {
		m.t.Error("Expected call to JetCalculatorMock.MineForPulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *JetCalculatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockMineForPulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *JetCalculatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *JetCalculatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockMineForPulseDone()
}
