package executor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/insolar/record"
)

// FilamentCalculatorMock implements FilamentCalculator
type FilamentCalculatorMock struct {
	t minimock.Tester

	funcOpenedRequests          func(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool) (ca1 []record.CompositeFilamentRecord, err error)
	inspectFuncOpenedRequests   func(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool)
	afterOpenedRequestsCounter  uint64
	beforeOpenedRequestsCounter uint64
	OpenedRequestsMock          mFilamentCalculatorMockOpenedRequests

	funcRequestDuplicate          func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request) (foundRequest *record.CompositeFilamentRecord, foundResult *record.CompositeFilamentRecord, err error)
	inspectFuncRequestDuplicate   func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request)
	afterRequestDuplicateCounter  uint64
	beforeRequestDuplicateCounter uint64
	RequestDuplicateMock          mFilamentCalculatorMockRequestDuplicate

	funcRequestInfo          func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber) (requestInfo FilamentsRequestInfo, err error)
	inspectFuncRequestInfo   func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber)
	afterRequestInfoCounter  uint64
	beforeRequestInfoCounter uint64
	RequestInfoMock          mFilamentCalculatorMockRequestInfo

	funcRequests          func(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber) (ca1 []record.CompositeFilamentRecord, err error)
	inspectFuncRequests   func(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber)
	afterRequestsCounter  uint64
	beforeRequestsCounter uint64
	RequestsMock          mFilamentCalculatorMockRequests

	funcResultDuplicate          func(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result) (foundResult *record.CompositeFilamentRecord, err error)
	inspectFuncResultDuplicate   func(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result)
	afterResultDuplicateCounter  uint64
	beforeResultDuplicateCounter uint64
	ResultDuplicateMock          mFilamentCalculatorMockResultDuplicate
}

// NewFilamentCalculatorMock returns a mock for FilamentCalculator
func NewFilamentCalculatorMock(t minimock.Tester) *FilamentCalculatorMock {
	m := &FilamentCalculatorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OpenedRequestsMock = mFilamentCalculatorMockOpenedRequests{mock: m}
	m.OpenedRequestsMock.callArgs = []*FilamentCalculatorMockOpenedRequestsParams{}

	m.RequestDuplicateMock = mFilamentCalculatorMockRequestDuplicate{mock: m}
	m.RequestDuplicateMock.callArgs = []*FilamentCalculatorMockRequestDuplicateParams{}

	m.RequestInfoMock = mFilamentCalculatorMockRequestInfo{mock: m}
	m.RequestInfoMock.callArgs = []*FilamentCalculatorMockRequestInfoParams{}

	m.RequestsMock = mFilamentCalculatorMockRequests{mock: m}
	m.RequestsMock.callArgs = []*FilamentCalculatorMockRequestsParams{}

	m.ResultDuplicateMock = mFilamentCalculatorMockResultDuplicate{mock: m}
	m.ResultDuplicateMock.callArgs = []*FilamentCalculatorMockResultDuplicateParams{}

	return m
}

type mFilamentCalculatorMockOpenedRequests struct {
	mock               *FilamentCalculatorMock
	defaultExpectation *FilamentCalculatorMockOpenedRequestsExpectation
	expectations       []*FilamentCalculatorMockOpenedRequestsExpectation

	callArgs []*FilamentCalculatorMockOpenedRequestsParams
	mutex    sync.RWMutex
}

// FilamentCalculatorMockOpenedRequestsExpectation specifies expectation struct of the FilamentCalculator.OpenedRequests
type FilamentCalculatorMockOpenedRequestsExpectation struct {
	mock    *FilamentCalculatorMock
	params  *FilamentCalculatorMockOpenedRequestsParams
	results *FilamentCalculatorMockOpenedRequestsResults
	Counter uint64
}

// FilamentCalculatorMockOpenedRequestsParams contains parameters of the FilamentCalculator.OpenedRequests
type FilamentCalculatorMockOpenedRequestsParams struct {
	ctx         context.Context
	pulse       insolar.PulseNumber
	objectID    insolar.ID
	pendingOnly bool
}

// FilamentCalculatorMockOpenedRequestsResults contains results of the FilamentCalculator.OpenedRequests
type FilamentCalculatorMockOpenedRequestsResults struct {
	ca1 []record.CompositeFilamentRecord
	err error
}

// Expect sets up expected params for FilamentCalculator.OpenedRequests
func (mmOpenedRequests *mFilamentCalculatorMockOpenedRequests) Expect(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool) *mFilamentCalculatorMockOpenedRequests {
	if mmOpenedRequests.mock.funcOpenedRequests != nil {
		mmOpenedRequests.mock.t.Fatalf("FilamentCalculatorMock.OpenedRequests mock is already set by Set")
	}

	if mmOpenedRequests.defaultExpectation == nil {
		mmOpenedRequests.defaultExpectation = &FilamentCalculatorMockOpenedRequestsExpectation{}
	}

	mmOpenedRequests.defaultExpectation.params = &FilamentCalculatorMockOpenedRequestsParams{ctx, pulse, objectID, pendingOnly}
	for _, e := range mmOpenedRequests.expectations {
		if minimock.Equal(e.params, mmOpenedRequests.defaultExpectation.params) {
			mmOpenedRequests.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOpenedRequests.defaultExpectation.params)
		}
	}

	return mmOpenedRequests
}

// Inspect accepts an inspector function that has same arguments as the FilamentCalculator.OpenedRequests
func (mmOpenedRequests *mFilamentCalculatorMockOpenedRequests) Inspect(f func(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool)) *mFilamentCalculatorMockOpenedRequests {
	if mmOpenedRequests.mock.inspectFuncOpenedRequests != nil {
		mmOpenedRequests.mock.t.Fatalf("Inspect function is already set for FilamentCalculatorMock.OpenedRequests")
	}

	mmOpenedRequests.mock.inspectFuncOpenedRequests = f

	return mmOpenedRequests
}

// Return sets up results that will be returned by FilamentCalculator.OpenedRequests
func (mmOpenedRequests *mFilamentCalculatorMockOpenedRequests) Return(ca1 []record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	if mmOpenedRequests.mock.funcOpenedRequests != nil {
		mmOpenedRequests.mock.t.Fatalf("FilamentCalculatorMock.OpenedRequests mock is already set by Set")
	}

	if mmOpenedRequests.defaultExpectation == nil {
		mmOpenedRequests.defaultExpectation = &FilamentCalculatorMockOpenedRequestsExpectation{mock: mmOpenedRequests.mock}
	}
	mmOpenedRequests.defaultExpectation.results = &FilamentCalculatorMockOpenedRequestsResults{ca1, err}
	return mmOpenedRequests.mock
}

//Set uses given function f to mock the FilamentCalculator.OpenedRequests method
func (mmOpenedRequests *mFilamentCalculatorMockOpenedRequests) Set(f func(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool) (ca1 []record.CompositeFilamentRecord, err error)) *FilamentCalculatorMock {
	if mmOpenedRequests.defaultExpectation != nil {
		mmOpenedRequests.mock.t.Fatalf("Default expectation is already set for the FilamentCalculator.OpenedRequests method")
	}

	if len(mmOpenedRequests.expectations) > 0 {
		mmOpenedRequests.mock.t.Fatalf("Some expectations are already set for the FilamentCalculator.OpenedRequests method")
	}

	mmOpenedRequests.mock.funcOpenedRequests = f
	return mmOpenedRequests.mock
}

// When sets expectation for the FilamentCalculator.OpenedRequests which will trigger the result defined by the following
// Then helper
func (mmOpenedRequests *mFilamentCalculatorMockOpenedRequests) When(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool) *FilamentCalculatorMockOpenedRequestsExpectation {
	if mmOpenedRequests.mock.funcOpenedRequests != nil {
		mmOpenedRequests.mock.t.Fatalf("FilamentCalculatorMock.OpenedRequests mock is already set by Set")
	}

	expectation := &FilamentCalculatorMockOpenedRequestsExpectation{
		mock:   mmOpenedRequests.mock,
		params: &FilamentCalculatorMockOpenedRequestsParams{ctx, pulse, objectID, pendingOnly},
	}
	mmOpenedRequests.expectations = append(mmOpenedRequests.expectations, expectation)
	return expectation
}

// Then sets up FilamentCalculator.OpenedRequests return parameters for the expectation previously defined by the When method
func (e *FilamentCalculatorMockOpenedRequestsExpectation) Then(ca1 []record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	e.results = &FilamentCalculatorMockOpenedRequestsResults{ca1, err}
	return e.mock
}

// OpenedRequests implements FilamentCalculator
func (mmOpenedRequests *FilamentCalculatorMock) OpenedRequests(ctx context.Context, pulse insolar.PulseNumber, objectID insolar.ID, pendingOnly bool) (ca1 []record.CompositeFilamentRecord, err error) {
	mm_atomic.AddUint64(&mmOpenedRequests.beforeOpenedRequestsCounter, 1)
	defer mm_atomic.AddUint64(&mmOpenedRequests.afterOpenedRequestsCounter, 1)

	if mmOpenedRequests.inspectFuncOpenedRequests != nil {
		mmOpenedRequests.inspectFuncOpenedRequests(ctx, pulse, objectID, pendingOnly)
	}

	params := &FilamentCalculatorMockOpenedRequestsParams{ctx, pulse, objectID, pendingOnly}

	// Record call args
	mmOpenedRequests.OpenedRequestsMock.mutex.Lock()
	mmOpenedRequests.OpenedRequestsMock.callArgs = append(mmOpenedRequests.OpenedRequestsMock.callArgs, params)
	mmOpenedRequests.OpenedRequestsMock.mutex.Unlock()

	for _, e := range mmOpenedRequests.OpenedRequestsMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmOpenedRequests.OpenedRequestsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOpenedRequests.OpenedRequestsMock.defaultExpectation.Counter, 1)
		want := mmOpenedRequests.OpenedRequestsMock.defaultExpectation.params
		got := FilamentCalculatorMockOpenedRequestsParams{ctx, pulse, objectID, pendingOnly}
		if want != nil && !minimock.Equal(*want, got) {
			mmOpenedRequests.t.Errorf("FilamentCalculatorMock.OpenedRequests got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmOpenedRequests.OpenedRequestsMock.defaultExpectation.results
		if results == nil {
			mmOpenedRequests.t.Fatal("No results are set for the FilamentCalculatorMock.OpenedRequests")
		}
		return (*results).ca1, (*results).err
	}
	if mmOpenedRequests.funcOpenedRequests != nil {
		return mmOpenedRequests.funcOpenedRequests(ctx, pulse, objectID, pendingOnly)
	}
	mmOpenedRequests.t.Fatalf("Unexpected call to FilamentCalculatorMock.OpenedRequests. %v %v %v %v", ctx, pulse, objectID, pendingOnly)
	return
}

// OpenedRequestsAfterCounter returns a count of finished FilamentCalculatorMock.OpenedRequests invocations
func (mmOpenedRequests *FilamentCalculatorMock) OpenedRequestsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOpenedRequests.afterOpenedRequestsCounter)
}

// OpenedRequestsBeforeCounter returns a count of FilamentCalculatorMock.OpenedRequests invocations
func (mmOpenedRequests *FilamentCalculatorMock) OpenedRequestsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOpenedRequests.beforeOpenedRequestsCounter)
}

// Calls returns a list of arguments used in each call to FilamentCalculatorMock.OpenedRequests.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOpenedRequests *mFilamentCalculatorMockOpenedRequests) Calls() []*FilamentCalculatorMockOpenedRequestsParams {
	mmOpenedRequests.mutex.RLock()

	argCopy := make([]*FilamentCalculatorMockOpenedRequestsParams, len(mmOpenedRequests.callArgs))
	copy(argCopy, mmOpenedRequests.callArgs)

	mmOpenedRequests.mutex.RUnlock()

	return argCopy
}

// MinimockOpenedRequestsDone returns true if the count of the OpenedRequests invocations corresponds
// the number of defined expectations
func (m *FilamentCalculatorMock) MinimockOpenedRequestsDone() bool {
	for _, e := range m.OpenedRequestsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OpenedRequestsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOpenedRequestsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOpenedRequests != nil && mm_atomic.LoadUint64(&m.afterOpenedRequestsCounter) < 1 {
		return false
	}
	return true
}

// MinimockOpenedRequestsInspect logs each unmet expectation
func (m *FilamentCalculatorMock) MinimockOpenedRequestsInspect() {
	for _, e := range m.OpenedRequestsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FilamentCalculatorMock.OpenedRequests with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.OpenedRequestsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterOpenedRequestsCounter) < 1 {
		if m.OpenedRequestsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FilamentCalculatorMock.OpenedRequests")
		} else {
			m.t.Errorf("Expected call to FilamentCalculatorMock.OpenedRequests with params: %#v", *m.OpenedRequestsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOpenedRequests != nil && mm_atomic.LoadUint64(&m.afterOpenedRequestsCounter) < 1 {
		m.t.Error("Expected call to FilamentCalculatorMock.OpenedRequests")
	}
}

type mFilamentCalculatorMockRequestDuplicate struct {
	mock               *FilamentCalculatorMock
	defaultExpectation *FilamentCalculatorMockRequestDuplicateExpectation
	expectations       []*FilamentCalculatorMockRequestDuplicateExpectation

	callArgs []*FilamentCalculatorMockRequestDuplicateParams
	mutex    sync.RWMutex
}

// FilamentCalculatorMockRequestDuplicateExpectation specifies expectation struct of the FilamentCalculator.RequestDuplicate
type FilamentCalculatorMockRequestDuplicateExpectation struct {
	mock    *FilamentCalculatorMock
	params  *FilamentCalculatorMockRequestDuplicateParams
	results *FilamentCalculatorMockRequestDuplicateResults
	Counter uint64
}

// FilamentCalculatorMockRequestDuplicateParams contains parameters of the FilamentCalculator.RequestDuplicate
type FilamentCalculatorMockRequestDuplicateParams struct {
	ctx       context.Context
	objectID  insolar.ID
	requestID insolar.ID
	request   record.Request
}

// FilamentCalculatorMockRequestDuplicateResults contains results of the FilamentCalculator.RequestDuplicate
type FilamentCalculatorMockRequestDuplicateResults struct {
	foundRequest *record.CompositeFilamentRecord
	foundResult  *record.CompositeFilamentRecord
	err          error
}

// Expect sets up expected params for FilamentCalculator.RequestDuplicate
func (mmRequestDuplicate *mFilamentCalculatorMockRequestDuplicate) Expect(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request) *mFilamentCalculatorMockRequestDuplicate {
	if mmRequestDuplicate.mock.funcRequestDuplicate != nil {
		mmRequestDuplicate.mock.t.Fatalf("FilamentCalculatorMock.RequestDuplicate mock is already set by Set")
	}

	if mmRequestDuplicate.defaultExpectation == nil {
		mmRequestDuplicate.defaultExpectation = &FilamentCalculatorMockRequestDuplicateExpectation{}
	}

	mmRequestDuplicate.defaultExpectation.params = &FilamentCalculatorMockRequestDuplicateParams{ctx, objectID, requestID, request}
	for _, e := range mmRequestDuplicate.expectations {
		if minimock.Equal(e.params, mmRequestDuplicate.defaultExpectation.params) {
			mmRequestDuplicate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRequestDuplicate.defaultExpectation.params)
		}
	}

	return mmRequestDuplicate
}

// Inspect accepts an inspector function that has same arguments as the FilamentCalculator.RequestDuplicate
func (mmRequestDuplicate *mFilamentCalculatorMockRequestDuplicate) Inspect(f func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request)) *mFilamentCalculatorMockRequestDuplicate {
	if mmRequestDuplicate.mock.inspectFuncRequestDuplicate != nil {
		mmRequestDuplicate.mock.t.Fatalf("Inspect function is already set for FilamentCalculatorMock.RequestDuplicate")
	}

	mmRequestDuplicate.mock.inspectFuncRequestDuplicate = f

	return mmRequestDuplicate
}

// Return sets up results that will be returned by FilamentCalculator.RequestDuplicate
func (mmRequestDuplicate *mFilamentCalculatorMockRequestDuplicate) Return(foundRequest *record.CompositeFilamentRecord, foundResult *record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	if mmRequestDuplicate.mock.funcRequestDuplicate != nil {
		mmRequestDuplicate.mock.t.Fatalf("FilamentCalculatorMock.RequestDuplicate mock is already set by Set")
	}

	if mmRequestDuplicate.defaultExpectation == nil {
		mmRequestDuplicate.defaultExpectation = &FilamentCalculatorMockRequestDuplicateExpectation{mock: mmRequestDuplicate.mock}
	}
	mmRequestDuplicate.defaultExpectation.results = &FilamentCalculatorMockRequestDuplicateResults{foundRequest, foundResult, err}
	return mmRequestDuplicate.mock
}

//Set uses given function f to mock the FilamentCalculator.RequestDuplicate method
func (mmRequestDuplicate *mFilamentCalculatorMockRequestDuplicate) Set(f func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request) (foundRequest *record.CompositeFilamentRecord, foundResult *record.CompositeFilamentRecord, err error)) *FilamentCalculatorMock {
	if mmRequestDuplicate.defaultExpectation != nil {
		mmRequestDuplicate.mock.t.Fatalf("Default expectation is already set for the FilamentCalculator.RequestDuplicate method")
	}

	if len(mmRequestDuplicate.expectations) > 0 {
		mmRequestDuplicate.mock.t.Fatalf("Some expectations are already set for the FilamentCalculator.RequestDuplicate method")
	}

	mmRequestDuplicate.mock.funcRequestDuplicate = f
	return mmRequestDuplicate.mock
}

// When sets expectation for the FilamentCalculator.RequestDuplicate which will trigger the result defined by the following
// Then helper
func (mmRequestDuplicate *mFilamentCalculatorMockRequestDuplicate) When(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request) *FilamentCalculatorMockRequestDuplicateExpectation {
	if mmRequestDuplicate.mock.funcRequestDuplicate != nil {
		mmRequestDuplicate.mock.t.Fatalf("FilamentCalculatorMock.RequestDuplicate mock is already set by Set")
	}

	expectation := &FilamentCalculatorMockRequestDuplicateExpectation{
		mock:   mmRequestDuplicate.mock,
		params: &FilamentCalculatorMockRequestDuplicateParams{ctx, objectID, requestID, request},
	}
	mmRequestDuplicate.expectations = append(mmRequestDuplicate.expectations, expectation)
	return expectation
}

// Then sets up FilamentCalculator.RequestDuplicate return parameters for the expectation previously defined by the When method
func (e *FilamentCalculatorMockRequestDuplicateExpectation) Then(foundRequest *record.CompositeFilamentRecord, foundResult *record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	e.results = &FilamentCalculatorMockRequestDuplicateResults{foundRequest, foundResult, err}
	return e.mock
}

// RequestDuplicate implements FilamentCalculator
func (mmRequestDuplicate *FilamentCalculatorMock) RequestDuplicate(ctx context.Context, objectID insolar.ID, requestID insolar.ID, request record.Request) (foundRequest *record.CompositeFilamentRecord, foundResult *record.CompositeFilamentRecord, err error) {
	mm_atomic.AddUint64(&mmRequestDuplicate.beforeRequestDuplicateCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestDuplicate.afterRequestDuplicateCounter, 1)

	if mmRequestDuplicate.inspectFuncRequestDuplicate != nil {
		mmRequestDuplicate.inspectFuncRequestDuplicate(ctx, objectID, requestID, request)
	}

	params := &FilamentCalculatorMockRequestDuplicateParams{ctx, objectID, requestID, request}

	// Record call args
	mmRequestDuplicate.RequestDuplicateMock.mutex.Lock()
	mmRequestDuplicate.RequestDuplicateMock.callArgs = append(mmRequestDuplicate.RequestDuplicateMock.callArgs, params)
	mmRequestDuplicate.RequestDuplicateMock.mutex.Unlock()

	for _, e := range mmRequestDuplicate.RequestDuplicateMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.foundRequest, e.results.foundResult, e.results.err
		}
	}

	if mmRequestDuplicate.RequestDuplicateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestDuplicate.RequestDuplicateMock.defaultExpectation.Counter, 1)
		want := mmRequestDuplicate.RequestDuplicateMock.defaultExpectation.params
		got := FilamentCalculatorMockRequestDuplicateParams{ctx, objectID, requestID, request}
		if want != nil && !minimock.Equal(*want, got) {
			mmRequestDuplicate.t.Errorf("FilamentCalculatorMock.RequestDuplicate got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmRequestDuplicate.RequestDuplicateMock.defaultExpectation.results
		if results == nil {
			mmRequestDuplicate.t.Fatal("No results are set for the FilamentCalculatorMock.RequestDuplicate")
		}
		return (*results).foundRequest, (*results).foundResult, (*results).err
	}
	if mmRequestDuplicate.funcRequestDuplicate != nil {
		return mmRequestDuplicate.funcRequestDuplicate(ctx, objectID, requestID, request)
	}
	mmRequestDuplicate.t.Fatalf("Unexpected call to FilamentCalculatorMock.RequestDuplicate. %v %v %v %v", ctx, objectID, requestID, request)
	return
}

// RequestDuplicateAfterCounter returns a count of finished FilamentCalculatorMock.RequestDuplicate invocations
func (mmRequestDuplicate *FilamentCalculatorMock) RequestDuplicateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestDuplicate.afterRequestDuplicateCounter)
}

// RequestDuplicateBeforeCounter returns a count of FilamentCalculatorMock.RequestDuplicate invocations
func (mmRequestDuplicate *FilamentCalculatorMock) RequestDuplicateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestDuplicate.beforeRequestDuplicateCounter)
}

// Calls returns a list of arguments used in each call to FilamentCalculatorMock.RequestDuplicate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRequestDuplicate *mFilamentCalculatorMockRequestDuplicate) Calls() []*FilamentCalculatorMockRequestDuplicateParams {
	mmRequestDuplicate.mutex.RLock()

	argCopy := make([]*FilamentCalculatorMockRequestDuplicateParams, len(mmRequestDuplicate.callArgs))
	copy(argCopy, mmRequestDuplicate.callArgs)

	mmRequestDuplicate.mutex.RUnlock()

	return argCopy
}

// MinimockRequestDuplicateDone returns true if the count of the RequestDuplicate invocations corresponds
// the number of defined expectations
func (m *FilamentCalculatorMock) MinimockRequestDuplicateDone() bool {
	for _, e := range m.RequestDuplicateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestDuplicateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestDuplicateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestDuplicate != nil && mm_atomic.LoadUint64(&m.afterRequestDuplicateCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestDuplicateInspect logs each unmet expectation
func (m *FilamentCalculatorMock) MinimockRequestDuplicateInspect() {
	for _, e := range m.RequestDuplicateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FilamentCalculatorMock.RequestDuplicate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestDuplicateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestDuplicateCounter) < 1 {
		if m.RequestDuplicateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FilamentCalculatorMock.RequestDuplicate")
		} else {
			m.t.Errorf("Expected call to FilamentCalculatorMock.RequestDuplicate with params: %#v", *m.RequestDuplicateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestDuplicate != nil && mm_atomic.LoadUint64(&m.afterRequestDuplicateCounter) < 1 {
		m.t.Error("Expected call to FilamentCalculatorMock.RequestDuplicate")
	}
}

type mFilamentCalculatorMockRequestInfo struct {
	mock               *FilamentCalculatorMock
	defaultExpectation *FilamentCalculatorMockRequestInfoExpectation
	expectations       []*FilamentCalculatorMockRequestInfoExpectation

	callArgs []*FilamentCalculatorMockRequestInfoParams
	mutex    sync.RWMutex
}

// FilamentCalculatorMockRequestInfoExpectation specifies expectation struct of the FilamentCalculator.RequestInfo
type FilamentCalculatorMockRequestInfoExpectation struct {
	mock    *FilamentCalculatorMock
	params  *FilamentCalculatorMockRequestInfoParams
	results *FilamentCalculatorMockRequestInfoResults
	Counter uint64
}

// FilamentCalculatorMockRequestInfoParams contains parameters of the FilamentCalculator.RequestInfo
type FilamentCalculatorMockRequestInfoParams struct {
	ctx       context.Context
	objectID  insolar.ID
	requestID insolar.ID
	pulse     insolar.PulseNumber
}

// FilamentCalculatorMockRequestInfoResults contains results of the FilamentCalculator.RequestInfo
type FilamentCalculatorMockRequestInfoResults struct {
	requestInfo FilamentsRequestInfo
	err         error
}

// Expect sets up expected params for FilamentCalculator.RequestInfo
func (mmRequestInfo *mFilamentCalculatorMockRequestInfo) Expect(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber) *mFilamentCalculatorMockRequestInfo {
	if mmRequestInfo.mock.funcRequestInfo != nil {
		mmRequestInfo.mock.t.Fatalf("FilamentCalculatorMock.RequestInfo mock is already set by Set")
	}

	if mmRequestInfo.defaultExpectation == nil {
		mmRequestInfo.defaultExpectation = &FilamentCalculatorMockRequestInfoExpectation{}
	}

	mmRequestInfo.defaultExpectation.params = &FilamentCalculatorMockRequestInfoParams{ctx, objectID, requestID, pulse}
	for _, e := range mmRequestInfo.expectations {
		if minimock.Equal(e.params, mmRequestInfo.defaultExpectation.params) {
			mmRequestInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRequestInfo.defaultExpectation.params)
		}
	}

	return mmRequestInfo
}

// Inspect accepts an inspector function that has same arguments as the FilamentCalculator.RequestInfo
func (mmRequestInfo *mFilamentCalculatorMockRequestInfo) Inspect(f func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber)) *mFilamentCalculatorMockRequestInfo {
	if mmRequestInfo.mock.inspectFuncRequestInfo != nil {
		mmRequestInfo.mock.t.Fatalf("Inspect function is already set for FilamentCalculatorMock.RequestInfo")
	}

	mmRequestInfo.mock.inspectFuncRequestInfo = f

	return mmRequestInfo
}

// Return sets up results that will be returned by FilamentCalculator.RequestInfo
func (mmRequestInfo *mFilamentCalculatorMockRequestInfo) Return(requestInfo FilamentsRequestInfo, err error) *FilamentCalculatorMock {
	if mmRequestInfo.mock.funcRequestInfo != nil {
		mmRequestInfo.mock.t.Fatalf("FilamentCalculatorMock.RequestInfo mock is already set by Set")
	}

	if mmRequestInfo.defaultExpectation == nil {
		mmRequestInfo.defaultExpectation = &FilamentCalculatorMockRequestInfoExpectation{mock: mmRequestInfo.mock}
	}
	mmRequestInfo.defaultExpectation.results = &FilamentCalculatorMockRequestInfoResults{requestInfo, err}
	return mmRequestInfo.mock
}

//Set uses given function f to mock the FilamentCalculator.RequestInfo method
func (mmRequestInfo *mFilamentCalculatorMockRequestInfo) Set(f func(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber) (requestInfo FilamentsRequestInfo, err error)) *FilamentCalculatorMock {
	if mmRequestInfo.defaultExpectation != nil {
		mmRequestInfo.mock.t.Fatalf("Default expectation is already set for the FilamentCalculator.RequestInfo method")
	}

	if len(mmRequestInfo.expectations) > 0 {
		mmRequestInfo.mock.t.Fatalf("Some expectations are already set for the FilamentCalculator.RequestInfo method")
	}

	mmRequestInfo.mock.funcRequestInfo = f
	return mmRequestInfo.mock
}

// When sets expectation for the FilamentCalculator.RequestInfo which will trigger the result defined by the following
// Then helper
func (mmRequestInfo *mFilamentCalculatorMockRequestInfo) When(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber) *FilamentCalculatorMockRequestInfoExpectation {
	if mmRequestInfo.mock.funcRequestInfo != nil {
		mmRequestInfo.mock.t.Fatalf("FilamentCalculatorMock.RequestInfo mock is already set by Set")
	}

	expectation := &FilamentCalculatorMockRequestInfoExpectation{
		mock:   mmRequestInfo.mock,
		params: &FilamentCalculatorMockRequestInfoParams{ctx, objectID, requestID, pulse},
	}
	mmRequestInfo.expectations = append(mmRequestInfo.expectations, expectation)
	return expectation
}

// Then sets up FilamentCalculator.RequestInfo return parameters for the expectation previously defined by the When method
func (e *FilamentCalculatorMockRequestInfoExpectation) Then(requestInfo FilamentsRequestInfo, err error) *FilamentCalculatorMock {
	e.results = &FilamentCalculatorMockRequestInfoResults{requestInfo, err}
	return e.mock
}

// RequestInfo implements FilamentCalculator
func (mmRequestInfo *FilamentCalculatorMock) RequestInfo(ctx context.Context, objectID insolar.ID, requestID insolar.ID, pulse insolar.PulseNumber) (requestInfo FilamentsRequestInfo, err error) {
	mm_atomic.AddUint64(&mmRequestInfo.beforeRequestInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmRequestInfo.afterRequestInfoCounter, 1)

	if mmRequestInfo.inspectFuncRequestInfo != nil {
		mmRequestInfo.inspectFuncRequestInfo(ctx, objectID, requestID, pulse)
	}

	params := &FilamentCalculatorMockRequestInfoParams{ctx, objectID, requestID, pulse}

	// Record call args
	mmRequestInfo.RequestInfoMock.mutex.Lock()
	mmRequestInfo.RequestInfoMock.callArgs = append(mmRequestInfo.RequestInfoMock.callArgs, params)
	mmRequestInfo.RequestInfoMock.mutex.Unlock()

	for _, e := range mmRequestInfo.RequestInfoMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.requestInfo, e.results.err
		}
	}

	if mmRequestInfo.RequestInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequestInfo.RequestInfoMock.defaultExpectation.Counter, 1)
		want := mmRequestInfo.RequestInfoMock.defaultExpectation.params
		got := FilamentCalculatorMockRequestInfoParams{ctx, objectID, requestID, pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmRequestInfo.t.Errorf("FilamentCalculatorMock.RequestInfo got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmRequestInfo.RequestInfoMock.defaultExpectation.results
		if results == nil {
			mmRequestInfo.t.Fatal("No results are set for the FilamentCalculatorMock.RequestInfo")
		}
		return (*results).requestInfo, (*results).err
	}
	if mmRequestInfo.funcRequestInfo != nil {
		return mmRequestInfo.funcRequestInfo(ctx, objectID, requestID, pulse)
	}
	mmRequestInfo.t.Fatalf("Unexpected call to FilamentCalculatorMock.RequestInfo. %v %v %v %v", ctx, objectID, requestID, pulse)
	return
}

// RequestInfoAfterCounter returns a count of finished FilamentCalculatorMock.RequestInfo invocations
func (mmRequestInfo *FilamentCalculatorMock) RequestInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestInfo.afterRequestInfoCounter)
}

// RequestInfoBeforeCounter returns a count of FilamentCalculatorMock.RequestInfo invocations
func (mmRequestInfo *FilamentCalculatorMock) RequestInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequestInfo.beforeRequestInfoCounter)
}

// Calls returns a list of arguments used in each call to FilamentCalculatorMock.RequestInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRequestInfo *mFilamentCalculatorMockRequestInfo) Calls() []*FilamentCalculatorMockRequestInfoParams {
	mmRequestInfo.mutex.RLock()

	argCopy := make([]*FilamentCalculatorMockRequestInfoParams, len(mmRequestInfo.callArgs))
	copy(argCopy, mmRequestInfo.callArgs)

	mmRequestInfo.mutex.RUnlock()

	return argCopy
}

// MinimockRequestInfoDone returns true if the count of the RequestInfo invocations corresponds
// the number of defined expectations
func (m *FilamentCalculatorMock) MinimockRequestInfoDone() bool {
	for _, e := range m.RequestInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestInfo != nil && mm_atomic.LoadUint64(&m.afterRequestInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestInfoInspect logs each unmet expectation
func (m *FilamentCalculatorMock) MinimockRequestInfoInspect() {
	for _, e := range m.RequestInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FilamentCalculatorMock.RequestInfo with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestInfoCounter) < 1 {
		if m.RequestInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FilamentCalculatorMock.RequestInfo")
		} else {
			m.t.Errorf("Expected call to FilamentCalculatorMock.RequestInfo with params: %#v", *m.RequestInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequestInfo != nil && mm_atomic.LoadUint64(&m.afterRequestInfoCounter) < 1 {
		m.t.Error("Expected call to FilamentCalculatorMock.RequestInfo")
	}
}

type mFilamentCalculatorMockRequests struct {
	mock               *FilamentCalculatorMock
	defaultExpectation *FilamentCalculatorMockRequestsExpectation
	expectations       []*FilamentCalculatorMockRequestsExpectation

	callArgs []*FilamentCalculatorMockRequestsParams
	mutex    sync.RWMutex
}

// FilamentCalculatorMockRequestsExpectation specifies expectation struct of the FilamentCalculator.Requests
type FilamentCalculatorMockRequestsExpectation struct {
	mock    *FilamentCalculatorMock
	params  *FilamentCalculatorMockRequestsParams
	results *FilamentCalculatorMockRequestsResults
	Counter uint64
}

// FilamentCalculatorMockRequestsParams contains parameters of the FilamentCalculator.Requests
type FilamentCalculatorMockRequestsParams struct {
	ctx       context.Context
	objectID  insolar.ID
	from      insolar.ID
	readUntil insolar.PulseNumber
}

// FilamentCalculatorMockRequestsResults contains results of the FilamentCalculator.Requests
type FilamentCalculatorMockRequestsResults struct {
	ca1 []record.CompositeFilamentRecord
	err error
}

// Expect sets up expected params for FilamentCalculator.Requests
func (mmRequests *mFilamentCalculatorMockRequests) Expect(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber) *mFilamentCalculatorMockRequests {
	if mmRequests.mock.funcRequests != nil {
		mmRequests.mock.t.Fatalf("FilamentCalculatorMock.Requests mock is already set by Set")
	}

	if mmRequests.defaultExpectation == nil {
		mmRequests.defaultExpectation = &FilamentCalculatorMockRequestsExpectation{}
	}

	mmRequests.defaultExpectation.params = &FilamentCalculatorMockRequestsParams{ctx, objectID, from, readUntil}
	for _, e := range mmRequests.expectations {
		if minimock.Equal(e.params, mmRequests.defaultExpectation.params) {
			mmRequests.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRequests.defaultExpectation.params)
		}
	}

	return mmRequests
}

// Inspect accepts an inspector function that has same arguments as the FilamentCalculator.Requests
func (mmRequests *mFilamentCalculatorMockRequests) Inspect(f func(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber)) *mFilamentCalculatorMockRequests {
	if mmRequests.mock.inspectFuncRequests != nil {
		mmRequests.mock.t.Fatalf("Inspect function is already set for FilamentCalculatorMock.Requests")
	}

	mmRequests.mock.inspectFuncRequests = f

	return mmRequests
}

// Return sets up results that will be returned by FilamentCalculator.Requests
func (mmRequests *mFilamentCalculatorMockRequests) Return(ca1 []record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	if mmRequests.mock.funcRequests != nil {
		mmRequests.mock.t.Fatalf("FilamentCalculatorMock.Requests mock is already set by Set")
	}

	if mmRequests.defaultExpectation == nil {
		mmRequests.defaultExpectation = &FilamentCalculatorMockRequestsExpectation{mock: mmRequests.mock}
	}
	mmRequests.defaultExpectation.results = &FilamentCalculatorMockRequestsResults{ca1, err}
	return mmRequests.mock
}

//Set uses given function f to mock the FilamentCalculator.Requests method
func (mmRequests *mFilamentCalculatorMockRequests) Set(f func(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber) (ca1 []record.CompositeFilamentRecord, err error)) *FilamentCalculatorMock {
	if mmRequests.defaultExpectation != nil {
		mmRequests.mock.t.Fatalf("Default expectation is already set for the FilamentCalculator.Requests method")
	}

	if len(mmRequests.expectations) > 0 {
		mmRequests.mock.t.Fatalf("Some expectations are already set for the FilamentCalculator.Requests method")
	}

	mmRequests.mock.funcRequests = f
	return mmRequests.mock
}

// When sets expectation for the FilamentCalculator.Requests which will trigger the result defined by the following
// Then helper
func (mmRequests *mFilamentCalculatorMockRequests) When(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber) *FilamentCalculatorMockRequestsExpectation {
	if mmRequests.mock.funcRequests != nil {
		mmRequests.mock.t.Fatalf("FilamentCalculatorMock.Requests mock is already set by Set")
	}

	expectation := &FilamentCalculatorMockRequestsExpectation{
		mock:   mmRequests.mock,
		params: &FilamentCalculatorMockRequestsParams{ctx, objectID, from, readUntil},
	}
	mmRequests.expectations = append(mmRequests.expectations, expectation)
	return expectation
}

// Then sets up FilamentCalculator.Requests return parameters for the expectation previously defined by the When method
func (e *FilamentCalculatorMockRequestsExpectation) Then(ca1 []record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	e.results = &FilamentCalculatorMockRequestsResults{ca1, err}
	return e.mock
}

// Requests implements FilamentCalculator
func (mmRequests *FilamentCalculatorMock) Requests(ctx context.Context, objectID insolar.ID, from insolar.ID, readUntil insolar.PulseNumber) (ca1 []record.CompositeFilamentRecord, err error) {
	mm_atomic.AddUint64(&mmRequests.beforeRequestsCounter, 1)
	defer mm_atomic.AddUint64(&mmRequests.afterRequestsCounter, 1)

	if mmRequests.inspectFuncRequests != nil {
		mmRequests.inspectFuncRequests(ctx, objectID, from, readUntil)
	}

	params := &FilamentCalculatorMockRequestsParams{ctx, objectID, from, readUntil}

	// Record call args
	mmRequests.RequestsMock.mutex.Lock()
	mmRequests.RequestsMock.callArgs = append(mmRequests.RequestsMock.callArgs, params)
	mmRequests.RequestsMock.mutex.Unlock()

	for _, e := range mmRequests.RequestsMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ca1, e.results.err
		}
	}

	if mmRequests.RequestsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRequests.RequestsMock.defaultExpectation.Counter, 1)
		want := mmRequests.RequestsMock.defaultExpectation.params
		got := FilamentCalculatorMockRequestsParams{ctx, objectID, from, readUntil}
		if want != nil && !minimock.Equal(*want, got) {
			mmRequests.t.Errorf("FilamentCalculatorMock.Requests got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmRequests.RequestsMock.defaultExpectation.results
		if results == nil {
			mmRequests.t.Fatal("No results are set for the FilamentCalculatorMock.Requests")
		}
		return (*results).ca1, (*results).err
	}
	if mmRequests.funcRequests != nil {
		return mmRequests.funcRequests(ctx, objectID, from, readUntil)
	}
	mmRequests.t.Fatalf("Unexpected call to FilamentCalculatorMock.Requests. %v %v %v %v", ctx, objectID, from, readUntil)
	return
}

// RequestsAfterCounter returns a count of finished FilamentCalculatorMock.Requests invocations
func (mmRequests *FilamentCalculatorMock) RequestsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequests.afterRequestsCounter)
}

// RequestsBeforeCounter returns a count of FilamentCalculatorMock.Requests invocations
func (mmRequests *FilamentCalculatorMock) RequestsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRequests.beforeRequestsCounter)
}

// Calls returns a list of arguments used in each call to FilamentCalculatorMock.Requests.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRequests *mFilamentCalculatorMockRequests) Calls() []*FilamentCalculatorMockRequestsParams {
	mmRequests.mutex.RLock()

	argCopy := make([]*FilamentCalculatorMockRequestsParams, len(mmRequests.callArgs))
	copy(argCopy, mmRequests.callArgs)

	mmRequests.mutex.RUnlock()

	return argCopy
}

// MinimockRequestsDone returns true if the count of the Requests invocations corresponds
// the number of defined expectations
func (m *FilamentCalculatorMock) MinimockRequestsDone() bool {
	for _, e := range m.RequestsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequests != nil && mm_atomic.LoadUint64(&m.afterRequestsCounter) < 1 {
		return false
	}
	return true
}

// MinimockRequestsInspect logs each unmet expectation
func (m *FilamentCalculatorMock) MinimockRequestsInspect() {
	for _, e := range m.RequestsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FilamentCalculatorMock.Requests with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RequestsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRequestsCounter) < 1 {
		if m.RequestsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FilamentCalculatorMock.Requests")
		} else {
			m.t.Errorf("Expected call to FilamentCalculatorMock.Requests with params: %#v", *m.RequestsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRequests != nil && mm_atomic.LoadUint64(&m.afterRequestsCounter) < 1 {
		m.t.Error("Expected call to FilamentCalculatorMock.Requests")
	}
}

type mFilamentCalculatorMockResultDuplicate struct {
	mock               *FilamentCalculatorMock
	defaultExpectation *FilamentCalculatorMockResultDuplicateExpectation
	expectations       []*FilamentCalculatorMockResultDuplicateExpectation

	callArgs []*FilamentCalculatorMockResultDuplicateParams
	mutex    sync.RWMutex
}

// FilamentCalculatorMockResultDuplicateExpectation specifies expectation struct of the FilamentCalculator.ResultDuplicate
type FilamentCalculatorMockResultDuplicateExpectation struct {
	mock    *FilamentCalculatorMock
	params  *FilamentCalculatorMockResultDuplicateParams
	results *FilamentCalculatorMockResultDuplicateResults
	Counter uint64
}

// FilamentCalculatorMockResultDuplicateParams contains parameters of the FilamentCalculator.ResultDuplicate
type FilamentCalculatorMockResultDuplicateParams struct {
	ctx      context.Context
	objectID insolar.ID
	resultID insolar.ID
	result   record.Result
}

// FilamentCalculatorMockResultDuplicateResults contains results of the FilamentCalculator.ResultDuplicate
type FilamentCalculatorMockResultDuplicateResults struct {
	foundResult *record.CompositeFilamentRecord
	err         error
}

// Expect sets up expected params for FilamentCalculator.ResultDuplicate
func (mmResultDuplicate *mFilamentCalculatorMockResultDuplicate) Expect(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result) *mFilamentCalculatorMockResultDuplicate {
	if mmResultDuplicate.mock.funcResultDuplicate != nil {
		mmResultDuplicate.mock.t.Fatalf("FilamentCalculatorMock.ResultDuplicate mock is already set by Set")
	}

	if mmResultDuplicate.defaultExpectation == nil {
		mmResultDuplicate.defaultExpectation = &FilamentCalculatorMockResultDuplicateExpectation{}
	}

	mmResultDuplicate.defaultExpectation.params = &FilamentCalculatorMockResultDuplicateParams{ctx, objectID, resultID, result}
	for _, e := range mmResultDuplicate.expectations {
		if minimock.Equal(e.params, mmResultDuplicate.defaultExpectation.params) {
			mmResultDuplicate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmResultDuplicate.defaultExpectation.params)
		}
	}

	return mmResultDuplicate
}

// Inspect accepts an inspector function that has same arguments as the FilamentCalculator.ResultDuplicate
func (mmResultDuplicate *mFilamentCalculatorMockResultDuplicate) Inspect(f func(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result)) *mFilamentCalculatorMockResultDuplicate {
	if mmResultDuplicate.mock.inspectFuncResultDuplicate != nil {
		mmResultDuplicate.mock.t.Fatalf("Inspect function is already set for FilamentCalculatorMock.ResultDuplicate")
	}

	mmResultDuplicate.mock.inspectFuncResultDuplicate = f

	return mmResultDuplicate
}

// Return sets up results that will be returned by FilamentCalculator.ResultDuplicate
func (mmResultDuplicate *mFilamentCalculatorMockResultDuplicate) Return(foundResult *record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	if mmResultDuplicate.mock.funcResultDuplicate != nil {
		mmResultDuplicate.mock.t.Fatalf("FilamentCalculatorMock.ResultDuplicate mock is already set by Set")
	}

	if mmResultDuplicate.defaultExpectation == nil {
		mmResultDuplicate.defaultExpectation = &FilamentCalculatorMockResultDuplicateExpectation{mock: mmResultDuplicate.mock}
	}
	mmResultDuplicate.defaultExpectation.results = &FilamentCalculatorMockResultDuplicateResults{foundResult, err}
	return mmResultDuplicate.mock
}

//Set uses given function f to mock the FilamentCalculator.ResultDuplicate method
func (mmResultDuplicate *mFilamentCalculatorMockResultDuplicate) Set(f func(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result) (foundResult *record.CompositeFilamentRecord, err error)) *FilamentCalculatorMock {
	if mmResultDuplicate.defaultExpectation != nil {
		mmResultDuplicate.mock.t.Fatalf("Default expectation is already set for the FilamentCalculator.ResultDuplicate method")
	}

	if len(mmResultDuplicate.expectations) > 0 {
		mmResultDuplicate.mock.t.Fatalf("Some expectations are already set for the FilamentCalculator.ResultDuplicate method")
	}

	mmResultDuplicate.mock.funcResultDuplicate = f
	return mmResultDuplicate.mock
}

// When sets expectation for the FilamentCalculator.ResultDuplicate which will trigger the result defined by the following
// Then helper
func (mmResultDuplicate *mFilamentCalculatorMockResultDuplicate) When(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result) *FilamentCalculatorMockResultDuplicateExpectation {
	if mmResultDuplicate.mock.funcResultDuplicate != nil {
		mmResultDuplicate.mock.t.Fatalf("FilamentCalculatorMock.ResultDuplicate mock is already set by Set")
	}

	expectation := &FilamentCalculatorMockResultDuplicateExpectation{
		mock:   mmResultDuplicate.mock,
		params: &FilamentCalculatorMockResultDuplicateParams{ctx, objectID, resultID, result},
	}
	mmResultDuplicate.expectations = append(mmResultDuplicate.expectations, expectation)
	return expectation
}

// Then sets up FilamentCalculator.ResultDuplicate return parameters for the expectation previously defined by the When method
func (e *FilamentCalculatorMockResultDuplicateExpectation) Then(foundResult *record.CompositeFilamentRecord, err error) *FilamentCalculatorMock {
	e.results = &FilamentCalculatorMockResultDuplicateResults{foundResult, err}
	return e.mock
}

// ResultDuplicate implements FilamentCalculator
func (mmResultDuplicate *FilamentCalculatorMock) ResultDuplicate(ctx context.Context, objectID insolar.ID, resultID insolar.ID, result record.Result) (foundResult *record.CompositeFilamentRecord, err error) {
	mm_atomic.AddUint64(&mmResultDuplicate.beforeResultDuplicateCounter, 1)
	defer mm_atomic.AddUint64(&mmResultDuplicate.afterResultDuplicateCounter, 1)

	if mmResultDuplicate.inspectFuncResultDuplicate != nil {
		mmResultDuplicate.inspectFuncResultDuplicate(ctx, objectID, resultID, result)
	}

	params := &FilamentCalculatorMockResultDuplicateParams{ctx, objectID, resultID, result}

	// Record call args
	mmResultDuplicate.ResultDuplicateMock.mutex.Lock()
	mmResultDuplicate.ResultDuplicateMock.callArgs = append(mmResultDuplicate.ResultDuplicateMock.callArgs, params)
	mmResultDuplicate.ResultDuplicateMock.mutex.Unlock()

	for _, e := range mmResultDuplicate.ResultDuplicateMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.foundResult, e.results.err
		}
	}

	if mmResultDuplicate.ResultDuplicateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmResultDuplicate.ResultDuplicateMock.defaultExpectation.Counter, 1)
		want := mmResultDuplicate.ResultDuplicateMock.defaultExpectation.params
		got := FilamentCalculatorMockResultDuplicateParams{ctx, objectID, resultID, result}
		if want != nil && !minimock.Equal(*want, got) {
			mmResultDuplicate.t.Errorf("FilamentCalculatorMock.ResultDuplicate got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmResultDuplicate.ResultDuplicateMock.defaultExpectation.results
		if results == nil {
			mmResultDuplicate.t.Fatal("No results are set for the FilamentCalculatorMock.ResultDuplicate")
		}
		return (*results).foundResult, (*results).err
	}
	if mmResultDuplicate.funcResultDuplicate != nil {
		return mmResultDuplicate.funcResultDuplicate(ctx, objectID, resultID, result)
	}
	mmResultDuplicate.t.Fatalf("Unexpected call to FilamentCalculatorMock.ResultDuplicate. %v %v %v %v", ctx, objectID, resultID, result)
	return
}

// ResultDuplicateAfterCounter returns a count of finished FilamentCalculatorMock.ResultDuplicate invocations
func (mmResultDuplicate *FilamentCalculatorMock) ResultDuplicateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResultDuplicate.afterResultDuplicateCounter)
}

// ResultDuplicateBeforeCounter returns a count of FilamentCalculatorMock.ResultDuplicate invocations
func (mmResultDuplicate *FilamentCalculatorMock) ResultDuplicateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResultDuplicate.beforeResultDuplicateCounter)
}

// Calls returns a list of arguments used in each call to FilamentCalculatorMock.ResultDuplicate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmResultDuplicate *mFilamentCalculatorMockResultDuplicate) Calls() []*FilamentCalculatorMockResultDuplicateParams {
	mmResultDuplicate.mutex.RLock()

	argCopy := make([]*FilamentCalculatorMockResultDuplicateParams, len(mmResultDuplicate.callArgs))
	copy(argCopy, mmResultDuplicate.callArgs)

	mmResultDuplicate.mutex.RUnlock()

	return argCopy
}

// MinimockResultDuplicateDone returns true if the count of the ResultDuplicate invocations corresponds
// the number of defined expectations
func (m *FilamentCalculatorMock) MinimockResultDuplicateDone() bool {
	for _, e := range m.ResultDuplicateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResultDuplicateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResultDuplicateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResultDuplicate != nil && mm_atomic.LoadUint64(&m.afterResultDuplicateCounter) < 1 {
		return false
	}
	return true
}

// MinimockResultDuplicateInspect logs each unmet expectation
func (m *FilamentCalculatorMock) MinimockResultDuplicateInspect() {
	for _, e := range m.ResultDuplicateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FilamentCalculatorMock.ResultDuplicate with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResultDuplicateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResultDuplicateCounter) < 1 {
		if m.ResultDuplicateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FilamentCalculatorMock.ResultDuplicate")
		} else {
			m.t.Errorf("Expected call to FilamentCalculatorMock.ResultDuplicate with params: %#v", *m.ResultDuplicateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResultDuplicate != nil && mm_atomic.LoadUint64(&m.afterResultDuplicateCounter) < 1 {
		m.t.Error("Expected call to FilamentCalculatorMock.ResultDuplicate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FilamentCalculatorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockOpenedRequestsInspect()

		m.MinimockRequestDuplicateInspect()

		m.MinimockRequestInfoInspect()

		m.MinimockRequestsInspect()

		m.MinimockResultDuplicateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FilamentCalculatorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FilamentCalculatorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOpenedRequestsDone() &&
		m.MinimockRequestDuplicateDone() &&
		m.MinimockRequestInfoDone() &&
		m.MinimockRequestsDone() &&
		m.MinimockResultDuplicateDone()
}
