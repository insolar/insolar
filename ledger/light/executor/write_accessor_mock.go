package executor

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// WriteAccessorMock implements WriteAccessor
type WriteAccessorMock struct {
	t minimock.Tester

	funcBegin          func(ctx context.Context, p1 insolar.PulseNumber) (done func(), err error)
	inspectFuncBegin   func(ctx context.Context, p1 insolar.PulseNumber)
	afterBeginCounter  uint64
	beforeBeginCounter uint64
	BeginMock          mWriteAccessorMockBegin
}

// NewWriteAccessorMock returns a mock for WriteAccessor
func NewWriteAccessorMock(t minimock.Tester) *WriteAccessorMock {
	m := &WriteAccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BeginMock = mWriteAccessorMockBegin{mock: m}
	m.BeginMock.callArgs = []*WriteAccessorMockBeginParams{}

	return m
}

type mWriteAccessorMockBegin struct {
	mock               *WriteAccessorMock
	defaultExpectation *WriteAccessorMockBeginExpectation
	expectations       []*WriteAccessorMockBeginExpectation

	callArgs []*WriteAccessorMockBeginParams
	mutex    sync.RWMutex
}

// WriteAccessorMockBeginExpectation specifies expectation struct of the WriteAccessor.Begin
type WriteAccessorMockBeginExpectation struct {
	mock    *WriteAccessorMock
	params  *WriteAccessorMockBeginParams
	results *WriteAccessorMockBeginResults
	Counter uint64
}

// WriteAccessorMockBeginParams contains parameters of the WriteAccessor.Begin
type WriteAccessorMockBeginParams struct {
	ctx context.Context
	p1  insolar.PulseNumber
}

// WriteAccessorMockBeginResults contains results of the WriteAccessor.Begin
type WriteAccessorMockBeginResults struct {
	done func()
	err  error
}

// Expect sets up expected params for WriteAccessor.Begin
func (mmBegin *mWriteAccessorMockBegin) Expect(ctx context.Context, p1 insolar.PulseNumber) *mWriteAccessorMockBegin {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("WriteAccessorMock.Begin mock is already set by Set")
	}

	if mmBegin.defaultExpectation == nil {
		mmBegin.defaultExpectation = &WriteAccessorMockBeginExpectation{}
	}

	mmBegin.defaultExpectation.params = &WriteAccessorMockBeginParams{ctx, p1}
	for _, e := range mmBegin.expectations {
		if minimock.Equal(e.params, mmBegin.defaultExpectation.params) {
			mmBegin.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBegin.defaultExpectation.params)
		}
	}

	return mmBegin
}

// Inspect accepts an inspector function that has same arguments as the WriteAccessor.Begin
func (mmBegin *mWriteAccessorMockBegin) Inspect(f func(ctx context.Context, p1 insolar.PulseNumber)) *mWriteAccessorMockBegin {
	if mmBegin.mock.inspectFuncBegin != nil {
		mmBegin.mock.t.Fatalf("Inspect function is already set for WriteAccessorMock.Begin")
	}

	mmBegin.mock.inspectFuncBegin = f

	return mmBegin
}

// Return sets up results that will be returned by WriteAccessor.Begin
func (mmBegin *mWriteAccessorMockBegin) Return(done func(), err error) *WriteAccessorMock {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("WriteAccessorMock.Begin mock is already set by Set")
	}

	if mmBegin.defaultExpectation == nil {
		mmBegin.defaultExpectation = &WriteAccessorMockBeginExpectation{mock: mmBegin.mock}
	}
	mmBegin.defaultExpectation.results = &WriteAccessorMockBeginResults{done, err}
	return mmBegin.mock
}

//Set uses given function f to mock the WriteAccessor.Begin method
func (mmBegin *mWriteAccessorMockBegin) Set(f func(ctx context.Context, p1 insolar.PulseNumber) (done func(), err error)) *WriteAccessorMock {
	if mmBegin.defaultExpectation != nil {
		mmBegin.mock.t.Fatalf("Default expectation is already set for the WriteAccessor.Begin method")
	}

	if len(mmBegin.expectations) > 0 {
		mmBegin.mock.t.Fatalf("Some expectations are already set for the WriteAccessor.Begin method")
	}

	mmBegin.mock.funcBegin = f
	return mmBegin.mock
}

// When sets expectation for the WriteAccessor.Begin which will trigger the result defined by the following
// Then helper
func (mmBegin *mWriteAccessorMockBegin) When(ctx context.Context, p1 insolar.PulseNumber) *WriteAccessorMockBeginExpectation {
	if mmBegin.mock.funcBegin != nil {
		mmBegin.mock.t.Fatalf("WriteAccessorMock.Begin mock is already set by Set")
	}

	expectation := &WriteAccessorMockBeginExpectation{
		mock:   mmBegin.mock,
		params: &WriteAccessorMockBeginParams{ctx, p1},
	}
	mmBegin.expectations = append(mmBegin.expectations, expectation)
	return expectation
}

// Then sets up WriteAccessor.Begin return parameters for the expectation previously defined by the When method
func (e *WriteAccessorMockBeginExpectation) Then(done func(), err error) *WriteAccessorMock {
	e.results = &WriteAccessorMockBeginResults{done, err}
	return e.mock
}

// Begin implements WriteAccessor
func (mmBegin *WriteAccessorMock) Begin(ctx context.Context, p1 insolar.PulseNumber) (done func(), err error) {
	mm_atomic.AddUint64(&mmBegin.beforeBeginCounter, 1)
	defer mm_atomic.AddUint64(&mmBegin.afterBeginCounter, 1)

	if mmBegin.inspectFuncBegin != nil {
		mmBegin.inspectFuncBegin(ctx, p1)
	}

	params := &WriteAccessorMockBeginParams{ctx, p1}

	// Record call args
	mmBegin.BeginMock.mutex.Lock()
	mmBegin.BeginMock.callArgs = append(mmBegin.BeginMock.callArgs, params)
	mmBegin.BeginMock.mutex.Unlock()

	for _, e := range mmBegin.BeginMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.done, e.results.err
		}
	}

	if mmBegin.BeginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBegin.BeginMock.defaultExpectation.Counter, 1)
		want := mmBegin.BeginMock.defaultExpectation.params
		got := WriteAccessorMockBeginParams{ctx, p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmBegin.t.Errorf("WriteAccessorMock.Begin got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmBegin.BeginMock.defaultExpectation.results
		if results == nil {
			mmBegin.t.Fatal("No results are set for the WriteAccessorMock.Begin")
		}
		return (*results).done, (*results).err
	}
	if mmBegin.funcBegin != nil {
		return mmBegin.funcBegin(ctx, p1)
	}
	mmBegin.t.Fatalf("Unexpected call to WriteAccessorMock.Begin. %v %v", ctx, p1)
	return
}

// BeginAfterCounter returns a count of finished WriteAccessorMock.Begin invocations
func (mmBegin *WriteAccessorMock) BeginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBegin.afterBeginCounter)
}

// BeginBeforeCounter returns a count of WriteAccessorMock.Begin invocations
func (mmBegin *WriteAccessorMock) BeginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBegin.beforeBeginCounter)
}

// Calls returns a list of arguments used in each call to WriteAccessorMock.Begin.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBegin *mWriteAccessorMockBegin) Calls() []*WriteAccessorMockBeginParams {
	mmBegin.mutex.RLock()

	argCopy := make([]*WriteAccessorMockBeginParams, len(mmBegin.callArgs))
	copy(argCopy, mmBegin.callArgs)

	mmBegin.mutex.RUnlock()

	return argCopy
}

// MinimockBeginDone returns true if the count of the Begin invocations corresponds
// the number of defined expectations
func (m *WriteAccessorMock) MinimockBeginDone() bool {
	for _, e := range m.BeginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BeginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBeginCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBegin != nil && mm_atomic.LoadUint64(&m.afterBeginCounter) < 1 {
		return false
	}
	return true
}

// MinimockBeginInspect logs each unmet expectation
func (m *WriteAccessorMock) MinimockBeginInspect() {
	for _, e := range m.BeginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to WriteAccessorMock.Begin with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BeginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBeginCounter) < 1 {
		if m.BeginMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to WriteAccessorMock.Begin")
		} else {
			m.t.Errorf("Expected call to WriteAccessorMock.Begin with params: %#v", *m.BeginMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBegin != nil && mm_atomic.LoadUint64(&m.afterBeginCounter) < 1 {
		m.t.Error("Expected call to WriteAccessorMock.Begin")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *WriteAccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockBeginInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *WriteAccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *WriteAccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBeginDone()
}
