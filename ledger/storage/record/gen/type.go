// +build ignore

// This program generates type_gen.go. It can be invoked by running
// go generate

package main

import (
	"html/template"
	"os"
	"reflect"
	"sort"

	"github.com/insolar/insolar/ledger/storage/record"
	"github.com/insolar/insolar/log"
)

type typedRecord struct {
	TypeID   record.TypeID
	TypeName string
}

func main() {
	f, err := os.OpenFile("type_gen.go", os.O_RDWR|os.O_CREATE, 0666)
	fatal(err)
	defer f.Close()
	fatal(f.Truncate(0))

	reg := record.Registered()
	records := make([]typedRecord, 0, len(reg))
	for id, rec := range reg {
		records = append(records, typedRecord{
			TypeID:   id,
			TypeName: reflect.TypeOf(rec).Elem().Name(),
		})
	}
	sort.Slice(records, func(i, j int) bool {
		return records[i].TypeID < records[j].TypeID
	})

	err = typeTemplate.Execute(f, struct {
		Records []typedRecord
	}{
		Records: records,
	})
	fatal(err)
}

func fatal(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var typeTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at

package record

func TypeFromRecord(generic Record) TypeID {
	switch generic.(type) {
	{{- range .Records }}
	case *{{ .TypeName }}:
		return {{ printf "%d" .TypeID }}
	{{- end }}
	default:
		panic("record is not registered")
	}
}

func RecordFromType(i TypeID) Record {
	switch i {
	{{- range .Records }}
	case {{ printf "%d" .TypeID }}:
		return new({{ .TypeName }})
	{{- end }}
	default:
		panic("record is not registered")
	}
}

func (i TypeID) String() string {
	switch i {
	{{- range .Records }}
	case {{ printf "%d" .TypeID }}:
		return "{{ .TypeName }}"
	{{- end }}
	default:
		panic("record is not registered")
	}
}
`))
