package object

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// IndexLockerMock implements IndexLocker
type IndexLockerMock struct {
	t minimock.Tester

	funcLock          func(id insolar.ID)
	inspectFuncLock   func(id insolar.ID)
	afterLockCounter  uint64
	beforeLockCounter uint64
	LockMock          mIndexLockerMockLock

	funcUnlock          func(id insolar.ID)
	inspectFuncUnlock   func(id insolar.ID)
	afterUnlockCounter  uint64
	beforeUnlockCounter uint64
	UnlockMock          mIndexLockerMockUnlock
}

// NewIndexLockerMock returns a mock for IndexLocker
func NewIndexLockerMock(t minimock.Tester) *IndexLockerMock {
	m := &IndexLockerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LockMock = mIndexLockerMockLock{mock: m}
	m.LockMock.callArgs = []*IndexLockerMockLockParams{}

	m.UnlockMock = mIndexLockerMockUnlock{mock: m}
	m.UnlockMock.callArgs = []*IndexLockerMockUnlockParams{}

	return m
}

type mIndexLockerMockLock struct {
	mock               *IndexLockerMock
	defaultExpectation *IndexLockerMockLockExpectation
	expectations       []*IndexLockerMockLockExpectation

	callArgs []*IndexLockerMockLockParams
	mutex    sync.RWMutex
}

// IndexLockerMockLockExpectation specifies expectation struct of the IndexLocker.Lock
type IndexLockerMockLockExpectation struct {
	mock   *IndexLockerMock
	params *IndexLockerMockLockParams

	Counter uint64
}

// IndexLockerMockLockParams contains parameters of the IndexLocker.Lock
type IndexLockerMockLockParams struct {
	id insolar.ID
}

// Expect sets up expected params for IndexLocker.Lock
func (mmLock *mIndexLockerMockLock) Expect(id insolar.ID) *mIndexLockerMockLock {
	if mmLock.mock.funcLock != nil {
		mmLock.mock.t.Fatalf("IndexLockerMock.Lock mock is already set by Set")
	}

	if mmLock.defaultExpectation == nil {
		mmLock.defaultExpectation = &IndexLockerMockLockExpectation{}
	}

	mmLock.defaultExpectation.params = &IndexLockerMockLockParams{id}
	for _, e := range mmLock.expectations {
		if minimock.Equal(e.params, mmLock.defaultExpectation.params) {
			mmLock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLock.defaultExpectation.params)
		}
	}

	return mmLock
}

// Inspect accepts an inspector function that has same arguments as the IndexLocker.Lock
func (mmLock *mIndexLockerMockLock) Inspect(f func(id insolar.ID)) *mIndexLockerMockLock {
	if mmLock.mock.inspectFuncLock != nil {
		mmLock.mock.t.Fatalf("Inspect function is already set for IndexLockerMock.Lock")
	}

	mmLock.mock.inspectFuncLock = f

	return mmLock
}

// Return sets up results that will be returned by IndexLocker.Lock
func (mmLock *mIndexLockerMockLock) Return() *IndexLockerMock {
	if mmLock.mock.funcLock != nil {
		mmLock.mock.t.Fatalf("IndexLockerMock.Lock mock is already set by Set")
	}

	if mmLock.defaultExpectation == nil {
		mmLock.defaultExpectation = &IndexLockerMockLockExpectation{mock: mmLock.mock}
	}

	return mmLock.mock
}

//Set uses given function f to mock the IndexLocker.Lock method
func (mmLock *mIndexLockerMockLock) Set(f func(id insolar.ID)) *IndexLockerMock {
	if mmLock.defaultExpectation != nil {
		mmLock.mock.t.Fatalf("Default expectation is already set for the IndexLocker.Lock method")
	}

	if len(mmLock.expectations) > 0 {
		mmLock.mock.t.Fatalf("Some expectations are already set for the IndexLocker.Lock method")
	}

	mmLock.mock.funcLock = f
	return mmLock.mock
}

// Lock implements IndexLocker
func (mmLock *IndexLockerMock) Lock(id insolar.ID) {
	mm_atomic.AddUint64(&mmLock.beforeLockCounter, 1)
	defer mm_atomic.AddUint64(&mmLock.afterLockCounter, 1)

	if mmLock.inspectFuncLock != nil {
		mmLock.inspectFuncLock(id)
	}

	params := &IndexLockerMockLockParams{id}

	// Record call args
	mmLock.LockMock.mutex.Lock()
	mmLock.LockMock.callArgs = append(mmLock.LockMock.callArgs, params)
	mmLock.LockMock.mutex.Unlock()

	for _, e := range mmLock.LockMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmLock.LockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLock.LockMock.defaultExpectation.Counter, 1)
		want := mmLock.LockMock.defaultExpectation.params
		got := IndexLockerMockLockParams{id}
		if want != nil && !minimock.Equal(*want, got) {
			mmLock.t.Errorf("IndexLockerMock.Lock got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmLock.funcLock != nil {
		mmLock.funcLock(id)
		return
	}
	mmLock.t.Fatalf("Unexpected call to IndexLockerMock.Lock. %v", id)

}

// LockAfterCounter returns a count of finished IndexLockerMock.Lock invocations
func (mmLock *IndexLockerMock) LockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLock.afterLockCounter)
}

// LockBeforeCounter returns a count of IndexLockerMock.Lock invocations
func (mmLock *IndexLockerMock) LockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLock.beforeLockCounter)
}

// Calls returns a list of arguments used in each call to IndexLockerMock.Lock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLock *mIndexLockerMockLock) Calls() []*IndexLockerMockLockParams {
	mmLock.mutex.RLock()

	argCopy := make([]*IndexLockerMockLockParams, len(mmLock.callArgs))
	copy(argCopy, mmLock.callArgs)

	mmLock.mutex.RUnlock()

	return argCopy
}

// MinimockLockDone returns true if the count of the Lock invocations corresponds
// the number of defined expectations
func (m *IndexLockerMock) MinimockLockDone() bool {
	for _, e := range m.LockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLock != nil && mm_atomic.LoadUint64(&m.afterLockCounter) < 1 {
		return false
	}
	return true
}

// MinimockLockInspect logs each unmet expectation
func (m *IndexLockerMock) MinimockLockInspect() {
	for _, e := range m.LockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexLockerMock.Lock with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLockCounter) < 1 {
		if m.LockMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexLockerMock.Lock")
		} else {
			m.t.Errorf("Expected call to IndexLockerMock.Lock with params: %#v", *m.LockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLock != nil && mm_atomic.LoadUint64(&m.afterLockCounter) < 1 {
		m.t.Error("Expected call to IndexLockerMock.Lock")
	}
}

type mIndexLockerMockUnlock struct {
	mock               *IndexLockerMock
	defaultExpectation *IndexLockerMockUnlockExpectation
	expectations       []*IndexLockerMockUnlockExpectation

	callArgs []*IndexLockerMockUnlockParams
	mutex    sync.RWMutex
}

// IndexLockerMockUnlockExpectation specifies expectation struct of the IndexLocker.Unlock
type IndexLockerMockUnlockExpectation struct {
	mock   *IndexLockerMock
	params *IndexLockerMockUnlockParams

	Counter uint64
}

// IndexLockerMockUnlockParams contains parameters of the IndexLocker.Unlock
type IndexLockerMockUnlockParams struct {
	id insolar.ID
}

// Expect sets up expected params for IndexLocker.Unlock
func (mmUnlock *mIndexLockerMockUnlock) Expect(id insolar.ID) *mIndexLockerMockUnlock {
	if mmUnlock.mock.funcUnlock != nil {
		mmUnlock.mock.t.Fatalf("IndexLockerMock.Unlock mock is already set by Set")
	}

	if mmUnlock.defaultExpectation == nil {
		mmUnlock.defaultExpectation = &IndexLockerMockUnlockExpectation{}
	}

	mmUnlock.defaultExpectation.params = &IndexLockerMockUnlockParams{id}
	for _, e := range mmUnlock.expectations {
		if minimock.Equal(e.params, mmUnlock.defaultExpectation.params) {
			mmUnlock.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUnlock.defaultExpectation.params)
		}
	}

	return mmUnlock
}

// Inspect accepts an inspector function that has same arguments as the IndexLocker.Unlock
func (mmUnlock *mIndexLockerMockUnlock) Inspect(f func(id insolar.ID)) *mIndexLockerMockUnlock {
	if mmUnlock.mock.inspectFuncUnlock != nil {
		mmUnlock.mock.t.Fatalf("Inspect function is already set for IndexLockerMock.Unlock")
	}

	mmUnlock.mock.inspectFuncUnlock = f

	return mmUnlock
}

// Return sets up results that will be returned by IndexLocker.Unlock
func (mmUnlock *mIndexLockerMockUnlock) Return() *IndexLockerMock {
	if mmUnlock.mock.funcUnlock != nil {
		mmUnlock.mock.t.Fatalf("IndexLockerMock.Unlock mock is already set by Set")
	}

	if mmUnlock.defaultExpectation == nil {
		mmUnlock.defaultExpectation = &IndexLockerMockUnlockExpectation{mock: mmUnlock.mock}
	}

	return mmUnlock.mock
}

//Set uses given function f to mock the IndexLocker.Unlock method
func (mmUnlock *mIndexLockerMockUnlock) Set(f func(id insolar.ID)) *IndexLockerMock {
	if mmUnlock.defaultExpectation != nil {
		mmUnlock.mock.t.Fatalf("Default expectation is already set for the IndexLocker.Unlock method")
	}

	if len(mmUnlock.expectations) > 0 {
		mmUnlock.mock.t.Fatalf("Some expectations are already set for the IndexLocker.Unlock method")
	}

	mmUnlock.mock.funcUnlock = f
	return mmUnlock.mock
}

// Unlock implements IndexLocker
func (mmUnlock *IndexLockerMock) Unlock(id insolar.ID) {
	mm_atomic.AddUint64(&mmUnlock.beforeUnlockCounter, 1)
	defer mm_atomic.AddUint64(&mmUnlock.afterUnlockCounter, 1)

	if mmUnlock.inspectFuncUnlock != nil {
		mmUnlock.inspectFuncUnlock(id)
	}

	params := &IndexLockerMockUnlockParams{id}

	// Record call args
	mmUnlock.UnlockMock.mutex.Lock()
	mmUnlock.UnlockMock.callArgs = append(mmUnlock.UnlockMock.callArgs, params)
	mmUnlock.UnlockMock.mutex.Unlock()

	for _, e := range mmUnlock.UnlockMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmUnlock.UnlockMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUnlock.UnlockMock.defaultExpectation.Counter, 1)
		want := mmUnlock.UnlockMock.defaultExpectation.params
		got := IndexLockerMockUnlockParams{id}
		if want != nil && !minimock.Equal(*want, got) {
			mmUnlock.t.Errorf("IndexLockerMock.Unlock got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmUnlock.funcUnlock != nil {
		mmUnlock.funcUnlock(id)
		return
	}
	mmUnlock.t.Fatalf("Unexpected call to IndexLockerMock.Unlock. %v", id)

}

// UnlockAfterCounter returns a count of finished IndexLockerMock.Unlock invocations
func (mmUnlock *IndexLockerMock) UnlockAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnlock.afterUnlockCounter)
}

// UnlockBeforeCounter returns a count of IndexLockerMock.Unlock invocations
func (mmUnlock *IndexLockerMock) UnlockBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUnlock.beforeUnlockCounter)
}

// Calls returns a list of arguments used in each call to IndexLockerMock.Unlock.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUnlock *mIndexLockerMockUnlock) Calls() []*IndexLockerMockUnlockParams {
	mmUnlock.mutex.RLock()

	argCopy := make([]*IndexLockerMockUnlockParams, len(mmUnlock.callArgs))
	copy(argCopy, mmUnlock.callArgs)

	mmUnlock.mutex.RUnlock()

	return argCopy
}

// MinimockUnlockDone returns true if the count of the Unlock invocations corresponds
// the number of defined expectations
func (m *IndexLockerMock) MinimockUnlockDone() bool {
	for _, e := range m.UnlockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UnlockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUnlockCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnlock != nil && mm_atomic.LoadUint64(&m.afterUnlockCounter) < 1 {
		return false
	}
	return true
}

// MinimockUnlockInspect logs each unmet expectation
func (m *IndexLockerMock) MinimockUnlockInspect() {
	for _, e := range m.UnlockMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexLockerMock.Unlock with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UnlockMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUnlockCounter) < 1 {
		if m.UnlockMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexLockerMock.Unlock")
		} else {
			m.t.Errorf("Expected call to IndexLockerMock.Unlock with params: %#v", *m.UnlockMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUnlock != nil && mm_atomic.LoadUint64(&m.afterUnlockCounter) < 1 {
		m.t.Error("Expected call to IndexLockerMock.Unlock")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IndexLockerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockLockInspect()

		m.MinimockUnlockInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IndexLockerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IndexLockerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLockDone() &&
		m.MinimockUnlockDone()
}
