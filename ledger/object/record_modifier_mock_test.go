package object

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar/record"
)

// RecordModifierMock implements RecordModifier
type RecordModifierMock struct {
	t minimock.Tester

	funcBatchSet          func(ctx context.Context, recs []record.Material) (err error)
	inspectFuncBatchSet   func(ctx context.Context, recs []record.Material)
	afterBatchSetCounter  uint64
	beforeBatchSetCounter uint64
	BatchSetMock          mRecordModifierMockBatchSet

	funcSet          func(ctx context.Context, rec record.Material) (err error)
	inspectFuncSet   func(ctx context.Context, rec record.Material)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mRecordModifierMockSet
}

// NewRecordModifierMock returns a mock for RecordModifier
func NewRecordModifierMock(t minimock.Tester) *RecordModifierMock {
	m := &RecordModifierMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.BatchSetMock = mRecordModifierMockBatchSet{mock: m}
	m.BatchSetMock.callArgs = []*RecordModifierMockBatchSetParams{}

	m.SetMock = mRecordModifierMockSet{mock: m}
	m.SetMock.callArgs = []*RecordModifierMockSetParams{}

	return m
}

type mRecordModifierMockBatchSet struct {
	mock               *RecordModifierMock
	defaultExpectation *RecordModifierMockBatchSetExpectation
	expectations       []*RecordModifierMockBatchSetExpectation

	callArgs []*RecordModifierMockBatchSetParams
	mutex    sync.RWMutex
}

// RecordModifierMockBatchSetExpectation specifies expectation struct of the RecordModifier.BatchSet
type RecordModifierMockBatchSetExpectation struct {
	mock    *RecordModifierMock
	params  *RecordModifierMockBatchSetParams
	results *RecordModifierMockBatchSetResults
	Counter uint64
}

// RecordModifierMockBatchSetParams contains parameters of the RecordModifier.BatchSet
type RecordModifierMockBatchSetParams struct {
	ctx  context.Context
	recs []record.Material
}

// RecordModifierMockBatchSetResults contains results of the RecordModifier.BatchSet
type RecordModifierMockBatchSetResults struct {
	err error
}

// Expect sets up expected params for RecordModifier.BatchSet
func (mmBatchSet *mRecordModifierMockBatchSet) Expect(ctx context.Context, recs []record.Material) *mRecordModifierMockBatchSet {
	if mmBatchSet.mock.funcBatchSet != nil {
		mmBatchSet.mock.t.Fatalf("RecordModifierMock.BatchSet mock is already set by Set")
	}

	if mmBatchSet.defaultExpectation == nil {
		mmBatchSet.defaultExpectation = &RecordModifierMockBatchSetExpectation{}
	}

	mmBatchSet.defaultExpectation.params = &RecordModifierMockBatchSetParams{ctx, recs}
	for _, e := range mmBatchSet.expectations {
		if minimock.Equal(e.params, mmBatchSet.defaultExpectation.params) {
			mmBatchSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmBatchSet.defaultExpectation.params)
		}
	}

	return mmBatchSet
}

// Inspect accepts an inspector function that has same arguments as the RecordModifier.BatchSet
func (mmBatchSet *mRecordModifierMockBatchSet) Inspect(f func(ctx context.Context, recs []record.Material)) *mRecordModifierMockBatchSet {
	if mmBatchSet.mock.inspectFuncBatchSet != nil {
		mmBatchSet.mock.t.Fatalf("Inspect function is already set for RecordModifierMock.BatchSet")
	}

	mmBatchSet.mock.inspectFuncBatchSet = f

	return mmBatchSet
}

// Return sets up results that will be returned by RecordModifier.BatchSet
func (mmBatchSet *mRecordModifierMockBatchSet) Return(err error) *RecordModifierMock {
	if mmBatchSet.mock.funcBatchSet != nil {
		mmBatchSet.mock.t.Fatalf("RecordModifierMock.BatchSet mock is already set by Set")
	}

	if mmBatchSet.defaultExpectation == nil {
		mmBatchSet.defaultExpectation = &RecordModifierMockBatchSetExpectation{mock: mmBatchSet.mock}
	}
	mmBatchSet.defaultExpectation.results = &RecordModifierMockBatchSetResults{err}
	return mmBatchSet.mock
}

//Set uses given function f to mock the RecordModifier.BatchSet method
func (mmBatchSet *mRecordModifierMockBatchSet) Set(f func(ctx context.Context, recs []record.Material) (err error)) *RecordModifierMock {
	if mmBatchSet.defaultExpectation != nil {
		mmBatchSet.mock.t.Fatalf("Default expectation is already set for the RecordModifier.BatchSet method")
	}

	if len(mmBatchSet.expectations) > 0 {
		mmBatchSet.mock.t.Fatalf("Some expectations are already set for the RecordModifier.BatchSet method")
	}

	mmBatchSet.mock.funcBatchSet = f
	return mmBatchSet.mock
}

// When sets expectation for the RecordModifier.BatchSet which will trigger the result defined by the following
// Then helper
func (mmBatchSet *mRecordModifierMockBatchSet) When(ctx context.Context, recs []record.Material) *RecordModifierMockBatchSetExpectation {
	if mmBatchSet.mock.funcBatchSet != nil {
		mmBatchSet.mock.t.Fatalf("RecordModifierMock.BatchSet mock is already set by Set")
	}

	expectation := &RecordModifierMockBatchSetExpectation{
		mock:   mmBatchSet.mock,
		params: &RecordModifierMockBatchSetParams{ctx, recs},
	}
	mmBatchSet.expectations = append(mmBatchSet.expectations, expectation)
	return expectation
}

// Then sets up RecordModifier.BatchSet return parameters for the expectation previously defined by the When method
func (e *RecordModifierMockBatchSetExpectation) Then(err error) *RecordModifierMock {
	e.results = &RecordModifierMockBatchSetResults{err}
	return e.mock
}

// BatchSet implements RecordModifier
func (mmBatchSet *RecordModifierMock) BatchSet(ctx context.Context, recs []record.Material) (err error) {
	mm_atomic.AddUint64(&mmBatchSet.beforeBatchSetCounter, 1)
	defer mm_atomic.AddUint64(&mmBatchSet.afterBatchSetCounter, 1)

	if mmBatchSet.inspectFuncBatchSet != nil {
		mmBatchSet.inspectFuncBatchSet(ctx, recs)
	}

	params := &RecordModifierMockBatchSetParams{ctx, recs}

	// Record call args
	mmBatchSet.BatchSetMock.mutex.Lock()
	mmBatchSet.BatchSetMock.callArgs = append(mmBatchSet.BatchSetMock.callArgs, params)
	mmBatchSet.BatchSetMock.mutex.Unlock()

	for _, e := range mmBatchSet.BatchSetMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmBatchSet.BatchSetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmBatchSet.BatchSetMock.defaultExpectation.Counter, 1)
		want := mmBatchSet.BatchSetMock.defaultExpectation.params
		got := RecordModifierMockBatchSetParams{ctx, recs}
		if want != nil && !minimock.Equal(*want, got) {
			mmBatchSet.t.Errorf("RecordModifierMock.BatchSet got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmBatchSet.BatchSetMock.defaultExpectation.results
		if results == nil {
			mmBatchSet.t.Fatal("No results are set for the RecordModifierMock.BatchSet")
		}
		return (*results).err
	}
	if mmBatchSet.funcBatchSet != nil {
		return mmBatchSet.funcBatchSet(ctx, recs)
	}
	mmBatchSet.t.Fatalf("Unexpected call to RecordModifierMock.BatchSet. %v %v", ctx, recs)
	return
}

// BatchSetAfterCounter returns a count of finished RecordModifierMock.BatchSet invocations
func (mmBatchSet *RecordModifierMock) BatchSetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBatchSet.afterBatchSetCounter)
}

// BatchSetBeforeCounter returns a count of RecordModifierMock.BatchSet invocations
func (mmBatchSet *RecordModifierMock) BatchSetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmBatchSet.beforeBatchSetCounter)
}

// Calls returns a list of arguments used in each call to RecordModifierMock.BatchSet.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmBatchSet *mRecordModifierMockBatchSet) Calls() []*RecordModifierMockBatchSetParams {
	mmBatchSet.mutex.RLock()

	argCopy := make([]*RecordModifierMockBatchSetParams, len(mmBatchSet.callArgs))
	copy(argCopy, mmBatchSet.callArgs)

	mmBatchSet.mutex.RUnlock()

	return argCopy
}

// MinimockBatchSetDone returns true if the count of the BatchSet invocations corresponds
// the number of defined expectations
func (m *RecordModifierMock) MinimockBatchSetDone() bool {
	for _, e := range m.BatchSetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BatchSetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBatchSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBatchSet != nil && mm_atomic.LoadUint64(&m.afterBatchSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockBatchSetInspect logs each unmet expectation
func (m *RecordModifierMock) MinimockBatchSetInspect() {
	for _, e := range m.BatchSetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordModifierMock.BatchSet with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.BatchSetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterBatchSetCounter) < 1 {
		if m.BatchSetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordModifierMock.BatchSet")
		} else {
			m.t.Errorf("Expected call to RecordModifierMock.BatchSet with params: %#v", *m.BatchSetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcBatchSet != nil && mm_atomic.LoadUint64(&m.afterBatchSetCounter) < 1 {
		m.t.Error("Expected call to RecordModifierMock.BatchSet")
	}
}

type mRecordModifierMockSet struct {
	mock               *RecordModifierMock
	defaultExpectation *RecordModifierMockSetExpectation
	expectations       []*RecordModifierMockSetExpectation

	callArgs []*RecordModifierMockSetParams
	mutex    sync.RWMutex
}

// RecordModifierMockSetExpectation specifies expectation struct of the RecordModifier.Set
type RecordModifierMockSetExpectation struct {
	mock    *RecordModifierMock
	params  *RecordModifierMockSetParams
	results *RecordModifierMockSetResults
	Counter uint64
}

// RecordModifierMockSetParams contains parameters of the RecordModifier.Set
type RecordModifierMockSetParams struct {
	ctx context.Context
	rec record.Material
}

// RecordModifierMockSetResults contains results of the RecordModifier.Set
type RecordModifierMockSetResults struct {
	err error
}

// Expect sets up expected params for RecordModifier.Set
func (mmSet *mRecordModifierMockSet) Expect(ctx context.Context, rec record.Material) *mRecordModifierMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("RecordModifierMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &RecordModifierMockSetExpectation{}
	}

	mmSet.defaultExpectation.params = &RecordModifierMockSetParams{ctx, rec}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the RecordModifier.Set
func (mmSet *mRecordModifierMockSet) Inspect(f func(ctx context.Context, rec record.Material)) *mRecordModifierMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for RecordModifierMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by RecordModifier.Set
func (mmSet *mRecordModifierMockSet) Return(err error) *RecordModifierMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("RecordModifierMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &RecordModifierMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &RecordModifierMockSetResults{err}
	return mmSet.mock
}

//Set uses given function f to mock the RecordModifier.Set method
func (mmSet *mRecordModifierMockSet) Set(f func(ctx context.Context, rec record.Material) (err error)) *RecordModifierMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the RecordModifier.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the RecordModifier.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// When sets expectation for the RecordModifier.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mRecordModifierMockSet) When(ctx context.Context, rec record.Material) *RecordModifierMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("RecordModifierMock.Set mock is already set by Set")
	}

	expectation := &RecordModifierMockSetExpectation{
		mock:   mmSet.mock,
		params: &RecordModifierMockSetParams{ctx, rec},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up RecordModifier.Set return parameters for the expectation previously defined by the When method
func (e *RecordModifierMockSetExpectation) Then(err error) *RecordModifierMock {
	e.results = &RecordModifierMockSetResults{err}
	return e.mock
}

// Set implements RecordModifier
func (mmSet *RecordModifierMock) Set(ctx context.Context, rec record.Material) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, rec)
	}

	params := &RecordModifierMockSetParams{ctx, rec}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		want := mmSet.SetMock.defaultExpectation.params
		got := RecordModifierMockSetParams{ctx, rec}
		if want != nil && !minimock.Equal(*want, got) {
			mmSet.t.Errorf("RecordModifierMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSet.SetMock.defaultExpectation.results
		if results == nil {
			mmSet.t.Fatal("No results are set for the RecordModifierMock.Set")
		}
		return (*results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, rec)
	}
	mmSet.t.Fatalf("Unexpected call to RecordModifierMock.Set. %v %v", ctx, rec)
	return
}

// SetAfterCounter returns a count of finished RecordModifierMock.Set invocations
func (mmSet *RecordModifierMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of RecordModifierMock.Set invocations
func (mmSet *RecordModifierMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to RecordModifierMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mRecordModifierMockSet) Calls() []*RecordModifierMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*RecordModifierMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *RecordModifierMock) MinimockSetDone() bool {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetInspect logs each unmet expectation
func (m *RecordModifierMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordModifierMock.Set with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordModifierMock.Set")
		} else {
			m.t.Errorf("Expected call to RecordModifierMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && mm_atomic.LoadUint64(&m.afterSetCounter) < 1 {
		m.t.Error("Expected call to RecordModifierMock.Set")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecordModifierMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockBatchSetInspect()

		m.MinimockSetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecordModifierMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecordModifierMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockBatchSetDone() &&
		m.MinimockSetDone()
}
