package pulse

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// AppenderMock implements Appender
type AppenderMock struct {
	t minimock.Tester

	funcAppend          func(ctx context.Context, pulse insolar.Pulse) (err error)
	inspectFuncAppend   func(ctx context.Context, pulse insolar.Pulse)
	afterAppendCounter  uint64
	beforeAppendCounter uint64
	AppendMock          mAppenderMockAppend
}

// NewAppenderMock returns a mock for Appender
func NewAppenderMock(t minimock.Tester) *AppenderMock {
	m := &AppenderMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AppendMock = mAppenderMockAppend{mock: m}
	m.AppendMock.callArgs = []*AppenderMockAppendParams{}

	return m
}

type mAppenderMockAppend struct {
	mock               *AppenderMock
	defaultExpectation *AppenderMockAppendExpectation
	expectations       []*AppenderMockAppendExpectation

	callArgs []*AppenderMockAppendParams
	mutex    sync.RWMutex
}

// AppenderMockAppendExpectation specifies expectation struct of the Appender.Append
type AppenderMockAppendExpectation struct {
	mock    *AppenderMock
	params  *AppenderMockAppendParams
	results *AppenderMockAppendResults
	Counter uint64
}

// AppenderMockAppendParams contains parameters of the Appender.Append
type AppenderMockAppendParams struct {
	ctx   context.Context
	pulse insolar.Pulse
}

// AppenderMockAppendResults contains results of the Appender.Append
type AppenderMockAppendResults struct {
	err error
}

// Expect sets up expected params for Appender.Append
func (mmAppend *mAppenderMockAppend) Expect(ctx context.Context, pulse insolar.Pulse) *mAppenderMockAppend {
	if mmAppend.mock.funcAppend != nil {
		mmAppend.mock.t.Fatalf("AppenderMock.Append mock is already set by Set")
	}

	if mmAppend.defaultExpectation == nil {
		mmAppend.defaultExpectation = &AppenderMockAppendExpectation{}
	}

	mmAppend.defaultExpectation.params = &AppenderMockAppendParams{ctx, pulse}
	for _, e := range mmAppend.expectations {
		if minimock.Equal(e.params, mmAppend.defaultExpectation.params) {
			mmAppend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAppend.defaultExpectation.params)
		}
	}

	return mmAppend
}

// Inspect accepts an inspector function that has same arguments as the Appender.Append
func (mmAppend *mAppenderMockAppend) Inspect(f func(ctx context.Context, pulse insolar.Pulse)) *mAppenderMockAppend {
	if mmAppend.mock.inspectFuncAppend != nil {
		mmAppend.mock.t.Fatalf("Inspect function is already set for AppenderMock.Append")
	}

	mmAppend.mock.inspectFuncAppend = f

	return mmAppend
}

// Return sets up results that will be returned by Appender.Append
func (mmAppend *mAppenderMockAppend) Return(err error) *AppenderMock {
	if mmAppend.mock.funcAppend != nil {
		mmAppend.mock.t.Fatalf("AppenderMock.Append mock is already set by Set")
	}

	if mmAppend.defaultExpectation == nil {
		mmAppend.defaultExpectation = &AppenderMockAppendExpectation{mock: mmAppend.mock}
	}
	mmAppend.defaultExpectation.results = &AppenderMockAppendResults{err}
	return mmAppend.mock
}

//Set uses given function f to mock the Appender.Append method
func (mmAppend *mAppenderMockAppend) Set(f func(ctx context.Context, pulse insolar.Pulse) (err error)) *AppenderMock {
	if mmAppend.defaultExpectation != nil {
		mmAppend.mock.t.Fatalf("Default expectation is already set for the Appender.Append method")
	}

	if len(mmAppend.expectations) > 0 {
		mmAppend.mock.t.Fatalf("Some expectations are already set for the Appender.Append method")
	}

	mmAppend.mock.funcAppend = f
	return mmAppend.mock
}

// When sets expectation for the Appender.Append which will trigger the result defined by the following
// Then helper
func (mmAppend *mAppenderMockAppend) When(ctx context.Context, pulse insolar.Pulse) *AppenderMockAppendExpectation {
	if mmAppend.mock.funcAppend != nil {
		mmAppend.mock.t.Fatalf("AppenderMock.Append mock is already set by Set")
	}

	expectation := &AppenderMockAppendExpectation{
		mock:   mmAppend.mock,
		params: &AppenderMockAppendParams{ctx, pulse},
	}
	mmAppend.expectations = append(mmAppend.expectations, expectation)
	return expectation
}

// Then sets up Appender.Append return parameters for the expectation previously defined by the When method
func (e *AppenderMockAppendExpectation) Then(err error) *AppenderMock {
	e.results = &AppenderMockAppendResults{err}
	return e.mock
}

// Append implements Appender
func (mmAppend *AppenderMock) Append(ctx context.Context, pulse insolar.Pulse) (err error) {
	mm_atomic.AddUint64(&mmAppend.beforeAppendCounter, 1)
	defer mm_atomic.AddUint64(&mmAppend.afterAppendCounter, 1)

	if mmAppend.inspectFuncAppend != nil {
		mmAppend.inspectFuncAppend(ctx, pulse)
	}

	params := &AppenderMockAppendParams{ctx, pulse}

	// Record call args
	mmAppend.AppendMock.mutex.Lock()
	mmAppend.AppendMock.callArgs = append(mmAppend.AppendMock.callArgs, params)
	mmAppend.AppendMock.mutex.Unlock()

	for _, e := range mmAppend.AppendMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAppend.AppendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAppend.AppendMock.defaultExpectation.Counter, 1)
		want := mmAppend.AppendMock.defaultExpectation.params
		got := AppenderMockAppendParams{ctx, pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmAppend.t.Errorf("AppenderMock.Append got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmAppend.AppendMock.defaultExpectation.results
		if results == nil {
			mmAppend.t.Fatal("No results are set for the AppenderMock.Append")
		}
		return (*results).err
	}
	if mmAppend.funcAppend != nil {
		return mmAppend.funcAppend(ctx, pulse)
	}
	mmAppend.t.Fatalf("Unexpected call to AppenderMock.Append. %v %v", ctx, pulse)
	return
}

// AppendAfterCounter returns a count of finished AppenderMock.Append invocations
func (mmAppend *AppenderMock) AppendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAppend.afterAppendCounter)
}

// AppendBeforeCounter returns a count of AppenderMock.Append invocations
func (mmAppend *AppenderMock) AppendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAppend.beforeAppendCounter)
}

// Calls returns a list of arguments used in each call to AppenderMock.Append.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAppend *mAppenderMockAppend) Calls() []*AppenderMockAppendParams {
	mmAppend.mutex.RLock()

	argCopy := make([]*AppenderMockAppendParams, len(mmAppend.callArgs))
	copy(argCopy, mmAppend.callArgs)

	mmAppend.mutex.RUnlock()

	return argCopy
}

// MinimockAppendDone returns true if the count of the Append invocations corresponds
// the number of defined expectations
func (m *AppenderMock) MinimockAppendDone() bool {
	for _, e := range m.AppendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AppendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAppend != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		return false
	}
	return true
}

// MinimockAppendInspect logs each unmet expectation
func (m *AppenderMock) MinimockAppendInspect() {
	for _, e := range m.AppendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AppenderMock.Append with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AppendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		if m.AppendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AppenderMock.Append")
		} else {
			m.t.Errorf("Expected call to AppenderMock.Append with params: %#v", *m.AppendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAppend != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		m.t.Error("Expected call to AppenderMock.Append")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AppenderMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAppendInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AppenderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AppenderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAppendDone()
}
