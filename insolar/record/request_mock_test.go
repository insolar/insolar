package record

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// RequestMock implements Request
type RequestMock struct {
	t minimock.Tester

	funcAffinityRef          func() (rp1 *insolar.Reference)
	inspectFuncAffinityRef   func()
	afterAffinityRefCounter  uint64
	beforeAffinityRefCounter uint64
	AffinityRefMock          mRequestMockAffinityRef

	funcGetCallType          func() (c1 CallType)
	inspectFuncGetCallType   func()
	afterGetCallTypeCounter  uint64
	beforeGetCallTypeCounter uint64
	GetCallTypeMock          mRequestMockGetCallType

	funcIsAPIRequest          func() (b1 bool)
	inspectFuncIsAPIRequest   func()
	afterIsAPIRequestCounter  uint64
	beforeIsAPIRequestCounter uint64
	IsAPIRequestMock          mRequestMockIsAPIRequest

	funcIsCreationRequest          func() (b1 bool)
	inspectFuncIsCreationRequest   func()
	afterIsCreationRequestCounter  uint64
	beforeIsCreationRequestCounter uint64
	IsCreationRequestMock          mRequestMockIsCreationRequest

	funcIsTemporaryUploadCode          func() (b1 bool)
	inspectFuncIsTemporaryUploadCode   func()
	afterIsTemporaryUploadCodeCounter  uint64
	beforeIsTemporaryUploadCodeCounter uint64
	IsTemporaryUploadCodeMock          mRequestMockIsTemporaryUploadCode

	funcMarshal          func() (dAtA []byte, err error)
	inspectFuncMarshal   func()
	afterMarshalCounter  uint64
	beforeMarshalCounter uint64
	MarshalMock          mRequestMockMarshal

	funcReasonAffinityRef          func() (r1 insolar.Reference)
	inspectFuncReasonAffinityRef   func()
	afterReasonAffinityRefCounter  uint64
	beforeReasonAffinityRefCounter uint64
	ReasonAffinityRefMock          mRequestMockReasonAffinityRef

	funcReasonRef          func() (r1 insolar.Reference)
	inspectFuncReasonRef   func()
	afterReasonRefCounter  uint64
	beforeReasonRefCounter uint64
	ReasonRefMock          mRequestMockReasonRef

	funcValidate          func() (err error)
	inspectFuncValidate   func()
	afterValidateCounter  uint64
	beforeValidateCounter uint64
	ValidateMock          mRequestMockValidate
}

// NewRequestMock returns a mock for Request
func NewRequestMock(t minimock.Tester) *RequestMock {
	m := &RequestMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AffinityRefMock = mRequestMockAffinityRef{mock: m}

	m.GetCallTypeMock = mRequestMockGetCallType{mock: m}

	m.IsAPIRequestMock = mRequestMockIsAPIRequest{mock: m}

	m.IsCreationRequestMock = mRequestMockIsCreationRequest{mock: m}

	m.IsTemporaryUploadCodeMock = mRequestMockIsTemporaryUploadCode{mock: m}

	m.MarshalMock = mRequestMockMarshal{mock: m}

	m.ReasonAffinityRefMock = mRequestMockReasonAffinityRef{mock: m}

	m.ReasonRefMock = mRequestMockReasonRef{mock: m}

	m.ValidateMock = mRequestMockValidate{mock: m}

	return m
}

type mRequestMockAffinityRef struct {
	mock               *RequestMock
	defaultExpectation *RequestMockAffinityRefExpectation
	expectations       []*RequestMockAffinityRefExpectation
}

// RequestMockAffinityRefExpectation specifies expectation struct of the Request.AffinityRef
type RequestMockAffinityRefExpectation struct {
	mock *RequestMock

	results *RequestMockAffinityRefResults
	Counter uint64
}

// RequestMockAffinityRefResults contains results of the Request.AffinityRef
type RequestMockAffinityRefResults struct {
	rp1 *insolar.Reference
}

// Expect sets up expected params for Request.AffinityRef
func (mmAffinityRef *mRequestMockAffinityRef) Expect() *mRequestMockAffinityRef {
	if mmAffinityRef.mock.funcAffinityRef != nil {
		mmAffinityRef.mock.t.Fatalf("RequestMock.AffinityRef mock is already set by Set")
	}

	if mmAffinityRef.defaultExpectation == nil {
		mmAffinityRef.defaultExpectation = &RequestMockAffinityRefExpectation{}
	}

	return mmAffinityRef
}

// Inspect accepts an inspector function that has same arguments as the Request.AffinityRef
func (mmAffinityRef *mRequestMockAffinityRef) Inspect(f func()) *mRequestMockAffinityRef {
	if mmAffinityRef.mock.inspectFuncAffinityRef != nil {
		mmAffinityRef.mock.t.Fatalf("Inspect function is already set for RequestMock.AffinityRef")
	}

	mmAffinityRef.mock.inspectFuncAffinityRef = f

	return mmAffinityRef
}

// Return sets up results that will be returned by Request.AffinityRef
func (mmAffinityRef *mRequestMockAffinityRef) Return(rp1 *insolar.Reference) *RequestMock {
	if mmAffinityRef.mock.funcAffinityRef != nil {
		mmAffinityRef.mock.t.Fatalf("RequestMock.AffinityRef mock is already set by Set")
	}

	if mmAffinityRef.defaultExpectation == nil {
		mmAffinityRef.defaultExpectation = &RequestMockAffinityRefExpectation{mock: mmAffinityRef.mock}
	}
	mmAffinityRef.defaultExpectation.results = &RequestMockAffinityRefResults{rp1}
	return mmAffinityRef.mock
}

//Set uses given function f to mock the Request.AffinityRef method
func (mmAffinityRef *mRequestMockAffinityRef) Set(f func() (rp1 *insolar.Reference)) *RequestMock {
	if mmAffinityRef.defaultExpectation != nil {
		mmAffinityRef.mock.t.Fatalf("Default expectation is already set for the Request.AffinityRef method")
	}

	if len(mmAffinityRef.expectations) > 0 {
		mmAffinityRef.mock.t.Fatalf("Some expectations are already set for the Request.AffinityRef method")
	}

	mmAffinityRef.mock.funcAffinityRef = f
	return mmAffinityRef.mock
}

// AffinityRef implements Request
func (mmAffinityRef *RequestMock) AffinityRef() (rp1 *insolar.Reference) {
	mm_atomic.AddUint64(&mmAffinityRef.beforeAffinityRefCounter, 1)
	defer mm_atomic.AddUint64(&mmAffinityRef.afterAffinityRefCounter, 1)

	if mmAffinityRef.inspectFuncAffinityRef != nil {
		mmAffinityRef.inspectFuncAffinityRef()
	}

	if mmAffinityRef.AffinityRefMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAffinityRef.AffinityRefMock.defaultExpectation.Counter, 1)

		results := mmAffinityRef.AffinityRefMock.defaultExpectation.results
		if results == nil {
			mmAffinityRef.t.Fatal("No results are set for the RequestMock.AffinityRef")
		}
		return (*results).rp1
	}
	if mmAffinityRef.funcAffinityRef != nil {
		return mmAffinityRef.funcAffinityRef()
	}
	mmAffinityRef.t.Fatalf("Unexpected call to RequestMock.AffinityRef.")
	return
}

// AffinityRefAfterCounter returns a count of finished RequestMock.AffinityRef invocations
func (mmAffinityRef *RequestMock) AffinityRefAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAffinityRef.afterAffinityRefCounter)
}

// AffinityRefBeforeCounter returns a count of RequestMock.AffinityRef invocations
func (mmAffinityRef *RequestMock) AffinityRefBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAffinityRef.beforeAffinityRefCounter)
}

// MinimockAffinityRefDone returns true if the count of the AffinityRef invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockAffinityRefDone() bool {
	for _, e := range m.AffinityRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AffinityRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAffinityRefCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAffinityRef != nil && mm_atomic.LoadUint64(&m.afterAffinityRefCounter) < 1 {
		return false
	}
	return true
}

// MinimockAffinityRefInspect logs each unmet expectation
func (m *RequestMock) MinimockAffinityRefInspect() {
	for _, e := range m.AffinityRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.AffinityRef")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AffinityRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAffinityRefCounter) < 1 {
		m.t.Error("Expected call to RequestMock.AffinityRef")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAffinityRef != nil && mm_atomic.LoadUint64(&m.afterAffinityRefCounter) < 1 {
		m.t.Error("Expected call to RequestMock.AffinityRef")
	}
}

type mRequestMockGetCallType struct {
	mock               *RequestMock
	defaultExpectation *RequestMockGetCallTypeExpectation
	expectations       []*RequestMockGetCallTypeExpectation
}

// RequestMockGetCallTypeExpectation specifies expectation struct of the Request.GetCallType
type RequestMockGetCallTypeExpectation struct {
	mock *RequestMock

	results *RequestMockGetCallTypeResults
	Counter uint64
}

// RequestMockGetCallTypeResults contains results of the Request.GetCallType
type RequestMockGetCallTypeResults struct {
	c1 CallType
}

// Expect sets up expected params for Request.GetCallType
func (mmGetCallType *mRequestMockGetCallType) Expect() *mRequestMockGetCallType {
	if mmGetCallType.mock.funcGetCallType != nil {
		mmGetCallType.mock.t.Fatalf("RequestMock.GetCallType mock is already set by Set")
	}

	if mmGetCallType.defaultExpectation == nil {
		mmGetCallType.defaultExpectation = &RequestMockGetCallTypeExpectation{}
	}

	return mmGetCallType
}

// Inspect accepts an inspector function that has same arguments as the Request.GetCallType
func (mmGetCallType *mRequestMockGetCallType) Inspect(f func()) *mRequestMockGetCallType {
	if mmGetCallType.mock.inspectFuncGetCallType != nil {
		mmGetCallType.mock.t.Fatalf("Inspect function is already set for RequestMock.GetCallType")
	}

	mmGetCallType.mock.inspectFuncGetCallType = f

	return mmGetCallType
}

// Return sets up results that will be returned by Request.GetCallType
func (mmGetCallType *mRequestMockGetCallType) Return(c1 CallType) *RequestMock {
	if mmGetCallType.mock.funcGetCallType != nil {
		mmGetCallType.mock.t.Fatalf("RequestMock.GetCallType mock is already set by Set")
	}

	if mmGetCallType.defaultExpectation == nil {
		mmGetCallType.defaultExpectation = &RequestMockGetCallTypeExpectation{mock: mmGetCallType.mock}
	}
	mmGetCallType.defaultExpectation.results = &RequestMockGetCallTypeResults{c1}
	return mmGetCallType.mock
}

//Set uses given function f to mock the Request.GetCallType method
func (mmGetCallType *mRequestMockGetCallType) Set(f func() (c1 CallType)) *RequestMock {
	if mmGetCallType.defaultExpectation != nil {
		mmGetCallType.mock.t.Fatalf("Default expectation is already set for the Request.GetCallType method")
	}

	if len(mmGetCallType.expectations) > 0 {
		mmGetCallType.mock.t.Fatalf("Some expectations are already set for the Request.GetCallType method")
	}

	mmGetCallType.mock.funcGetCallType = f
	return mmGetCallType.mock
}

// GetCallType implements Request
func (mmGetCallType *RequestMock) GetCallType() (c1 CallType) {
	mm_atomic.AddUint64(&mmGetCallType.beforeGetCallTypeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCallType.afterGetCallTypeCounter, 1)

	if mmGetCallType.inspectFuncGetCallType != nil {
		mmGetCallType.inspectFuncGetCallType()
	}

	if mmGetCallType.GetCallTypeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCallType.GetCallTypeMock.defaultExpectation.Counter, 1)

		results := mmGetCallType.GetCallTypeMock.defaultExpectation.results
		if results == nil {
			mmGetCallType.t.Fatal("No results are set for the RequestMock.GetCallType")
		}
		return (*results).c1
	}
	if mmGetCallType.funcGetCallType != nil {
		return mmGetCallType.funcGetCallType()
	}
	mmGetCallType.t.Fatalf("Unexpected call to RequestMock.GetCallType.")
	return
}

// GetCallTypeAfterCounter returns a count of finished RequestMock.GetCallType invocations
func (mmGetCallType *RequestMock) GetCallTypeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCallType.afterGetCallTypeCounter)
}

// GetCallTypeBeforeCounter returns a count of RequestMock.GetCallType invocations
func (mmGetCallType *RequestMock) GetCallTypeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCallType.beforeGetCallTypeCounter)
}

// MinimockGetCallTypeDone returns true if the count of the GetCallType invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockGetCallTypeDone() bool {
	for _, e := range m.GetCallTypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCallTypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCallTypeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCallType != nil && mm_atomic.LoadUint64(&m.afterGetCallTypeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCallTypeInspect logs each unmet expectation
func (m *RequestMock) MinimockGetCallTypeInspect() {
	for _, e := range m.GetCallTypeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.GetCallType")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCallTypeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCallTypeCounter) < 1 {
		m.t.Error("Expected call to RequestMock.GetCallType")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCallType != nil && mm_atomic.LoadUint64(&m.afterGetCallTypeCounter) < 1 {
		m.t.Error("Expected call to RequestMock.GetCallType")
	}
}

type mRequestMockIsAPIRequest struct {
	mock               *RequestMock
	defaultExpectation *RequestMockIsAPIRequestExpectation
	expectations       []*RequestMockIsAPIRequestExpectation
}

// RequestMockIsAPIRequestExpectation specifies expectation struct of the Request.IsAPIRequest
type RequestMockIsAPIRequestExpectation struct {
	mock *RequestMock

	results *RequestMockIsAPIRequestResults
	Counter uint64
}

// RequestMockIsAPIRequestResults contains results of the Request.IsAPIRequest
type RequestMockIsAPIRequestResults struct {
	b1 bool
}

// Expect sets up expected params for Request.IsAPIRequest
func (mmIsAPIRequest *mRequestMockIsAPIRequest) Expect() *mRequestMockIsAPIRequest {
	if mmIsAPIRequest.mock.funcIsAPIRequest != nil {
		mmIsAPIRequest.mock.t.Fatalf("RequestMock.IsAPIRequest mock is already set by Set")
	}

	if mmIsAPIRequest.defaultExpectation == nil {
		mmIsAPIRequest.defaultExpectation = &RequestMockIsAPIRequestExpectation{}
	}

	return mmIsAPIRequest
}

// Inspect accepts an inspector function that has same arguments as the Request.IsAPIRequest
func (mmIsAPIRequest *mRequestMockIsAPIRequest) Inspect(f func()) *mRequestMockIsAPIRequest {
	if mmIsAPIRequest.mock.inspectFuncIsAPIRequest != nil {
		mmIsAPIRequest.mock.t.Fatalf("Inspect function is already set for RequestMock.IsAPIRequest")
	}

	mmIsAPIRequest.mock.inspectFuncIsAPIRequest = f

	return mmIsAPIRequest
}

// Return sets up results that will be returned by Request.IsAPIRequest
func (mmIsAPIRequest *mRequestMockIsAPIRequest) Return(b1 bool) *RequestMock {
	if mmIsAPIRequest.mock.funcIsAPIRequest != nil {
		mmIsAPIRequest.mock.t.Fatalf("RequestMock.IsAPIRequest mock is already set by Set")
	}

	if mmIsAPIRequest.defaultExpectation == nil {
		mmIsAPIRequest.defaultExpectation = &RequestMockIsAPIRequestExpectation{mock: mmIsAPIRequest.mock}
	}
	mmIsAPIRequest.defaultExpectation.results = &RequestMockIsAPIRequestResults{b1}
	return mmIsAPIRequest.mock
}

//Set uses given function f to mock the Request.IsAPIRequest method
func (mmIsAPIRequest *mRequestMockIsAPIRequest) Set(f func() (b1 bool)) *RequestMock {
	if mmIsAPIRequest.defaultExpectation != nil {
		mmIsAPIRequest.mock.t.Fatalf("Default expectation is already set for the Request.IsAPIRequest method")
	}

	if len(mmIsAPIRequest.expectations) > 0 {
		mmIsAPIRequest.mock.t.Fatalf("Some expectations are already set for the Request.IsAPIRequest method")
	}

	mmIsAPIRequest.mock.funcIsAPIRequest = f
	return mmIsAPIRequest.mock
}

// IsAPIRequest implements Request
func (mmIsAPIRequest *RequestMock) IsAPIRequest() (b1 bool) {
	mm_atomic.AddUint64(&mmIsAPIRequest.beforeIsAPIRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmIsAPIRequest.afterIsAPIRequestCounter, 1)

	if mmIsAPIRequest.inspectFuncIsAPIRequest != nil {
		mmIsAPIRequest.inspectFuncIsAPIRequest()
	}

	if mmIsAPIRequest.IsAPIRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsAPIRequest.IsAPIRequestMock.defaultExpectation.Counter, 1)

		results := mmIsAPIRequest.IsAPIRequestMock.defaultExpectation.results
		if results == nil {
			mmIsAPIRequest.t.Fatal("No results are set for the RequestMock.IsAPIRequest")
		}
		return (*results).b1
	}
	if mmIsAPIRequest.funcIsAPIRequest != nil {
		return mmIsAPIRequest.funcIsAPIRequest()
	}
	mmIsAPIRequest.t.Fatalf("Unexpected call to RequestMock.IsAPIRequest.")
	return
}

// IsAPIRequestAfterCounter returns a count of finished RequestMock.IsAPIRequest invocations
func (mmIsAPIRequest *RequestMock) IsAPIRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsAPIRequest.afterIsAPIRequestCounter)
}

// IsAPIRequestBeforeCounter returns a count of RequestMock.IsAPIRequest invocations
func (mmIsAPIRequest *RequestMock) IsAPIRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsAPIRequest.beforeIsAPIRequestCounter)
}

// MinimockIsAPIRequestDone returns true if the count of the IsAPIRequest invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockIsAPIRequestDone() bool {
	for _, e := range m.IsAPIRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsAPIRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsAPIRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsAPIRequest != nil && mm_atomic.LoadUint64(&m.afterIsAPIRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsAPIRequestInspect logs each unmet expectation
func (m *RequestMock) MinimockIsAPIRequestInspect() {
	for _, e := range m.IsAPIRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.IsAPIRequest")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsAPIRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsAPIRequestCounter) < 1 {
		m.t.Error("Expected call to RequestMock.IsAPIRequest")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsAPIRequest != nil && mm_atomic.LoadUint64(&m.afterIsAPIRequestCounter) < 1 {
		m.t.Error("Expected call to RequestMock.IsAPIRequest")
	}
}

type mRequestMockIsCreationRequest struct {
	mock               *RequestMock
	defaultExpectation *RequestMockIsCreationRequestExpectation
	expectations       []*RequestMockIsCreationRequestExpectation
}

// RequestMockIsCreationRequestExpectation specifies expectation struct of the Request.IsCreationRequest
type RequestMockIsCreationRequestExpectation struct {
	mock *RequestMock

	results *RequestMockIsCreationRequestResults
	Counter uint64
}

// RequestMockIsCreationRequestResults contains results of the Request.IsCreationRequest
type RequestMockIsCreationRequestResults struct {
	b1 bool
}

// Expect sets up expected params for Request.IsCreationRequest
func (mmIsCreationRequest *mRequestMockIsCreationRequest) Expect() *mRequestMockIsCreationRequest {
	if mmIsCreationRequest.mock.funcIsCreationRequest != nil {
		mmIsCreationRequest.mock.t.Fatalf("RequestMock.IsCreationRequest mock is already set by Set")
	}

	if mmIsCreationRequest.defaultExpectation == nil {
		mmIsCreationRequest.defaultExpectation = &RequestMockIsCreationRequestExpectation{}
	}

	return mmIsCreationRequest
}

// Inspect accepts an inspector function that has same arguments as the Request.IsCreationRequest
func (mmIsCreationRequest *mRequestMockIsCreationRequest) Inspect(f func()) *mRequestMockIsCreationRequest {
	if mmIsCreationRequest.mock.inspectFuncIsCreationRequest != nil {
		mmIsCreationRequest.mock.t.Fatalf("Inspect function is already set for RequestMock.IsCreationRequest")
	}

	mmIsCreationRequest.mock.inspectFuncIsCreationRequest = f

	return mmIsCreationRequest
}

// Return sets up results that will be returned by Request.IsCreationRequest
func (mmIsCreationRequest *mRequestMockIsCreationRequest) Return(b1 bool) *RequestMock {
	if mmIsCreationRequest.mock.funcIsCreationRequest != nil {
		mmIsCreationRequest.mock.t.Fatalf("RequestMock.IsCreationRequest mock is already set by Set")
	}

	if mmIsCreationRequest.defaultExpectation == nil {
		mmIsCreationRequest.defaultExpectation = &RequestMockIsCreationRequestExpectation{mock: mmIsCreationRequest.mock}
	}
	mmIsCreationRequest.defaultExpectation.results = &RequestMockIsCreationRequestResults{b1}
	return mmIsCreationRequest.mock
}

//Set uses given function f to mock the Request.IsCreationRequest method
func (mmIsCreationRequest *mRequestMockIsCreationRequest) Set(f func() (b1 bool)) *RequestMock {
	if mmIsCreationRequest.defaultExpectation != nil {
		mmIsCreationRequest.mock.t.Fatalf("Default expectation is already set for the Request.IsCreationRequest method")
	}

	if len(mmIsCreationRequest.expectations) > 0 {
		mmIsCreationRequest.mock.t.Fatalf("Some expectations are already set for the Request.IsCreationRequest method")
	}

	mmIsCreationRequest.mock.funcIsCreationRequest = f
	return mmIsCreationRequest.mock
}

// IsCreationRequest implements Request
func (mmIsCreationRequest *RequestMock) IsCreationRequest() (b1 bool) {
	mm_atomic.AddUint64(&mmIsCreationRequest.beforeIsCreationRequestCounter, 1)
	defer mm_atomic.AddUint64(&mmIsCreationRequest.afterIsCreationRequestCounter, 1)

	if mmIsCreationRequest.inspectFuncIsCreationRequest != nil {
		mmIsCreationRequest.inspectFuncIsCreationRequest()
	}

	if mmIsCreationRequest.IsCreationRequestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsCreationRequest.IsCreationRequestMock.defaultExpectation.Counter, 1)

		results := mmIsCreationRequest.IsCreationRequestMock.defaultExpectation.results
		if results == nil {
			mmIsCreationRequest.t.Fatal("No results are set for the RequestMock.IsCreationRequest")
		}
		return (*results).b1
	}
	if mmIsCreationRequest.funcIsCreationRequest != nil {
		return mmIsCreationRequest.funcIsCreationRequest()
	}
	mmIsCreationRequest.t.Fatalf("Unexpected call to RequestMock.IsCreationRequest.")
	return
}

// IsCreationRequestAfterCounter returns a count of finished RequestMock.IsCreationRequest invocations
func (mmIsCreationRequest *RequestMock) IsCreationRequestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsCreationRequest.afterIsCreationRequestCounter)
}

// IsCreationRequestBeforeCounter returns a count of RequestMock.IsCreationRequest invocations
func (mmIsCreationRequest *RequestMock) IsCreationRequestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsCreationRequest.beforeIsCreationRequestCounter)
}

// MinimockIsCreationRequestDone returns true if the count of the IsCreationRequest invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockIsCreationRequestDone() bool {
	for _, e := range m.IsCreationRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsCreationRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsCreationRequestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsCreationRequest != nil && mm_atomic.LoadUint64(&m.afterIsCreationRequestCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsCreationRequestInspect logs each unmet expectation
func (m *RequestMock) MinimockIsCreationRequestInspect() {
	for _, e := range m.IsCreationRequestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.IsCreationRequest")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsCreationRequestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsCreationRequestCounter) < 1 {
		m.t.Error("Expected call to RequestMock.IsCreationRequest")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsCreationRequest != nil && mm_atomic.LoadUint64(&m.afterIsCreationRequestCounter) < 1 {
		m.t.Error("Expected call to RequestMock.IsCreationRequest")
	}
}

type mRequestMockIsTemporaryUploadCode struct {
	mock               *RequestMock
	defaultExpectation *RequestMockIsTemporaryUploadCodeExpectation
	expectations       []*RequestMockIsTemporaryUploadCodeExpectation
}

// RequestMockIsTemporaryUploadCodeExpectation specifies expectation struct of the Request.IsTemporaryUploadCode
type RequestMockIsTemporaryUploadCodeExpectation struct {
	mock *RequestMock

	results *RequestMockIsTemporaryUploadCodeResults
	Counter uint64
}

// RequestMockIsTemporaryUploadCodeResults contains results of the Request.IsTemporaryUploadCode
type RequestMockIsTemporaryUploadCodeResults struct {
	b1 bool
}

// Expect sets up expected params for Request.IsTemporaryUploadCode
func (mmIsTemporaryUploadCode *mRequestMockIsTemporaryUploadCode) Expect() *mRequestMockIsTemporaryUploadCode {
	if mmIsTemporaryUploadCode.mock.funcIsTemporaryUploadCode != nil {
		mmIsTemporaryUploadCode.mock.t.Fatalf("RequestMock.IsTemporaryUploadCode mock is already set by Set")
	}

	if mmIsTemporaryUploadCode.defaultExpectation == nil {
		mmIsTemporaryUploadCode.defaultExpectation = &RequestMockIsTemporaryUploadCodeExpectation{}
	}

	return mmIsTemporaryUploadCode
}

// Inspect accepts an inspector function that has same arguments as the Request.IsTemporaryUploadCode
func (mmIsTemporaryUploadCode *mRequestMockIsTemporaryUploadCode) Inspect(f func()) *mRequestMockIsTemporaryUploadCode {
	if mmIsTemporaryUploadCode.mock.inspectFuncIsTemporaryUploadCode != nil {
		mmIsTemporaryUploadCode.mock.t.Fatalf("Inspect function is already set for RequestMock.IsTemporaryUploadCode")
	}

	mmIsTemporaryUploadCode.mock.inspectFuncIsTemporaryUploadCode = f

	return mmIsTemporaryUploadCode
}

// Return sets up results that will be returned by Request.IsTemporaryUploadCode
func (mmIsTemporaryUploadCode *mRequestMockIsTemporaryUploadCode) Return(b1 bool) *RequestMock {
	if mmIsTemporaryUploadCode.mock.funcIsTemporaryUploadCode != nil {
		mmIsTemporaryUploadCode.mock.t.Fatalf("RequestMock.IsTemporaryUploadCode mock is already set by Set")
	}

	if mmIsTemporaryUploadCode.defaultExpectation == nil {
		mmIsTemporaryUploadCode.defaultExpectation = &RequestMockIsTemporaryUploadCodeExpectation{mock: mmIsTemporaryUploadCode.mock}
	}
	mmIsTemporaryUploadCode.defaultExpectation.results = &RequestMockIsTemporaryUploadCodeResults{b1}
	return mmIsTemporaryUploadCode.mock
}

//Set uses given function f to mock the Request.IsTemporaryUploadCode method
func (mmIsTemporaryUploadCode *mRequestMockIsTemporaryUploadCode) Set(f func() (b1 bool)) *RequestMock {
	if mmIsTemporaryUploadCode.defaultExpectation != nil {
		mmIsTemporaryUploadCode.mock.t.Fatalf("Default expectation is already set for the Request.IsTemporaryUploadCode method")
	}

	if len(mmIsTemporaryUploadCode.expectations) > 0 {
		mmIsTemporaryUploadCode.mock.t.Fatalf("Some expectations are already set for the Request.IsTemporaryUploadCode method")
	}

	mmIsTemporaryUploadCode.mock.funcIsTemporaryUploadCode = f
	return mmIsTemporaryUploadCode.mock
}

// IsTemporaryUploadCode implements Request
func (mmIsTemporaryUploadCode *RequestMock) IsTemporaryUploadCode() (b1 bool) {
	mm_atomic.AddUint64(&mmIsTemporaryUploadCode.beforeIsTemporaryUploadCodeCounter, 1)
	defer mm_atomic.AddUint64(&mmIsTemporaryUploadCode.afterIsTemporaryUploadCodeCounter, 1)

	if mmIsTemporaryUploadCode.inspectFuncIsTemporaryUploadCode != nil {
		mmIsTemporaryUploadCode.inspectFuncIsTemporaryUploadCode()
	}

	if mmIsTemporaryUploadCode.IsTemporaryUploadCodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsTemporaryUploadCode.IsTemporaryUploadCodeMock.defaultExpectation.Counter, 1)

		results := mmIsTemporaryUploadCode.IsTemporaryUploadCodeMock.defaultExpectation.results
		if results == nil {
			mmIsTemporaryUploadCode.t.Fatal("No results are set for the RequestMock.IsTemporaryUploadCode")
		}
		return (*results).b1
	}
	if mmIsTemporaryUploadCode.funcIsTemporaryUploadCode != nil {
		return mmIsTemporaryUploadCode.funcIsTemporaryUploadCode()
	}
	mmIsTemporaryUploadCode.t.Fatalf("Unexpected call to RequestMock.IsTemporaryUploadCode.")
	return
}

// IsTemporaryUploadCodeAfterCounter returns a count of finished RequestMock.IsTemporaryUploadCode invocations
func (mmIsTemporaryUploadCode *RequestMock) IsTemporaryUploadCodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsTemporaryUploadCode.afterIsTemporaryUploadCodeCounter)
}

// IsTemporaryUploadCodeBeforeCounter returns a count of RequestMock.IsTemporaryUploadCode invocations
func (mmIsTemporaryUploadCode *RequestMock) IsTemporaryUploadCodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsTemporaryUploadCode.beforeIsTemporaryUploadCodeCounter)
}

// MinimockIsTemporaryUploadCodeDone returns true if the count of the IsTemporaryUploadCode invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockIsTemporaryUploadCodeDone() bool {
	for _, e := range m.IsTemporaryUploadCodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsTemporaryUploadCodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsTemporaryUploadCodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsTemporaryUploadCode != nil && mm_atomic.LoadUint64(&m.afterIsTemporaryUploadCodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsTemporaryUploadCodeInspect logs each unmet expectation
func (m *RequestMock) MinimockIsTemporaryUploadCodeInspect() {
	for _, e := range m.IsTemporaryUploadCodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.IsTemporaryUploadCode")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsTemporaryUploadCodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsTemporaryUploadCodeCounter) < 1 {
		m.t.Error("Expected call to RequestMock.IsTemporaryUploadCode")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsTemporaryUploadCode != nil && mm_atomic.LoadUint64(&m.afterIsTemporaryUploadCodeCounter) < 1 {
		m.t.Error("Expected call to RequestMock.IsTemporaryUploadCode")
	}
}

type mRequestMockMarshal struct {
	mock               *RequestMock
	defaultExpectation *RequestMockMarshalExpectation
	expectations       []*RequestMockMarshalExpectation
}

// RequestMockMarshalExpectation specifies expectation struct of the Request.Marshal
type RequestMockMarshalExpectation struct {
	mock *RequestMock

	results *RequestMockMarshalResults
	Counter uint64
}

// RequestMockMarshalResults contains results of the Request.Marshal
type RequestMockMarshalResults struct {
	dAtA []byte
	err  error
}

// Expect sets up expected params for Request.Marshal
func (mmMarshal *mRequestMockMarshal) Expect() *mRequestMockMarshal {
	if mmMarshal.mock.funcMarshal != nil {
		mmMarshal.mock.t.Fatalf("RequestMock.Marshal mock is already set by Set")
	}

	if mmMarshal.defaultExpectation == nil {
		mmMarshal.defaultExpectation = &RequestMockMarshalExpectation{}
	}

	return mmMarshal
}

// Inspect accepts an inspector function that has same arguments as the Request.Marshal
func (mmMarshal *mRequestMockMarshal) Inspect(f func()) *mRequestMockMarshal {
	if mmMarshal.mock.inspectFuncMarshal != nil {
		mmMarshal.mock.t.Fatalf("Inspect function is already set for RequestMock.Marshal")
	}

	mmMarshal.mock.inspectFuncMarshal = f

	return mmMarshal
}

// Return sets up results that will be returned by Request.Marshal
func (mmMarshal *mRequestMockMarshal) Return(dAtA []byte, err error) *RequestMock {
	if mmMarshal.mock.funcMarshal != nil {
		mmMarshal.mock.t.Fatalf("RequestMock.Marshal mock is already set by Set")
	}

	if mmMarshal.defaultExpectation == nil {
		mmMarshal.defaultExpectation = &RequestMockMarshalExpectation{mock: mmMarshal.mock}
	}
	mmMarshal.defaultExpectation.results = &RequestMockMarshalResults{dAtA, err}
	return mmMarshal.mock
}

//Set uses given function f to mock the Request.Marshal method
func (mmMarshal *mRequestMockMarshal) Set(f func() (dAtA []byte, err error)) *RequestMock {
	if mmMarshal.defaultExpectation != nil {
		mmMarshal.mock.t.Fatalf("Default expectation is already set for the Request.Marshal method")
	}

	if len(mmMarshal.expectations) > 0 {
		mmMarshal.mock.t.Fatalf("Some expectations are already set for the Request.Marshal method")
	}

	mmMarshal.mock.funcMarshal = f
	return mmMarshal.mock
}

// Marshal implements Request
func (mmMarshal *RequestMock) Marshal() (dAtA []byte, err error) {
	mm_atomic.AddUint64(&mmMarshal.beforeMarshalCounter, 1)
	defer mm_atomic.AddUint64(&mmMarshal.afterMarshalCounter, 1)

	if mmMarshal.inspectFuncMarshal != nil {
		mmMarshal.inspectFuncMarshal()
	}

	if mmMarshal.MarshalMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMarshal.MarshalMock.defaultExpectation.Counter, 1)

		results := mmMarshal.MarshalMock.defaultExpectation.results
		if results == nil {
			mmMarshal.t.Fatal("No results are set for the RequestMock.Marshal")
		}
		return (*results).dAtA, (*results).err
	}
	if mmMarshal.funcMarshal != nil {
		return mmMarshal.funcMarshal()
	}
	mmMarshal.t.Fatalf("Unexpected call to RequestMock.Marshal.")
	return
}

// MarshalAfterCounter returns a count of finished RequestMock.Marshal invocations
func (mmMarshal *RequestMock) MarshalAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMarshal.afterMarshalCounter)
}

// MarshalBeforeCounter returns a count of RequestMock.Marshal invocations
func (mmMarshal *RequestMock) MarshalBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMarshal.beforeMarshalCounter)
}

// MinimockMarshalDone returns true if the count of the Marshal invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockMarshalDone() bool {
	for _, e := range m.MarshalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MarshalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMarshal != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		return false
	}
	return true
}

// MinimockMarshalInspect logs each unmet expectation
func (m *RequestMock) MinimockMarshalInspect() {
	for _, e := range m.MarshalMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.Marshal")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MarshalMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		m.t.Error("Expected call to RequestMock.Marshal")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMarshal != nil && mm_atomic.LoadUint64(&m.afterMarshalCounter) < 1 {
		m.t.Error("Expected call to RequestMock.Marshal")
	}
}

type mRequestMockReasonAffinityRef struct {
	mock               *RequestMock
	defaultExpectation *RequestMockReasonAffinityRefExpectation
	expectations       []*RequestMockReasonAffinityRefExpectation
}

// RequestMockReasonAffinityRefExpectation specifies expectation struct of the Request.ReasonAffinityRef
type RequestMockReasonAffinityRefExpectation struct {
	mock *RequestMock

	results *RequestMockReasonAffinityRefResults
	Counter uint64
}

// RequestMockReasonAffinityRefResults contains results of the Request.ReasonAffinityRef
type RequestMockReasonAffinityRefResults struct {
	r1 insolar.Reference
}

// Expect sets up expected params for Request.ReasonAffinityRef
func (mmReasonAffinityRef *mRequestMockReasonAffinityRef) Expect() *mRequestMockReasonAffinityRef {
	if mmReasonAffinityRef.mock.funcReasonAffinityRef != nil {
		mmReasonAffinityRef.mock.t.Fatalf("RequestMock.ReasonAffinityRef mock is already set by Set")
	}

	if mmReasonAffinityRef.defaultExpectation == nil {
		mmReasonAffinityRef.defaultExpectation = &RequestMockReasonAffinityRefExpectation{}
	}

	return mmReasonAffinityRef
}

// Inspect accepts an inspector function that has same arguments as the Request.ReasonAffinityRef
func (mmReasonAffinityRef *mRequestMockReasonAffinityRef) Inspect(f func()) *mRequestMockReasonAffinityRef {
	if mmReasonAffinityRef.mock.inspectFuncReasonAffinityRef != nil {
		mmReasonAffinityRef.mock.t.Fatalf("Inspect function is already set for RequestMock.ReasonAffinityRef")
	}

	mmReasonAffinityRef.mock.inspectFuncReasonAffinityRef = f

	return mmReasonAffinityRef
}

// Return sets up results that will be returned by Request.ReasonAffinityRef
func (mmReasonAffinityRef *mRequestMockReasonAffinityRef) Return(r1 insolar.Reference) *RequestMock {
	if mmReasonAffinityRef.mock.funcReasonAffinityRef != nil {
		mmReasonAffinityRef.mock.t.Fatalf("RequestMock.ReasonAffinityRef mock is already set by Set")
	}

	if mmReasonAffinityRef.defaultExpectation == nil {
		mmReasonAffinityRef.defaultExpectation = &RequestMockReasonAffinityRefExpectation{mock: mmReasonAffinityRef.mock}
	}
	mmReasonAffinityRef.defaultExpectation.results = &RequestMockReasonAffinityRefResults{r1}
	return mmReasonAffinityRef.mock
}

//Set uses given function f to mock the Request.ReasonAffinityRef method
func (mmReasonAffinityRef *mRequestMockReasonAffinityRef) Set(f func() (r1 insolar.Reference)) *RequestMock {
	if mmReasonAffinityRef.defaultExpectation != nil {
		mmReasonAffinityRef.mock.t.Fatalf("Default expectation is already set for the Request.ReasonAffinityRef method")
	}

	if len(mmReasonAffinityRef.expectations) > 0 {
		mmReasonAffinityRef.mock.t.Fatalf("Some expectations are already set for the Request.ReasonAffinityRef method")
	}

	mmReasonAffinityRef.mock.funcReasonAffinityRef = f
	return mmReasonAffinityRef.mock
}

// ReasonAffinityRef implements Request
func (mmReasonAffinityRef *RequestMock) ReasonAffinityRef() (r1 insolar.Reference) {
	mm_atomic.AddUint64(&mmReasonAffinityRef.beforeReasonAffinityRefCounter, 1)
	defer mm_atomic.AddUint64(&mmReasonAffinityRef.afterReasonAffinityRefCounter, 1)

	if mmReasonAffinityRef.inspectFuncReasonAffinityRef != nil {
		mmReasonAffinityRef.inspectFuncReasonAffinityRef()
	}

	if mmReasonAffinityRef.ReasonAffinityRefMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReasonAffinityRef.ReasonAffinityRefMock.defaultExpectation.Counter, 1)

		results := mmReasonAffinityRef.ReasonAffinityRefMock.defaultExpectation.results
		if results == nil {
			mmReasonAffinityRef.t.Fatal("No results are set for the RequestMock.ReasonAffinityRef")
		}
		return (*results).r1
	}
	if mmReasonAffinityRef.funcReasonAffinityRef != nil {
		return mmReasonAffinityRef.funcReasonAffinityRef()
	}
	mmReasonAffinityRef.t.Fatalf("Unexpected call to RequestMock.ReasonAffinityRef.")
	return
}

// ReasonAffinityRefAfterCounter returns a count of finished RequestMock.ReasonAffinityRef invocations
func (mmReasonAffinityRef *RequestMock) ReasonAffinityRefAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReasonAffinityRef.afterReasonAffinityRefCounter)
}

// ReasonAffinityRefBeforeCounter returns a count of RequestMock.ReasonAffinityRef invocations
func (mmReasonAffinityRef *RequestMock) ReasonAffinityRefBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReasonAffinityRef.beforeReasonAffinityRefCounter)
}

// MinimockReasonAffinityRefDone returns true if the count of the ReasonAffinityRef invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockReasonAffinityRefDone() bool {
	for _, e := range m.ReasonAffinityRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReasonAffinityRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReasonAffinityRefCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReasonAffinityRef != nil && mm_atomic.LoadUint64(&m.afterReasonAffinityRefCounter) < 1 {
		return false
	}
	return true
}

// MinimockReasonAffinityRefInspect logs each unmet expectation
func (m *RequestMock) MinimockReasonAffinityRefInspect() {
	for _, e := range m.ReasonAffinityRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.ReasonAffinityRef")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReasonAffinityRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReasonAffinityRefCounter) < 1 {
		m.t.Error("Expected call to RequestMock.ReasonAffinityRef")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReasonAffinityRef != nil && mm_atomic.LoadUint64(&m.afterReasonAffinityRefCounter) < 1 {
		m.t.Error("Expected call to RequestMock.ReasonAffinityRef")
	}
}

type mRequestMockReasonRef struct {
	mock               *RequestMock
	defaultExpectation *RequestMockReasonRefExpectation
	expectations       []*RequestMockReasonRefExpectation
}

// RequestMockReasonRefExpectation specifies expectation struct of the Request.ReasonRef
type RequestMockReasonRefExpectation struct {
	mock *RequestMock

	results *RequestMockReasonRefResults
	Counter uint64
}

// RequestMockReasonRefResults contains results of the Request.ReasonRef
type RequestMockReasonRefResults struct {
	r1 insolar.Reference
}

// Expect sets up expected params for Request.ReasonRef
func (mmReasonRef *mRequestMockReasonRef) Expect() *mRequestMockReasonRef {
	if mmReasonRef.mock.funcReasonRef != nil {
		mmReasonRef.mock.t.Fatalf("RequestMock.ReasonRef mock is already set by Set")
	}

	if mmReasonRef.defaultExpectation == nil {
		mmReasonRef.defaultExpectation = &RequestMockReasonRefExpectation{}
	}

	return mmReasonRef
}

// Inspect accepts an inspector function that has same arguments as the Request.ReasonRef
func (mmReasonRef *mRequestMockReasonRef) Inspect(f func()) *mRequestMockReasonRef {
	if mmReasonRef.mock.inspectFuncReasonRef != nil {
		mmReasonRef.mock.t.Fatalf("Inspect function is already set for RequestMock.ReasonRef")
	}

	mmReasonRef.mock.inspectFuncReasonRef = f

	return mmReasonRef
}

// Return sets up results that will be returned by Request.ReasonRef
func (mmReasonRef *mRequestMockReasonRef) Return(r1 insolar.Reference) *RequestMock {
	if mmReasonRef.mock.funcReasonRef != nil {
		mmReasonRef.mock.t.Fatalf("RequestMock.ReasonRef mock is already set by Set")
	}

	if mmReasonRef.defaultExpectation == nil {
		mmReasonRef.defaultExpectation = &RequestMockReasonRefExpectation{mock: mmReasonRef.mock}
	}
	mmReasonRef.defaultExpectation.results = &RequestMockReasonRefResults{r1}
	return mmReasonRef.mock
}

//Set uses given function f to mock the Request.ReasonRef method
func (mmReasonRef *mRequestMockReasonRef) Set(f func() (r1 insolar.Reference)) *RequestMock {
	if mmReasonRef.defaultExpectation != nil {
		mmReasonRef.mock.t.Fatalf("Default expectation is already set for the Request.ReasonRef method")
	}

	if len(mmReasonRef.expectations) > 0 {
		mmReasonRef.mock.t.Fatalf("Some expectations are already set for the Request.ReasonRef method")
	}

	mmReasonRef.mock.funcReasonRef = f
	return mmReasonRef.mock
}

// ReasonRef implements Request
func (mmReasonRef *RequestMock) ReasonRef() (r1 insolar.Reference) {
	mm_atomic.AddUint64(&mmReasonRef.beforeReasonRefCounter, 1)
	defer mm_atomic.AddUint64(&mmReasonRef.afterReasonRefCounter, 1)

	if mmReasonRef.inspectFuncReasonRef != nil {
		mmReasonRef.inspectFuncReasonRef()
	}

	if mmReasonRef.ReasonRefMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReasonRef.ReasonRefMock.defaultExpectation.Counter, 1)

		results := mmReasonRef.ReasonRefMock.defaultExpectation.results
		if results == nil {
			mmReasonRef.t.Fatal("No results are set for the RequestMock.ReasonRef")
		}
		return (*results).r1
	}
	if mmReasonRef.funcReasonRef != nil {
		return mmReasonRef.funcReasonRef()
	}
	mmReasonRef.t.Fatalf("Unexpected call to RequestMock.ReasonRef.")
	return
}

// ReasonRefAfterCounter returns a count of finished RequestMock.ReasonRef invocations
func (mmReasonRef *RequestMock) ReasonRefAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReasonRef.afterReasonRefCounter)
}

// ReasonRefBeforeCounter returns a count of RequestMock.ReasonRef invocations
func (mmReasonRef *RequestMock) ReasonRefBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReasonRef.beforeReasonRefCounter)
}

// MinimockReasonRefDone returns true if the count of the ReasonRef invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockReasonRefDone() bool {
	for _, e := range m.ReasonRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReasonRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReasonRefCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReasonRef != nil && mm_atomic.LoadUint64(&m.afterReasonRefCounter) < 1 {
		return false
	}
	return true
}

// MinimockReasonRefInspect logs each unmet expectation
func (m *RequestMock) MinimockReasonRefInspect() {
	for _, e := range m.ReasonRefMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.ReasonRef")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReasonRefMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReasonRefCounter) < 1 {
		m.t.Error("Expected call to RequestMock.ReasonRef")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReasonRef != nil && mm_atomic.LoadUint64(&m.afterReasonRefCounter) < 1 {
		m.t.Error("Expected call to RequestMock.ReasonRef")
	}
}

type mRequestMockValidate struct {
	mock               *RequestMock
	defaultExpectation *RequestMockValidateExpectation
	expectations       []*RequestMockValidateExpectation
}

// RequestMockValidateExpectation specifies expectation struct of the Request.Validate
type RequestMockValidateExpectation struct {
	mock *RequestMock

	results *RequestMockValidateResults
	Counter uint64
}

// RequestMockValidateResults contains results of the Request.Validate
type RequestMockValidateResults struct {
	err error
}

// Expect sets up expected params for Request.Validate
func (mmValidate *mRequestMockValidate) Expect() *mRequestMockValidate {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("RequestMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &RequestMockValidateExpectation{}
	}

	return mmValidate
}

// Inspect accepts an inspector function that has same arguments as the Request.Validate
func (mmValidate *mRequestMockValidate) Inspect(f func()) *mRequestMockValidate {
	if mmValidate.mock.inspectFuncValidate != nil {
		mmValidate.mock.t.Fatalf("Inspect function is already set for RequestMock.Validate")
	}

	mmValidate.mock.inspectFuncValidate = f

	return mmValidate
}

// Return sets up results that will be returned by Request.Validate
func (mmValidate *mRequestMockValidate) Return(err error) *RequestMock {
	if mmValidate.mock.funcValidate != nil {
		mmValidate.mock.t.Fatalf("RequestMock.Validate mock is already set by Set")
	}

	if mmValidate.defaultExpectation == nil {
		mmValidate.defaultExpectation = &RequestMockValidateExpectation{mock: mmValidate.mock}
	}
	mmValidate.defaultExpectation.results = &RequestMockValidateResults{err}
	return mmValidate.mock
}

//Set uses given function f to mock the Request.Validate method
func (mmValidate *mRequestMockValidate) Set(f func() (err error)) *RequestMock {
	if mmValidate.defaultExpectation != nil {
		mmValidate.mock.t.Fatalf("Default expectation is already set for the Request.Validate method")
	}

	if len(mmValidate.expectations) > 0 {
		mmValidate.mock.t.Fatalf("Some expectations are already set for the Request.Validate method")
	}

	mmValidate.mock.funcValidate = f
	return mmValidate.mock
}

// Validate implements Request
func (mmValidate *RequestMock) Validate() (err error) {
	mm_atomic.AddUint64(&mmValidate.beforeValidateCounter, 1)
	defer mm_atomic.AddUint64(&mmValidate.afterValidateCounter, 1)

	if mmValidate.inspectFuncValidate != nil {
		mmValidate.inspectFuncValidate()
	}

	if mmValidate.ValidateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidate.ValidateMock.defaultExpectation.Counter, 1)

		results := mmValidate.ValidateMock.defaultExpectation.results
		if results == nil {
			mmValidate.t.Fatal("No results are set for the RequestMock.Validate")
		}
		return (*results).err
	}
	if mmValidate.funcValidate != nil {
		return mmValidate.funcValidate()
	}
	mmValidate.t.Fatalf("Unexpected call to RequestMock.Validate.")
	return
}

// ValidateAfterCounter returns a count of finished RequestMock.Validate invocations
func (mmValidate *RequestMock) ValidateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidate.afterValidateCounter)
}

// ValidateBeforeCounter returns a count of RequestMock.Validate invocations
func (mmValidate *RequestMock) ValidateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidate.beforeValidateCounter)
}

// MinimockValidateDone returns true if the count of the Validate invocations corresponds
// the number of defined expectations
func (m *RequestMock) MinimockValidateDone() bool {
	for _, e := range m.ValidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidate != nil && mm_atomic.LoadUint64(&m.afterValidateCounter) < 1 {
		return false
	}
	return true
}

// MinimockValidateInspect logs each unmet expectation
func (m *RequestMock) MinimockValidateInspect() {
	for _, e := range m.ValidateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RequestMock.Validate")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidateCounter) < 1 {
		m.t.Error("Expected call to RequestMock.Validate")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidate != nil && mm_atomic.LoadUint64(&m.afterValidateCounter) < 1 {
		m.t.Error("Expected call to RequestMock.Validate")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RequestMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAffinityRefInspect()

		m.MinimockGetCallTypeInspect()

		m.MinimockIsAPIRequestInspect()

		m.MinimockIsCreationRequestInspect()

		m.MinimockIsTemporaryUploadCodeInspect()

		m.MinimockMarshalInspect()

		m.MinimockReasonAffinityRefInspect()

		m.MinimockReasonRefInspect()

		m.MinimockValidateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RequestMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RequestMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAffinityRefDone() &&
		m.MinimockGetCallTypeDone() &&
		m.MinimockIsAPIRequestDone() &&
		m.MinimockIsCreationRequestDone() &&
		m.MinimockIsTemporaryUploadCodeDone() &&
		m.MinimockMarshalDone() &&
		m.MinimockReasonAffinityRefDone() &&
		m.MinimockReasonRefDone() &&
		m.MinimockValidateDone()
}
