// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insolar/record/record.proto

package record

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CallType int32

const (
	CTMethod         CallType = 0
	CTSaveAsChild    CallType = 1
	CTSaveAsDelegate CallType = 2
	CTGenesis        CallType = 3
)

var CallType_name = map[int32]string{
	0: "CTMethod",
	1: "CTSaveAsChild",
	2: "CTSaveAsDelegate",
	3: "CTGenesis",
}

var CallType_value = map[string]int32{
	"CTMethod":         0,
	"CTSaveAsChild":    1,
	"CTSaveAsDelegate": 2,
	"CTGenesis":        3,
}

func (CallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{0}
}

type ReturnMode int32

const (
	// ReturnResult - return result as soon as it is ready
	ReturnResult ReturnMode = 0
	// ReturnNoWait - call method and return without results
	ReturnNoWait ReturnMode = 1
)

var ReturnMode_name = map[int32]string{
	0: "ReturnResult",
	1: "ReturnNoWait",
}

var ReturnMode_value = map[string]int32{
	"ReturnResult": 0,
	"ReturnNoWait": 1,
}

func (ReturnMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{1}
}

type Genesis struct {
	Polymorph int32  `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Hash      []byte `protobuf:"bytes,20,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *Genesis) Reset()      { *m = Genesis{} }
func (*Genesis) ProtoMessage() {}
func (*Genesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{0}
}
func (m *Genesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Genesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Genesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Genesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Genesis.Merge(m, src)
}
func (m *Genesis) XXX_Size() int {
	return m.Size()
}
func (m *Genesis) XXX_DiscardUnknown() {
	xxx_messageInfo_Genesis.DiscardUnknown(m)
}

var xxx_messageInfo_Genesis proto.InternalMessageInfo

type Child struct {
	Polymorph int32                                        `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	PrevChild github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,20,opt,name=PrevChild,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PrevChild"`
	Ref       github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,21,opt,name=Ref,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Ref"`
}

func (m *Child) Reset()      { *m = Child{} }
func (*Child) ProtoMessage() {}
func (*Child) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{1}
}
func (m *Child) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Child) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Child.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Child) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Child.Merge(m, src)
}
func (m *Child) XXX_Size() int {
	return m.Size()
}
func (m *Child) XXX_DiscardUnknown() {
	xxx_messageInfo_Child.DiscardUnknown(m)
}

var xxx_messageInfo_Child proto.InternalMessageInfo

type Jet struct {
	Polymorph int32 `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
}

func (m *Jet) Reset()      { *m = Jet{} }
func (*Jet) ProtoMessage() {}
func (*Jet) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{2}
}
func (m *Jet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Jet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Jet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Jet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Jet.Merge(m, src)
}
func (m *Jet) XXX_Size() int {
	return m.Size()
}
func (m *Jet) XXX_DiscardUnknown() {
	xxx_messageInfo_Jet.DiscardUnknown(m)
}

var xxx_messageInfo_Jet proto.InternalMessageInfo

type IncomingRequest struct {
	Polymorph       int32                                         `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	CallType        CallType                                      `protobuf:"varint,20,opt,name=CallType,proto3,enum=record.CallType" json:"CallType,omitempty"`
	Caller          github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,21,opt,name=Caller,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Caller"`
	CallerPrototype github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,22,opt,name=CallerPrototype,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"CallerPrototype"`
	Nonce           uint64                                        `protobuf:"varint,23,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Sequence        uint64                                        `protobuf:"varint,24,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	ReturnMode      ReturnMode                                    `protobuf:"varint,25,opt,name=ReturnMode,proto3,enum=record.ReturnMode" json:"ReturnMode,omitempty"`
	Immutable       bool                                          `protobuf:"varint,26,opt,name=Immutable,proto3" json:"Immutable,omitempty"`
	Base            *github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,27,opt,name=Base,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Base,omitempty"`
	Object          *github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,28,opt,name=Object,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Object,omitempty"`
	Prototype       *github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,29,opt,name=Prototype,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Prototype,omitempty"`
	Method          string                                        `protobuf:"bytes,30,opt,name=Method,proto3" json:"Method,omitempty"`
	Arguments       []byte                                        `protobuf:"bytes,31,opt,name=Arguments,proto3" json:"Arguments,omitempty"`
	Sender          github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,32,opt,name=Sender,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Sender"`
	APIRequestID    string                                        `protobuf:"bytes,33,opt,name=APIRequestID,proto3" json:"APIRequestID,omitempty"`
	Reason          github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,34,opt,name=Reason,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Reason"`
}

func (m *IncomingRequest) Reset()      { *m = IncomingRequest{} }
func (*IncomingRequest) ProtoMessage() {}
func (*IncomingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{3}
}
func (m *IncomingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingRequest.Merge(m, src)
}
func (m *IncomingRequest) XXX_Size() int {
	return m.Size()
}
func (m *IncomingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingRequest proto.InternalMessageInfo

type OutgoingRequest struct {
	Polymorph       int32                                         `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	CallType        CallType                                      `protobuf:"varint,20,opt,name=CallType,proto3,enum=record.CallType" json:"CallType,omitempty"`
	Caller          github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,21,opt,name=Caller,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Caller"`
	CallerPrototype github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,22,opt,name=CallerPrototype,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"CallerPrototype"`
	Nonce           uint64                                        `protobuf:"varint,23,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Sequence        uint64                                        `protobuf:"varint,24,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	ReturnMode      ReturnMode                                    `protobuf:"varint,25,opt,name=ReturnMode,proto3,enum=record.ReturnMode" json:"ReturnMode,omitempty"`
	Immutable       bool                                          `protobuf:"varint,26,opt,name=Immutable,proto3" json:"Immutable,omitempty"`
	Base            *github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,27,opt,name=Base,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Base,omitempty"`
	Object          *github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,28,opt,name=Object,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Object,omitempty"`
	Prototype       *github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,29,opt,name=Prototype,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Prototype,omitempty"`
	Method          string                                        `protobuf:"bytes,30,opt,name=Method,proto3" json:"Method,omitempty"`
	Arguments       []byte                                        `protobuf:"bytes,31,opt,name=Arguments,proto3" json:"Arguments,omitempty"`
	Sender          github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,32,opt,name=Sender,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Sender"`
	APIRequestID    string                                        `protobuf:"bytes,33,opt,name=APIRequestID,proto3" json:"APIRequestID,omitempty"`
	Reason          github_com_insolar_insolar_insolar.Reference  `protobuf:"bytes,34,opt,name=Reason,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Reason"`
}

func (m *OutgoingRequest) Reset()      { *m = OutgoingRequest{} }
func (*OutgoingRequest) ProtoMessage() {}
func (*OutgoingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{4}
}
func (m *OutgoingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingRequest.Merge(m, src)
}
func (m *OutgoingRequest) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingRequest proto.InternalMessageInfo

type Result struct {
	Polymorph int32                                        `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Object    github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,20,opt,name=Object,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"Object"`
	Request   github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Payload   []byte                                       `protobuf:"bytes,22,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (m *Result) Reset()      { *m = Result{} }
func (*Result) ProtoMessage() {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{5}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

type Type struct {
	Polymorph       int32                                        `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Domain          github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,20,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request         github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	TypeDeclaration []byte                                       `protobuf:"bytes,22,opt,name=TypeDeclaration,proto3" json:"TypeDeclaration,omitempty"`
}

func (m *Type) Reset()      { *m = Type{} }
func (*Type) ProtoMessage() {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{6}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Type.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(m, src)
}
func (m *Type) XXX_Size() int {
	return m.Size()
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

type Code struct {
	Polymorph   int32                                          `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Domain      github_com_insolar_insolar_insolar.Reference   `protobuf:"bytes,20,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request     github_com_insolar_insolar_insolar.Reference   `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Code        []byte                                         `protobuf:"bytes,22,opt,name=Code,proto3" json:"Code,omitempty"`
	MachineType github_com_insolar_insolar_insolar.MachineType `protobuf:"varint,23,opt,name=MachineType,proto3,customtype=github.com/insolar/insolar/insolar.MachineType" json:"MachineType"`
}

func (m *Code) Reset()      { *m = Code{} }
func (*Code) ProtoMessage() {}
func (*Code) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{7}
}
func (m *Code) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Code) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Code.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Code) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Code.Merge(m, src)
}
func (m *Code) XXX_Size() int {
	return m.Size()
}
func (m *Code) XXX_DiscardUnknown() {
	xxx_messageInfo_Code.DiscardUnknown(m)
}

var xxx_messageInfo_Code proto.InternalMessageInfo

type Activate struct {
	Polymorph   int32                                        `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Domain      github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,20,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request     github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Memory      []byte                                       `protobuf:"bytes,22,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Image       github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,23,opt,name=Image,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Image"`
	IsPrototype bool                                         `protobuf:"varint,24,opt,name=IsPrototype,proto3" json:"IsPrototype,omitempty"`
	Parent      github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,25,opt,name=Parent,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Parent"`
	IsDelegate  bool                                         `protobuf:"varint,26,opt,name=IsDelegate,proto3" json:"IsDelegate,omitempty"`
}

func (m *Activate) Reset()      { *m = Activate{} }
func (*Activate) ProtoMessage() {}
func (*Activate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{8}
}
func (m *Activate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Activate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Activate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Activate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activate.Merge(m, src)
}
func (m *Activate) XXX_Size() int {
	return m.Size()
}
func (m *Activate) XXX_DiscardUnknown() {
	xxx_messageInfo_Activate.DiscardUnknown(m)
}

var xxx_messageInfo_Activate proto.InternalMessageInfo

type Amend struct {
	Polymorph   int32                                        `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Domain      github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,20,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request     github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	Memory      []byte                                       `protobuf:"bytes,22,opt,name=Memory,proto3" json:"Memory,omitempty"`
	Image       github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,23,opt,name=Image,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Image"`
	IsPrototype bool                                         `protobuf:"varint,24,opt,name=IsPrototype,proto3" json:"IsPrototype,omitempty"`
	PrevState   github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,25,opt,name=PrevState,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PrevState"`
}

func (m *Amend) Reset()      { *m = Amend{} }
func (*Amend) ProtoMessage() {}
func (*Amend) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{9}
}
func (m *Amend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Amend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Amend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Amend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Amend.Merge(m, src)
}
func (m *Amend) XXX_Size() int {
	return m.Size()
}
func (m *Amend) XXX_DiscardUnknown() {
	xxx_messageInfo_Amend.DiscardUnknown(m)
}

var xxx_messageInfo_Amend proto.InternalMessageInfo

type Deactivate struct {
	Polymorph int32                                        `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Domain    github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,20,opt,name=Domain,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Domain"`
	Request   github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,21,opt,name=Request,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"Request"`
	PrevState github_com_insolar_insolar_insolar.ID        `protobuf:"bytes,22,opt,name=PrevState,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PrevState"`
}

func (m *Deactivate) Reset()      { *m = Deactivate{} }
func (*Deactivate) ProtoMessage() {}
func (*Deactivate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{10}
}
func (m *Deactivate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deactivate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deactivate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deactivate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deactivate.Merge(m, src)
}
func (m *Deactivate) XXX_Size() int {
	return m.Size()
}
func (m *Deactivate) XXX_DiscardUnknown() {
	xxx_messageInfo_Deactivate.DiscardUnknown(m)
}

var xxx_messageInfo_Deactivate proto.InternalMessageInfo

type PendingFilament struct {
	Polymorph      int32                                  `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	RecordID       github_com_insolar_insolar_insolar.ID  `protobuf:"bytes,20,opt,name=RecordID,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"RecordID"`
	PreviousRecord *github_com_insolar_insolar_insolar.ID `protobuf:"bytes,21,opt,name=PreviousRecord,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"PreviousRecord,omitempty"`
}

func (m *PendingFilament) Reset()      { *m = PendingFilament{} }
func (*PendingFilament) ProtoMessage() {}
func (*PendingFilament) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{11}
}
func (m *PendingFilament) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingFilament) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingFilament.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingFilament) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingFilament.Merge(m, src)
}
func (m *PendingFilament) XXX_Size() int {
	return m.Size()
}
func (m *PendingFilament) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingFilament.DiscardUnknown(m)
}

var xxx_messageInfo_PendingFilament proto.InternalMessageInfo

type Virtual struct {
	Polymorph int32 `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	// Types that are valid to be assigned to Union:
	//	*Virtual_Genesis
	//	*Virtual_Child
	//	*Virtual_Jet
	//	*Virtual_IncomingRequest
	//	*Virtual_Result
	//	*Virtual_Type
	//	*Virtual_Code
	//	*Virtual_Activate
	//	*Virtual_Amend
	//	*Virtual_Deactivate
	//	*Virtual_PendingFilament
	Union     isVirtual_Union `protobuf_oneof:"union"`
	Signature []byte          `protobuf:"bytes,200,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Virtual) Reset()      { *m = Virtual{} }
func (*Virtual) ProtoMessage() {}
func (*Virtual) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{12}
}
func (m *Virtual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Virtual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Virtual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Virtual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Virtual.Merge(m, src)
}
func (m *Virtual) XXX_Size() int {
	return m.Size()
}
func (m *Virtual) XXX_DiscardUnknown() {
	xxx_messageInfo_Virtual.DiscardUnknown(m)
}

var xxx_messageInfo_Virtual proto.InternalMessageInfo

type isVirtual_Union interface {
	isVirtual_Union()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Virtual_Genesis struct {
	Genesis *Genesis `protobuf:"bytes,101,opt,name=Genesis,proto3,oneof"`
}
type Virtual_Child struct {
	Child *Child `protobuf:"bytes,102,opt,name=Child,proto3,oneof"`
}
type Virtual_Jet struct {
	Jet *Jet `protobuf:"bytes,103,opt,name=Jet,proto3,oneof"`
}
type Virtual_IncomingRequest struct {
	IncomingRequest *IncomingRequest `protobuf:"bytes,104,opt,name=IncomingRequest,proto3,oneof"`
}
type Virtual_Result struct {
	Result *Result `protobuf:"bytes,105,opt,name=Result,proto3,oneof"`
}
type Virtual_Type struct {
	Type *Type `protobuf:"bytes,106,opt,name=Type,proto3,oneof"`
}
type Virtual_Code struct {
	Code *Code `protobuf:"bytes,107,opt,name=Code,proto3,oneof"`
}
type Virtual_Activate struct {
	Activate *Activate `protobuf:"bytes,108,opt,name=Activate,proto3,oneof"`
}
type Virtual_Amend struct {
	Amend *Amend `protobuf:"bytes,109,opt,name=Amend,proto3,oneof"`
}
type Virtual_Deactivate struct {
	Deactivate *Deactivate `protobuf:"bytes,110,opt,name=Deactivate,proto3,oneof"`
}
type Virtual_PendingFilament struct {
	PendingFilament *PendingFilament `protobuf:"bytes,111,opt,name=PendingFilament,proto3,oneof"`
}

func (*Virtual_Genesis) isVirtual_Union()         {}
func (*Virtual_Child) isVirtual_Union()           {}
func (*Virtual_Jet) isVirtual_Union()             {}
func (*Virtual_IncomingRequest) isVirtual_Union() {}
func (*Virtual_Result) isVirtual_Union()          {}
func (*Virtual_Type) isVirtual_Union()            {}
func (*Virtual_Code) isVirtual_Union()            {}
func (*Virtual_Activate) isVirtual_Union()        {}
func (*Virtual_Amend) isVirtual_Union()           {}
func (*Virtual_Deactivate) isVirtual_Union()      {}
func (*Virtual_PendingFilament) isVirtual_Union() {}

func (m *Virtual) GetUnion() isVirtual_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (m *Virtual) GetGenesis() *Genesis {
	if x, ok := m.GetUnion().(*Virtual_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *Virtual) GetChild() *Child {
	if x, ok := m.GetUnion().(*Virtual_Child); ok {
		return x.Child
	}
	return nil
}

func (m *Virtual) GetJet() *Jet {
	if x, ok := m.GetUnion().(*Virtual_Jet); ok {
		return x.Jet
	}
	return nil
}

func (m *Virtual) GetIncomingRequest() *IncomingRequest {
	if x, ok := m.GetUnion().(*Virtual_IncomingRequest); ok {
		return x.IncomingRequest
	}
	return nil
}

func (m *Virtual) GetResult() *Result {
	if x, ok := m.GetUnion().(*Virtual_Result); ok {
		return x.Result
	}
	return nil
}

func (m *Virtual) GetType() *Type {
	if x, ok := m.GetUnion().(*Virtual_Type); ok {
		return x.Type
	}
	return nil
}

func (m *Virtual) GetCode() *Code {
	if x, ok := m.GetUnion().(*Virtual_Code); ok {
		return x.Code
	}
	return nil
}

func (m *Virtual) GetActivate() *Activate {
	if x, ok := m.GetUnion().(*Virtual_Activate); ok {
		return x.Activate
	}
	return nil
}

func (m *Virtual) GetAmend() *Amend {
	if x, ok := m.GetUnion().(*Virtual_Amend); ok {
		return x.Amend
	}
	return nil
}

func (m *Virtual) GetDeactivate() *Deactivate {
	if x, ok := m.GetUnion().(*Virtual_Deactivate); ok {
		return x.Deactivate
	}
	return nil
}

func (m *Virtual) GetPendingFilament() *PendingFilament {
	if x, ok := m.GetUnion().(*Virtual_PendingFilament); ok {
		return x.PendingFilament
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Virtual) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Virtual_OneofMarshaler, _Virtual_OneofUnmarshaler, _Virtual_OneofSizer, []interface{}{
		(*Virtual_Genesis)(nil),
		(*Virtual_Child)(nil),
		(*Virtual_Jet)(nil),
		(*Virtual_IncomingRequest)(nil),
		(*Virtual_Result)(nil),
		(*Virtual_Type)(nil),
		(*Virtual_Code)(nil),
		(*Virtual_Activate)(nil),
		(*Virtual_Amend)(nil),
		(*Virtual_Deactivate)(nil),
		(*Virtual_PendingFilament)(nil),
	}
}

func _Virtual_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Virtual)
	// union
	switch x := m.Union.(type) {
	case *Virtual_Genesis:
		_ = b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *Virtual_Child:
		_ = b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Child); err != nil {
			return err
		}
	case *Virtual_Jet:
		_ = b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jet); err != nil {
			return err
		}
	case *Virtual_IncomingRequest:
		_ = b.EncodeVarint(104<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IncomingRequest); err != nil {
			return err
		}
	case *Virtual_Result:
		_ = b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case *Virtual_Type:
		_ = b.EncodeVarint(106<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Type); err != nil {
			return err
		}
	case *Virtual_Code:
		_ = b.EncodeVarint(107<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Code); err != nil {
			return err
		}
	case *Virtual_Activate:
		_ = b.EncodeVarint(108<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Activate); err != nil {
			return err
		}
	case *Virtual_Amend:
		_ = b.EncodeVarint(109<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Amend); err != nil {
			return err
		}
	case *Virtual_Deactivate:
		_ = b.EncodeVarint(110<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deactivate); err != nil {
			return err
		}
	case *Virtual_PendingFilament:
		_ = b.EncodeVarint(111<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PendingFilament); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Virtual.Union has unexpected type %T", x)
	}
	return nil
}

func _Virtual_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Virtual)
	switch tag {
	case 101: // union.Genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Genesis)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Genesis{msg}
		return true, err
	case 102: // union.Child
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Child)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Child{msg}
		return true, err
	case 103: // union.Jet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Jet)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Jet{msg}
		return true, err
	case 104: // union.IncomingRequest
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IncomingRequest)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_IncomingRequest{msg}
		return true, err
	case 105: // union.Result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Result)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Result{msg}
		return true, err
	case 106: // union.Type
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Type)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Type{msg}
		return true, err
	case 107: // union.Code
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Code)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Code{msg}
		return true, err
	case 108: // union.Activate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Activate)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Activate{msg}
		return true, err
	case 109: // union.Amend
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Amend)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Amend{msg}
		return true, err
	case 110: // union.Deactivate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Deactivate)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_Deactivate{msg}
		return true, err
	case 111: // union.PendingFilament
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PendingFilament)
		err := b.DecodeMessage(msg)
		m.Union = &Virtual_PendingFilament{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Virtual_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Virtual)
	// union
	switch x := m.Union.(type) {
	case *Virtual_Genesis:
		s := proto.Size(x.Genesis)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Child:
		s := proto.Size(x.Child)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Jet:
		s := proto.Size(x.Jet)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_IncomingRequest:
		s := proto.Size(x.IncomingRequest)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Result:
		s := proto.Size(x.Result)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Type:
		s := proto.Size(x.Type)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Code:
		s := proto.Size(x.Code)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Activate:
		s := proto.Size(x.Activate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Amend:
		s := proto.Size(x.Amend)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_Deactivate:
		s := proto.Size(x.Deactivate)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Virtual_PendingFilament:
		s := proto.Size(x.PendingFilament)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Material struct {
	Polymorph int32                                    `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Virtual   *Virtual                                 `protobuf:"bytes,20,opt,name=Virtual,proto3" json:"Virtual,omitempty"`
	JetID     github_com_insolar_insolar_insolar.JetID `protobuf:"bytes,21,opt,name=JetID,proto3,customtype=github.com/insolar/insolar/insolar.JetID" json:"JetID"`
	Signature []byte                                   `protobuf:"bytes,200,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Material) Reset()      { *m = Material{} }
func (*Material) ProtoMessage() {}
func (*Material) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{13}
}
func (m *Material) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Material) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Material.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Material) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Material.Merge(m, src)
}
func (m *Material) XXX_Size() int {
	return m.Size()
}
func (m *Material) XXX_DiscardUnknown() {
	xxx_messageInfo_Material.DiscardUnknown(m)
}

var xxx_messageInfo_Material proto.InternalMessageInfo

type CompositeFilamentRecord struct {
	Polymorph int32                                 `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	RecordID  github_com_insolar_insolar_insolar.ID `protobuf:"bytes,20,opt,name=RecordID,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"RecordID"`
	Record    Material                              `protobuf:"bytes,21,opt,name=Record,proto3" json:"Record"`
	MetaID    github_com_insolar_insolar_insolar.ID `protobuf:"bytes,22,opt,name=MetaID,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"MetaID"`
	Meta      Material                              `protobuf:"bytes,23,opt,name=Meta,proto3" json:"Meta"`
}

func (m *CompositeFilamentRecord) Reset()      { *m = CompositeFilamentRecord{} }
func (*CompositeFilamentRecord) ProtoMessage() {}
func (*CompositeFilamentRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c86cc3f6f53fe45, []int{14}
}
func (m *CompositeFilamentRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompositeFilamentRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompositeFilamentRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompositeFilamentRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompositeFilamentRecord.Merge(m, src)
}
func (m *CompositeFilamentRecord) XXX_Size() int {
	return m.Size()
}
func (m *CompositeFilamentRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CompositeFilamentRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CompositeFilamentRecord proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("record.CallType", CallType_name, CallType_value)
	proto.RegisterEnum("record.ReturnMode", ReturnMode_name, ReturnMode_value)
	proto.RegisterType((*Genesis)(nil), "record.Genesis")
	proto.RegisterType((*Child)(nil), "record.Child")
	proto.RegisterType((*Jet)(nil), "record.Jet")
	proto.RegisterType((*IncomingRequest)(nil), "record.IncomingRequest")
	proto.RegisterType((*OutgoingRequest)(nil), "record.OutgoingRequest")
	proto.RegisterType((*Result)(nil), "record.Result")
	proto.RegisterType((*Type)(nil), "record.Type")
	proto.RegisterType((*Code)(nil), "record.Code")
	proto.RegisterType((*Activate)(nil), "record.Activate")
	proto.RegisterType((*Amend)(nil), "record.Amend")
	proto.RegisterType((*Deactivate)(nil), "record.Deactivate")
	proto.RegisterType((*PendingFilament)(nil), "record.PendingFilament")
	proto.RegisterType((*Virtual)(nil), "record.Virtual")
	proto.RegisterType((*Material)(nil), "record.Material")
	proto.RegisterType((*CompositeFilamentRecord)(nil), "record.CompositeFilamentRecord")
}

func init() { proto.RegisterFile("insolar/record/record.proto", fileDescriptor_0c86cc3f6f53fe45) }

var fileDescriptor_0c86cc3f6f53fe45 = []byte{
	// 1269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4b, 0x6f, 0x1b, 0xd5,
	0x17, 0x9f, 0x49, 0x6c, 0xc7, 0x39, 0x49, 0x1a, 0xff, 0xaf, 0xfa, 0x6f, 0x6f, 0x5f, 0x13, 0x63,
	0xa9, 0x92, 0x5b, 0x5a, 0xb7, 0x2a, 0x15, 0x42, 0xec, 0xfc, 0xa0, 0xd8, 0xa1, 0x69, 0xad, 0x9b,
	0xf0, 0x58, 0x21, 0xdd, 0xd8, 0x37, 0xf6, 0x94, 0x99, 0xb9, 0x61, 0x1e, 0x95, 0xb2, 0xe3, 0x23,
	0xb0, 0x81, 0x35, 0x1b, 0xa4, 0x7e, 0x02, 0x16, 0x5d, 0xb1, 0xcc, 0x06, 0xa9, 0xec, 0x2a, 0x24,
	0x2a, 0xe2, 0x6c, 0x90, 0xd8, 0x54, 0x7c, 0x02, 0x74, 0x1f, 0xf3, 0x88, 0x23, 0xea, 0x60, 0x03,
	0x52, 0x51, 0x56, 0x33, 0xf7, 0xdc, 0x73, 0x7e, 0x77, 0xce, 0xef, 0x9e, 0x73, 0xef, 0x39, 0x03,
	0x97, 0x6c, 0x2f, 0xe0, 0x0e, 0xf5, 0x6f, 0xf9, 0xac, 0xc7, 0xfd, 0xbe, 0x7e, 0xd4, 0x76, 0x7d,
	0x1e, 0x72, 0x54, 0x50, 0xa3, 0x8b, 0x37, 0x07, 0x76, 0x38, 0x8c, 0xb6, 0x6b, 0x3d, 0xee, 0xde,
	0x1a, 0xf0, 0x01, 0xbf, 0x25, 0xa7, 0xb7, 0xa3, 0x1d, 0x39, 0x92, 0x03, 0xf9, 0xa6, 0xcc, 0x2a,
	0x75, 0x58, 0x78, 0x9f, 0x79, 0x2c, 0xb0, 0x03, 0x74, 0x19, 0x16, 0x77, 0xb9, 0xb3, 0xe7, 0x72,
	0x7f, 0x77, 0x88, 0x4b, 0x65, 0xb3, 0x9a, 0x27, 0xa9, 0x00, 0x21, 0xc8, 0xb5, 0x69, 0x30, 0xc4,
	0x67, 0xcb, 0x66, 0x75, 0x99, 0xc8, 0xf7, 0x77, 0x73, 0x4f, 0xbe, 0x59, 0x33, 0x2b, 0xdf, 0x9b,
	0x90, 0x6f, 0x0e, 0x6d, 0xa7, 0x3f, 0x01, 0xe1, 0x03, 0x58, 0xec, 0xfa, 0xec, 0xb1, 0x54, 0x55,
	0x30, 0x8d, 0x9b, 0xfb, 0x2f, 0xd6, 0x8c, 0x9f, 0x5e, 0xac, 0x5d, 0xcd, 0x7c, 0x74, 0xec, 0xe4,
	0xd8, 0xb3, 0xd6, 0x69, 0x91, 0xd4, 0x1e, 0xdd, 0x83, 0x79, 0xc2, 0x76, 0xf0, 0xff, 0x25, 0xcc,
	0x5d, 0x0d, 0x73, 0xe3, 0x04, 0x30, 0x84, 0xed, 0x30, 0x9f, 0x79, 0x3d, 0x46, 0x04, 0x80, 0x76,
	0xe1, 0x1a, 0xcc, 0xaf, 0xb3, 0xf0, 0xd5, 0xdf, 0xaf, 0x55, 0x7f, 0x2b, 0xc0, 0x6a, 0xc7, 0xeb,
	0x71, 0xd7, 0xf6, 0x06, 0x84, 0x7d, 0x1e, 0xb1, 0x60, 0x82, 0x1d, 0xba, 0x01, 0xc5, 0x26, 0x75,
	0x9c, 0xad, 0xbd, 0x5d, 0x26, 0xdd, 0x3e, 0x73, 0xa7, 0x54, 0xd3, 0x5b, 0x17, 0xcb, 0x49, 0xa2,
	0x81, 0xee, 0x43, 0x41, 0xbc, 0x33, 0x7f, 0x26, 0xdf, 0x34, 0x06, 0xfa, 0x14, 0x56, 0xd5, 0x5b,
	0x57, 0xec, 0x76, 0x28, 0x3e, 0xe1, 0xdc, 0x0c, 0xb0, 0xe3, 0x60, 0xe8, 0x2c, 0xe4, 0x1f, 0x70,
	0xaf, 0xc7, 0xf0, 0xf9, 0xb2, 0x59, 0xcd, 0x11, 0x35, 0x40, 0x17, 0xa1, 0xb8, 0x29, 0xa8, 0x11,
	0x13, 0x58, 0x4e, 0x24, 0x63, 0x74, 0x07, 0x80, 0xb0, 0x30, 0xf2, 0xbd, 0x0d, 0xde, 0x67, 0xf8,
	0x82, 0xe4, 0x03, 0xc5, 0x7c, 0xa4, 0x33, 0x24, 0xa3, 0x25, 0xf8, 0xed, 0xb8, 0x6e, 0x14, 0xd2,
	0x6d, 0x87, 0xe1, 0x8b, 0x65, 0xb3, 0x5a, 0x24, 0xa9, 0x00, 0xb5, 0x20, 0xd7, 0xa0, 0x01, 0xc3,
	0x97, 0xa4, 0x63, 0xb7, 0xff, 0xb2, 0x53, 0xd2, 0x1a, 0xb5, 0xa1, 0xf0, 0x70, 0xfb, 0x11, 0xeb,
	0x85, 0xf8, 0xf2, 0x94, 0x38, 0xda, 0x1e, 0x3d, 0x10, 0x71, 0x1e, 0xb3, 0x7d, 0x65, 0x4a, 0xb0,
	0x14, 0x02, 0x9d, 0x83, 0xc2, 0x06, 0x0b, 0x87, 0xbc, 0x8f, 0xad, 0xb2, 0x59, 0x5d, 0x24, 0x7a,
	0x24, 0x58, 0xa9, 0xfb, 0x83, 0xc8, 0x65, 0x5e, 0x18, 0xe0, 0x35, 0x99, 0x96, 0xa9, 0x40, 0xc4,
	0xd1, 0x26, 0xf3, 0xfa, 0xcc, 0xc7, 0xe5, 0x59, 0xe2, 0x48, 0x61, 0xa0, 0x0a, 0x2c, 0xd7, 0xbb,
	0x1d, 0x1d, 0xef, 0x9d, 0x16, 0x7e, 0x43, 0x7e, 0xc9, 0x11, 0x99, 0x58, 0x91, 0x30, 0x1a, 0x70,
	0x0f, 0x57, 0x66, 0x59, 0x51, 0x61, 0x64, 0xb2, 0xed, 0x61, 0x14, 0x0e, 0xf8, 0x69, 0xb6, 0x9d,
	0x66, 0xdb, 0x69, 0xb6, 0xfd, 0xc3, 0xd9, 0xf6, 0xb3, 0x29, 0x40, 0x83, 0xc8, 0x99, 0x94, 0x64,
	0xef, 0x25, 0xdb, 0x37, 0xd5, 0x3d, 0x9e, 0xee, 0xdd, 0x82, 0x76, 0x68, 0xa6, 0xf4, 0x8b, 0x41,
	0x10, 0x86, 0x85, 0x2e, 0xdd, 0x73, 0x38, 0xed, 0xab, 0xbc, 0x23, 0xf1, 0x50, 0xfb, 0xf7, 0xbb,
	0x09, 0x39, 0x99, 0xf6, 0xaf, 0xf6, 0xee, 0x3e, 0x14, 0x5a, 0xdc, 0xa5, 0xb6, 0xa7, 0xbd, 0x9b,
	0x92, 0x5a, 0x85, 0xf1, 0xb7, 0x3b, 0x59, 0x85, 0x55, 0xe1, 0x43, 0x8b, 0xf5, 0x1c, 0xea, 0xd3,
	0xd0, 0xe6, 0x9e, 0x76, 0x76, 0x5c, 0xac, 0x9d, 0xfe, 0x6e, 0x0e, 0x72, 0x4d, 0x9d, 0xd7, 0xaf,
	0xad, 0xd3, 0x48, 0xf9, 0xa0, 0x3d, 0x55, 0xfe, 0x7c, 0x02, 0x4b, 0x1b, 0xb4, 0x37, 0xb4, 0x3d,
	0x26, 0x0f, 0x7b, 0x71, 0x26, 0xae, 0x34, 0xde, 0xd6, 0xeb, 0xd4, 0x4e, 0xb0, 0x4e, 0xc6, 0x9a,
	0x64, 0xa1, 0x34, 0x71, 0x4f, 0xe7, 0xa1, 0x58, 0xef, 0x85, 0xf6, 0x63, 0x1a, 0xbe, 0xde, 0xe4,
	0xc9, 0x23, 0xcd, 0xe5, 0xfe, 0x9e, 0xa6, 0x4f, 0x8f, 0xd0, 0x3a, 0xe4, 0x3b, 0x2e, 0x1d, 0x28,
	0xea, 0xa6, 0x5d, 0x45, 0x41, 0xa0, 0x32, 0x2c, 0x75, 0x82, 0xf4, 0x20, 0xc6, 0xf2, 0xda, 0xc8,
	0x8a, 0x04, 0x47, 0x5d, 0xea, 0x33, 0x2f, 0x94, 0xd7, 0xd0, 0xd4, 0x1c, 0x29, 0x0c, 0x64, 0x01,
	0x74, 0x82, 0x16, 0x73, 0xd8, 0x80, 0x86, 0xf1, 0x2d, 0x95, 0x91, 0x54, 0xbe, 0x9e, 0x87, 0x7c,
	0xdd, 0x65, 0x5e, 0xff, 0x74, 0xe7, 0x66, 0xde, 0x39, 0xdd, 0xb8, 0x6d, 0x86, 0x82, 0xea, 0x0b,
	0x53, 0x37, 0x6e, 0xd2, 0xbe, 0xf2, 0xd5, 0x1c, 0x40, 0x8b, 0xd1, 0xff, 0x42, 0x5e, 0x1d, 0xe1,
	0xe5, 0xdc, 0x8c, 0xbc, 0xfc, 0x68, 0xc2, 0x6a, 0x97, 0x79, 0x7d, 0xdb, 0x1b, 0xdc, 0xb3, 0x1d,
	0x2a, 0xca, 0x8a, 0x09, 0xe4, 0x74, 0xa0, 0x48, 0x64, 0x21, 0xd7, 0x69, 0x4d, 0x77, 0x0d, 0x27,
	0xe6, 0xe8, 0x43, 0x38, 0x23, 0xbe, 0xc4, 0xe6, 0x51, 0xa0, 0x64, 0x9a, 0x20, 0x01, 0x68, 0x9e,
	0x1c, 0x70, 0x0c, 0xa4, 0xf2, 0x43, 0x0e, 0x16, 0x3e, 0xb2, 0xfd, 0x30, 0xa2, 0xce, 0x04, 0x5f,
	0xde, 0x4c, 0x7e, 0x43, 0x60, 0x56, 0x36, 0xab, 0x4b, 0x77, 0x56, 0xe3, 0x22, 0x55, 0x8b, 0xdb,
	0x06, 0x49, 0x7e, 0x54, 0x5c, 0xd5, 0xff, 0x1b, 0xf0, 0x8e, 0x54, 0x5d, 0x49, 0xea, 0x7b, 0x21,
	0x6c, 0x1b, 0x44, 0xff, 0x8d, 0x58, 0x93, 0x4d, 0x3d, 0x1e, 0x48, 0xa5, 0xa5, 0x58, 0x69, 0x9d,
	0x85, 0x6d, 0x83, 0xc8, 0x76, 0xbf, 0x79, 0xac, 0x93, 0xc7, 0x43, 0xa9, 0x7c, 0x3e, 0x56, 0x1e,
	0x9b, 0x6e, 0x1b, 0xe4, 0x58, 0xef, 0x5f, 0x8d, 0x4b, 0x26, 0x6c, 0x4b, 0xdb, 0x33, 0x69, 0x75,
	0x2d, 0xa4, 0x6d, 0x83, 0xc4, 0x25, 0x55, 0x45, 0x15, 0x1f, 0xf8, 0x91, 0xd4, 0x5b, 0x8e, 0xf5,
	0x84, 0xac, 0x6d, 0x10, 0x55, 0x98, 0x54, 0xf4, 0x3d, 0xf7, 0xd9, 0x51, 0x1d, 0x21, 0x13, 0x3a,
	0xf2, 0xde, 0xab, 0xa5, 0xd7, 0x12, 0x76, 0xa4, 0x5e, 0xd2, 0xe1, 0xc4, 0xf2, 0xb6, 0x41, 0xd2,
	0xab, 0xeb, 0xaa, 0x3e, 0x09, 0xb1, 0x7b, 0x94, 0x2e, 0x29, 0x14, 0x74, 0xa9, 0x73, 0xf2, 0x6e,
	0x36, 0x2f, 0xb1, 0x27, 0x75, 0x93, 0x56, 0x21, 0x9d, 0x69, 0x1b, 0x24, 0x9b, 0xbf, 0xcd, 0x63,
	0x51, 0x8b, 0xf9, 0x51, 0x0e, 0xc7, 0xa6, 0x05, 0x87, 0xe3, 0x71, 0x7e, 0x05, 0x16, 0x37, 0xed,
	0x81, 0x47, 0xc3, 0xc8, 0x67, 0x78, 0xdf, 0x54, 0xc5, 0x75, 0x22, 0x69, 0x2c, 0x40, 0x3e, 0xf2,
	0x6c, 0xee, 0x55, 0x9e, 0x9a, 0x50, 0xdc, 0xa0, 0x21, 0xf3, 0xed, 0x89, 0x01, 0x75, 0x2d, 0x89,
	0x3c, 0x99, 0x1b, 0x99, 0x80, 0xd2, 0x62, 0x92, 0x44, 0xe6, 0x3d, 0xc8, 0xaf, 0x33, 0x51, 0x66,
	0xab, 0x98, 0xbf, 0xad, 0x93, 0xa8, 0x7a, 0x82, 0x98, 0x97, 0x76, 0x44, 0x99, 0x4f, 0xf0, 0xa2,
	0xf2, 0xed, 0x1c, 0x9c, 0x6f, 0x72, 0x77, 0x97, 0x07, 0x76, 0xc8, 0x62, 0xd7, 0x55, 0xa2, 0xfc,
	0x7b, 0x89, 0x5e, 0x13, 0xd1, 0x9a, 0x24, 0x78, 0x26, 0x72, 0x62, 0x5a, 0x1b, 0x39, 0x01, 0x4d,
	0xb4, 0x96, 0x28, 0xf4, 0x37, 0x58, 0x48, 0x3b, 0xad, 0xe9, 0xce, 0x37, 0x6d, 0x8c, 0xae, 0x43,
	0x4e, 0xbc, 0xc9, 0xeb, 0xea, 0xcf, 0x17, 0x95, 0x3a, 0xd7, 0xbb, 0x69, 0x03, 0x8f, 0x96, 0xa1,
	0xd8, 0xdc, 0x52, 0x0d, 0x58, 0xc9, 0x40, 0xff, 0x83, 0x95, 0xe6, 0xd6, 0x26, 0x7d, 0xcc, 0xea,
	0x81, 0xcc, 0xf0, 0x92, 0x89, 0xce, 0x42, 0x29, 0x16, 0xc5, 0x57, 0x7f, 0x69, 0x0e, 0xad, 0xc0,
	0x62, 0x73, 0x4b, 0x9f, 0x16, 0xa5, 0xf9, 0xeb, 0xb7, 0xb3, 0x4d, 0x30, 0x2a, 0xc1, 0xb2, 0x1a,
	0xa9, 0xb4, 0x2c, 0x19, 0xa9, 0xe4, 0x01, 0xff, 0x98, 0xda, 0x61, 0xc9, 0x6c, 0xbc, 0xb3, 0x7f,
	0x60, 0x19, 0xcf, 0x0e, 0x2c, 0xe3, 0xf9, 0x81, 0x65, 0xbc, 0x3c, 0xb0, 0xcc, 0x2f, 0x46, 0x96,
	0xf9, 0x64, 0x64, 0x99, 0xfb, 0x23, 0xcb, 0x7c, 0x36, 0xb2, 0xcc, 0x5f, 0x46, 0x96, 0xf9, 0xeb,
	0xc8, 0x32, 0x5e, 0x8e, 0x2c, 0xf3, 0xcb, 0x43, 0xcb, 0x78, 0x76, 0x68, 0x19, 0xcf, 0x0f, 0x2d,
	0x63, 0xbb, 0x20, 0x7f, 0xab, 0xbe, 0xf5, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xc5, 0x0e,
	0x76, 0xac, 0x15, 0x00, 0x00,
}

func (x CallType) String() string {
	s, ok := CallType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ReturnMode) String() string {
	s, ok := ReturnMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Genesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Genesis)
	if !ok {
		that2, ok := that.(Genesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	return true
}
func (this *Child) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Child)
	if !ok {
		that2, ok := that.(Child)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.PrevChild.Equal(that1.PrevChild) {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	return true
}
func (this *Jet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Jet)
	if !ok {
		that2, ok := that.(Jet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	return true
}
func (this *IncomingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncomingRequest)
	if !ok {
		that2, ok := that.(IncomingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !this.Caller.Equal(that1.Caller) {
		return false
	}
	if !this.CallerPrototype.Equal(that1.CallerPrototype) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if this.ReturnMode != that1.ReturnMode {
		return false
	}
	if this.Immutable != that1.Immutable {
		return false
	}
	if that1.Base == nil {
		if this.Base != nil {
			return false
		}
	} else if !this.Base.Equal(*that1.Base) {
		return false
	}
	if that1.Object == nil {
		if this.Object != nil {
			return false
		}
	} else if !this.Object.Equal(*that1.Object) {
		return false
	}
	if that1.Prototype == nil {
		if this.Prototype != nil {
			return false
		}
	} else if !this.Prototype.Equal(*that1.Prototype) {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if !bytes.Equal(this.Arguments, that1.Arguments) {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.APIRequestID != that1.APIRequestID {
		return false
	}
	if !this.Reason.Equal(that1.Reason) {
		return false
	}
	return true
}
func (this *OutgoingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutgoingRequest)
	if !ok {
		that2, ok := that.(OutgoingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if this.CallType != that1.CallType {
		return false
	}
	if !this.Caller.Equal(that1.Caller) {
		return false
	}
	if !this.CallerPrototype.Equal(that1.CallerPrototype) {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if this.ReturnMode != that1.ReturnMode {
		return false
	}
	if this.Immutable != that1.Immutable {
		return false
	}
	if that1.Base == nil {
		if this.Base != nil {
			return false
		}
	} else if !this.Base.Equal(*that1.Base) {
		return false
	}
	if that1.Object == nil {
		if this.Object != nil {
			return false
		}
	} else if !this.Object.Equal(*that1.Object) {
		return false
	}
	if that1.Prototype == nil {
		if this.Prototype != nil {
			return false
		}
	} else if !this.Prototype.Equal(*that1.Prototype) {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if !bytes.Equal(this.Arguments, that1.Arguments) {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if this.APIRequestID != that1.APIRequestID {
		return false
	}
	if !this.Reason.Equal(that1.Reason) {
		return false
	}
	return true
}
func (this *Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Result)
	if !ok {
		that2, ok := that.(Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Object.Equal(that1.Object) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Type)
	if !ok {
		that2, ok := that.(Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.TypeDeclaration, that1.TypeDeclaration) {
		return false
	}
	return true
}
func (this *Code) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Code)
	if !ok {
		that2, ok := that.(Code)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.Code, that1.Code) {
		return false
	}
	if !this.MachineType.Equal(that1.MachineType) {
		return false
	}
	return true
}
func (this *Activate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Activate)
	if !ok {
		that2, ok := that.(Activate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.Memory, that1.Memory) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	if this.IsPrototype != that1.IsPrototype {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	if this.IsDelegate != that1.IsDelegate {
		return false
	}
	return true
}
func (this *Amend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Amend)
	if !ok {
		that2, ok := that.(Amend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !bytes.Equal(this.Memory, that1.Memory) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	if this.IsPrototype != that1.IsPrototype {
		return false
	}
	if !this.PrevState.Equal(that1.PrevState) {
		return false
	}
	return true
}
func (this *Deactivate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Deactivate)
	if !ok {
		that2, ok := that.(Deactivate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Domain.Equal(that1.Domain) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.PrevState.Equal(that1.PrevState) {
		return false
	}
	return true
}
func (this *PendingFilament) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PendingFilament)
	if !ok {
		that2, ok := that.(PendingFilament)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.RecordID.Equal(that1.RecordID) {
		return false
	}
	if that1.PreviousRecord == nil {
		if this.PreviousRecord != nil {
			return false
		}
	} else if !this.PreviousRecord.Equal(*that1.PreviousRecord) {
		return false
	}
	return true
}
func (this *Virtual) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual)
	if !ok {
		that2, ok := that.(Virtual)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if that1.Union == nil {
		if this.Union != nil {
			return false
		}
	} else if this.Union == nil {
		return false
	} else if !this.Union.Equal(that1.Union) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *Virtual_Genesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Genesis)
	if !ok {
		that2, ok := that.(Virtual_Genesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Genesis.Equal(that1.Genesis) {
		return false
	}
	return true
}
func (this *Virtual_Child) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Child)
	if !ok {
		that2, ok := that.(Virtual_Child)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Child.Equal(that1.Child) {
		return false
	}
	return true
}
func (this *Virtual_Jet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Jet)
	if !ok {
		that2, ok := that.(Virtual_Jet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Jet.Equal(that1.Jet) {
		return false
	}
	return true
}
func (this *Virtual_IncomingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_IncomingRequest)
	if !ok {
		that2, ok := that.(Virtual_IncomingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IncomingRequest.Equal(that1.IncomingRequest) {
		return false
	}
	return true
}
func (this *Virtual_Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Result)
	if !ok {
		that2, ok := that.(Virtual_Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *Virtual_Type) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Type)
	if !ok {
		that2, ok := that.(Virtual_Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *Virtual_Code) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Code)
	if !ok {
		that2, ok := that.(Virtual_Code)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Code.Equal(that1.Code) {
		return false
	}
	return true
}
func (this *Virtual_Activate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Activate)
	if !ok {
		that2, ok := that.(Virtual_Activate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Activate.Equal(that1.Activate) {
		return false
	}
	return true
}
func (this *Virtual_Amend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Amend)
	if !ok {
		that2, ok := that.(Virtual_Amend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Amend.Equal(that1.Amend) {
		return false
	}
	return true
}
func (this *Virtual_Deactivate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_Deactivate)
	if !ok {
		that2, ok := that.(Virtual_Deactivate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Deactivate.Equal(that1.Deactivate) {
		return false
	}
	return true
}
func (this *Virtual_PendingFilament) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Virtual_PendingFilament)
	if !ok {
		that2, ok := that.(Virtual_PendingFilament)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PendingFilament.Equal(that1.PendingFilament) {
		return false
	}
	return true
}
func (this *Material) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Material)
	if !ok {
		that2, ok := that.(Material)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.Virtual.Equal(that1.Virtual) {
		return false
	}
	if !this.JetID.Equal(that1.JetID) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *CompositeFilamentRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CompositeFilamentRecord)
	if !ok {
		that2, ok := that.(CompositeFilamentRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if !this.RecordID.Equal(that1.RecordID) {
		return false
	}
	if !this.Record.Equal(&that1.Record) {
		return false
	}
	if !this.MetaID.Equal(that1.MetaID) {
		return false
	}
	if !this.Meta.Equal(&that1.Meta) {
		return false
	}
	return true
}

type GenesisFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetHash() []byte
}

func (this *Genesis) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Genesis) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewGenesisFromFace(this)
}

func (this *Genesis) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *Genesis) GetHash() []byte {
	return this.Hash
}

func NewGenesisFromFace(that GenesisFace) *Genesis {
	this := &Genesis{}
	this.Polymorph = that.GetPolymorph()
	this.Hash = that.GetHash()
	return this
}

type ChildFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetPrevChild() github_com_insolar_insolar_insolar.ID
	GetRef() github_com_insolar_insolar_insolar.Reference
}

func (this *Child) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Child) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewChildFromFace(this)
}

func (this *Child) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *Child) GetPrevChild() github_com_insolar_insolar_insolar.ID {
	return this.PrevChild
}

func (this *Child) GetRef() github_com_insolar_insolar_insolar.Reference {
	return this.Ref
}

func NewChildFromFace(that ChildFace) *Child {
	this := &Child{}
	this.Polymorph = that.GetPolymorph()
	this.PrevChild = that.GetPrevChild()
	this.Ref = that.GetRef()
	return this
}

type JetFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
}

func (this *Jet) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Jet) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewJetFromFace(this)
}

func (this *Jet) GetPolymorph() int32 {
	return this.Polymorph
}

func NewJetFromFace(that JetFace) *Jet {
	this := &Jet{}
	this.Polymorph = that.GetPolymorph()
	return this
}

type IncomingRequestFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetCallType() CallType
	GetCaller() github_com_insolar_insolar_insolar.Reference
	GetCallerPrototype() github_com_insolar_insolar_insolar.Reference
	GetNonce() uint64
	GetSequence() uint64
	GetReturnMode() ReturnMode
	GetImmutable() bool
	GetBase() *github_com_insolar_insolar_insolar.Reference
	GetObject() *github_com_insolar_insolar_insolar.Reference
	GetPrototype() *github_com_insolar_insolar_insolar.Reference
	GetMethod() string
	GetArguments() []byte
	GetSender() github_com_insolar_insolar_insolar.Reference
	GetAPIRequestID() string
	GetReason() github_com_insolar_insolar_insolar.Reference
}

func (this *IncomingRequest) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *IncomingRequest) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewIncomingRequestFromFace(this)
}

func (this *IncomingRequest) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *IncomingRequest) GetCallType() CallType {
	return this.CallType
}

func (this *IncomingRequest) GetCaller() github_com_insolar_insolar_insolar.Reference {
	return this.Caller
}

func (this *IncomingRequest) GetCallerPrototype() github_com_insolar_insolar_insolar.Reference {
	return this.CallerPrototype
}

func (this *IncomingRequest) GetNonce() uint64 {
	return this.Nonce
}

func (this *IncomingRequest) GetSequence() uint64 {
	return this.Sequence
}

func (this *IncomingRequest) GetReturnMode() ReturnMode {
	return this.ReturnMode
}

func (this *IncomingRequest) GetImmutable() bool {
	return this.Immutable
}

func (this *IncomingRequest) GetBase() *github_com_insolar_insolar_insolar.Reference {
	return this.Base
}

func (this *IncomingRequest) GetObject() *github_com_insolar_insolar_insolar.Reference {
	return this.Object
}

func (this *IncomingRequest) GetPrototype() *github_com_insolar_insolar_insolar.Reference {
	return this.Prototype
}

func (this *IncomingRequest) GetMethod() string {
	return this.Method
}

func (this *IncomingRequest) GetArguments() []byte {
	return this.Arguments
}

func (this *IncomingRequest) GetSender() github_com_insolar_insolar_insolar.Reference {
	return this.Sender
}

func (this *IncomingRequest) GetAPIRequestID() string {
	return this.APIRequestID
}

func (this *IncomingRequest) GetReason() github_com_insolar_insolar_insolar.Reference {
	return this.Reason
}

func NewIncomingRequestFromFace(that IncomingRequestFace) *IncomingRequest {
	this := &IncomingRequest{}
	this.Polymorph = that.GetPolymorph()
	this.CallType = that.GetCallType()
	this.Caller = that.GetCaller()
	this.CallerPrototype = that.GetCallerPrototype()
	this.Nonce = that.GetNonce()
	this.Sequence = that.GetSequence()
	this.ReturnMode = that.GetReturnMode()
	this.Immutable = that.GetImmutable()
	this.Base = that.GetBase()
	this.Object = that.GetObject()
	this.Prototype = that.GetPrototype()
	this.Method = that.GetMethod()
	this.Arguments = that.GetArguments()
	this.Sender = that.GetSender()
	this.APIRequestID = that.GetAPIRequestID()
	this.Reason = that.GetReason()
	return this
}

type OutgoingRequestFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetCallType() CallType
	GetCaller() github_com_insolar_insolar_insolar.Reference
	GetCallerPrototype() github_com_insolar_insolar_insolar.Reference
	GetNonce() uint64
	GetSequence() uint64
	GetReturnMode() ReturnMode
	GetImmutable() bool
	GetBase() *github_com_insolar_insolar_insolar.Reference
	GetObject() *github_com_insolar_insolar_insolar.Reference
	GetPrototype() *github_com_insolar_insolar_insolar.Reference
	GetMethod() string
	GetArguments() []byte
	GetSender() github_com_insolar_insolar_insolar.Reference
	GetAPIRequestID() string
	GetReason() github_com_insolar_insolar_insolar.Reference
}

func (this *OutgoingRequest) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *OutgoingRequest) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewOutgoingRequestFromFace(this)
}

func (this *OutgoingRequest) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *OutgoingRequest) GetCallType() CallType {
	return this.CallType
}

func (this *OutgoingRequest) GetCaller() github_com_insolar_insolar_insolar.Reference {
	return this.Caller
}

func (this *OutgoingRequest) GetCallerPrototype() github_com_insolar_insolar_insolar.Reference {
	return this.CallerPrototype
}

func (this *OutgoingRequest) GetNonce() uint64 {
	return this.Nonce
}

func (this *OutgoingRequest) GetSequence() uint64 {
	return this.Sequence
}

func (this *OutgoingRequest) GetReturnMode() ReturnMode {
	return this.ReturnMode
}

func (this *OutgoingRequest) GetImmutable() bool {
	return this.Immutable
}

func (this *OutgoingRequest) GetBase() *github_com_insolar_insolar_insolar.Reference {
	return this.Base
}

func (this *OutgoingRequest) GetObject() *github_com_insolar_insolar_insolar.Reference {
	return this.Object
}

func (this *OutgoingRequest) GetPrototype() *github_com_insolar_insolar_insolar.Reference {
	return this.Prototype
}

func (this *OutgoingRequest) GetMethod() string {
	return this.Method
}

func (this *OutgoingRequest) GetArguments() []byte {
	return this.Arguments
}

func (this *OutgoingRequest) GetSender() github_com_insolar_insolar_insolar.Reference {
	return this.Sender
}

func (this *OutgoingRequest) GetAPIRequestID() string {
	return this.APIRequestID
}

func (this *OutgoingRequest) GetReason() github_com_insolar_insolar_insolar.Reference {
	return this.Reason
}

func NewOutgoingRequestFromFace(that OutgoingRequestFace) *OutgoingRequest {
	this := &OutgoingRequest{}
	this.Polymorph = that.GetPolymorph()
	this.CallType = that.GetCallType()
	this.Caller = that.GetCaller()
	this.CallerPrototype = that.GetCallerPrototype()
	this.Nonce = that.GetNonce()
	this.Sequence = that.GetSequence()
	this.ReturnMode = that.GetReturnMode()
	this.Immutable = that.GetImmutable()
	this.Base = that.GetBase()
	this.Object = that.GetObject()
	this.Prototype = that.GetPrototype()
	this.Method = that.GetMethod()
	this.Arguments = that.GetArguments()
	this.Sender = that.GetSender()
	this.APIRequestID = that.GetAPIRequestID()
	this.Reason = that.GetReason()
	return this
}

type ResultFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetObject() github_com_insolar_insolar_insolar.ID
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetPayload() []byte
}

func (this *Result) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Result) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewResultFromFace(this)
}

func (this *Result) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *Result) GetObject() github_com_insolar_insolar_insolar.ID {
	return this.Object
}

func (this *Result) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *Result) GetPayload() []byte {
	return this.Payload
}

func NewResultFromFace(that ResultFace) *Result {
	this := &Result{}
	this.Polymorph = that.GetPolymorph()
	this.Object = that.GetObject()
	this.Request = that.GetRequest()
	this.Payload = that.GetPayload()
	return this
}

type TypeFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetTypeDeclaration() []byte
}

func (this *Type) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Type) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewTypeFromFace(this)
}

func (this *Type) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *Type) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *Type) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *Type) GetTypeDeclaration() []byte {
	return this.TypeDeclaration
}

func NewTypeFromFace(that TypeFace) *Type {
	this := &Type{}
	this.Polymorph = that.GetPolymorph()
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.TypeDeclaration = that.GetTypeDeclaration()
	return this
}

type CodeFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetPolymorph() int32
	GetDomain() github_com_insolar_insolar_insolar.Reference
	GetRequest() github_com_insolar_insolar_insolar.Reference
	GetCode() []byte
	GetMachineType() github_com_insolar_insolar_insolar.MachineType
}

func (this *Code) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Code) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCodeFromFace(this)
}

func (this *Code) GetPolymorph() int32 {
	return this.Polymorph
}

func (this *Code) GetDomain() github_com_insolar_insolar_insolar.Reference {
	return this.Domain
}

func (this *Code) GetRequest() github_com_insolar_insolar_insolar.Reference {
	return this.Request
}

func (this *Code) GetCode() []byte {
	return this.Code
}

func (this *Code) GetMachineType() github_com_insolar_insolar_insolar.MachineType {
	return this.MachineType
}

func NewCodeFromFace(that CodeFace) *Code {
	this := &Code{}
	this.Polymorph = that.GetPolymorph()
	this.Domain = that.GetDomain()
	this.Request = that.GetRequest()
	this.Code = that.GetCode()
	this.MachineType = that.GetMachineType()
	return this
}

func (this *Genesis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&record.Genesis{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Child) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&record.Child{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "PrevChild: "+fmt.Sprintf("%#v", this.PrevChild)+",\n")
	s = append(s, "Ref: "+fmt.Sprintf("%#v", this.Ref)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Jet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&record.Jet{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IncomingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&record.IncomingRequest{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "Caller: "+fmt.Sprintf("%#v", this.Caller)+",\n")
	s = append(s, "CallerPrototype: "+fmt.Sprintf("%#v", this.CallerPrototype)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	s = append(s, "ReturnMode: "+fmt.Sprintf("%#v", this.ReturnMode)+",\n")
	s = append(s, "Immutable: "+fmt.Sprintf("%#v", this.Immutable)+",\n")
	s = append(s, "Base: "+fmt.Sprintf("%#v", this.Base)+",\n")
	s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	s = append(s, "Prototype: "+fmt.Sprintf("%#v", this.Prototype)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "APIRequestID: "+fmt.Sprintf("%#v", this.APIRequestID)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutgoingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&record.OutgoingRequest{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "CallType: "+fmt.Sprintf("%#v", this.CallType)+",\n")
	s = append(s, "Caller: "+fmt.Sprintf("%#v", this.Caller)+",\n")
	s = append(s, "CallerPrototype: "+fmt.Sprintf("%#v", this.CallerPrototype)+",\n")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	s = append(s, "ReturnMode: "+fmt.Sprintf("%#v", this.ReturnMode)+",\n")
	s = append(s, "Immutable: "+fmt.Sprintf("%#v", this.Immutable)+",\n")
	s = append(s, "Base: "+fmt.Sprintf("%#v", this.Base)+",\n")
	s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	s = append(s, "Prototype: "+fmt.Sprintf("%#v", this.Prototype)+",\n")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Arguments: "+fmt.Sprintf("%#v", this.Arguments)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "APIRequestID: "+fmt.Sprintf("%#v", this.APIRequestID)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&record.Result{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Object: "+fmt.Sprintf("%#v", this.Object)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&record.Type{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "TypeDeclaration: "+fmt.Sprintf("%#v", this.TypeDeclaration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Code) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&record.Code{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "MachineType: "+fmt.Sprintf("%#v", this.MachineType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Activate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&record.Activate{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "IsPrototype: "+fmt.Sprintf("%#v", this.IsPrototype)+",\n")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "IsDelegate: "+fmt.Sprintf("%#v", this.IsDelegate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Amend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&record.Amend{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Memory: "+fmt.Sprintf("%#v", this.Memory)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "IsPrototype: "+fmt.Sprintf("%#v", this.IsPrototype)+",\n")
	s = append(s, "PrevState: "+fmt.Sprintf("%#v", this.PrevState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Deactivate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&record.Deactivate{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Domain: "+fmt.Sprintf("%#v", this.Domain)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "PrevState: "+fmt.Sprintf("%#v", this.PrevState)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PendingFilament) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&record.PendingFilament{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "RecordID: "+fmt.Sprintf("%#v", this.RecordID)+",\n")
	s = append(s, "PreviousRecord: "+fmt.Sprintf("%#v", this.PreviousRecord)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Virtual) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&record.Virtual{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	if this.Union != nil {
		s = append(s, "Union: "+fmt.Sprintf("%#v", this.Union)+",\n")
	}
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Virtual_Genesis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Genesis{` +
		`Genesis:` + fmt.Sprintf("%#v", this.Genesis) + `}`}, ", ")
	return s
}
func (this *Virtual_Child) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Child{` +
		`Child:` + fmt.Sprintf("%#v", this.Child) + `}`}, ", ")
	return s
}
func (this *Virtual_Jet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Jet{` +
		`Jet:` + fmt.Sprintf("%#v", this.Jet) + `}`}, ", ")
	return s
}
func (this *Virtual_IncomingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_IncomingRequest{` +
		`IncomingRequest:` + fmt.Sprintf("%#v", this.IncomingRequest) + `}`}, ", ")
	return s
}
func (this *Virtual_Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Result{` +
		`Result:` + fmt.Sprintf("%#v", this.Result) + `}`}, ", ")
	return s
}
func (this *Virtual_Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Type{` +
		`Type:` + fmt.Sprintf("%#v", this.Type) + `}`}, ", ")
	return s
}
func (this *Virtual_Code) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Code{` +
		`Code:` + fmt.Sprintf("%#v", this.Code) + `}`}, ", ")
	return s
}
func (this *Virtual_Activate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Activate{` +
		`Activate:` + fmt.Sprintf("%#v", this.Activate) + `}`}, ", ")
	return s
}
func (this *Virtual_Amend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Amend{` +
		`Amend:` + fmt.Sprintf("%#v", this.Amend) + `}`}, ", ")
	return s
}
func (this *Virtual_Deactivate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_Deactivate{` +
		`Deactivate:` + fmt.Sprintf("%#v", this.Deactivate) + `}`}, ", ")
	return s
}
func (this *Virtual_PendingFilament) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&record.Virtual_PendingFilament{` +
		`PendingFilament:` + fmt.Sprintf("%#v", this.PendingFilament) + `}`}, ", ")
	return s
}
func (this *Material) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&record.Material{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	if this.Virtual != nil {
		s = append(s, "Virtual: "+fmt.Sprintf("%#v", this.Virtual)+",\n")
	}
	s = append(s, "JetID: "+fmt.Sprintf("%#v", this.JetID)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CompositeFilamentRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&record.CompositeFilamentRecord{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "RecordID: "+fmt.Sprintf("%#v", this.RecordID)+",\n")
	s = append(s, "Record: "+strings.Replace(this.Record.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "MetaID: "+fmt.Sprintf("%#v", this.MetaID)+",\n")
	s = append(s, "Meta: "+strings.Replace(this.Meta.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRecord(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Genesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Genesis) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *Child) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Child) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PrevChild.Size()))
	n1, err := m.PrevChild.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Ref.Size()))
	n2, err := m.Ref.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *Jet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Jet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	return i, nil
}

func (m *IncomingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.CallType))
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Caller.Size()))
	n3, err := m.Caller.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.CallerPrototype.Size()))
	n4, err := m.CallerPrototype.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.Nonce != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Nonce))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Sequence))
	}
	if m.ReturnMode != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.ReturnMode))
	}
	if m.Immutable {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.Immutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Base != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Base.Size()))
		n5, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Object != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Object.Size()))
		n6, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Prototype != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Prototype.Size()))
		n7, err := m.Prototype.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Arguments) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Arguments)))
		i += copy(dAtA[i:], m.Arguments)
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Sender.Size()))
	n8, err := m.Sender.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if len(m.APIRequestID) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.APIRequestID)))
		i += copy(dAtA[i:], m.APIRequestID)
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Reason.Size()))
	n9, err := m.Reason.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *OutgoingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.CallType))
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Caller.Size()))
	n10, err := m.Caller.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.CallerPrototype.Size()))
	n11, err := m.CallerPrototype.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if m.Nonce != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Nonce))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Sequence))
	}
	if m.ReturnMode != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.ReturnMode))
	}
	if m.Immutable {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.Immutable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Base != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Base.Size()))
		n12, err := m.Base.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Object != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Object.Size()))
		n13, err := m.Object.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Prototype != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Prototype.Size()))
		n14, err := m.Prototype.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Arguments) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Arguments)))
		i += copy(dAtA[i:], m.Arguments)
	}
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Sender.Size()))
	n15, err := m.Sender.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	if len(m.APIRequestID) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.APIRequestID)))
		i += copy(dAtA[i:], m.APIRequestID)
	}
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Reason.Size()))
	n16, err := m.Reason.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Object.Size()))
	n17, err := m.Object.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n18, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.Payload) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n19, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n20, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.TypeDeclaration) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.TypeDeclaration)))
		i += copy(dAtA[i:], m.TypeDeclaration)
	}
	return i, nil
}

func (m *Code) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Code) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n21, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n22, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if len(m.Code) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.MachineType != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.MachineType))
	}
	return i, nil
}

func (m *Activate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n23, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n24, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	if len(m.Memory) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Memory)))
		i += copy(dAtA[i:], m.Memory)
	}
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Image.Size()))
	n25, err := m.Image.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	if m.IsPrototype {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsPrototype {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Parent.Size()))
	n26, err := m.Parent.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if m.IsDelegate {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsDelegate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Amend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Amend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n27, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n28, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if len(m.Memory) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Memory)))
		i += copy(dAtA[i:], m.Memory)
	}
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Image.Size()))
	n29, err := m.Image.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.IsPrototype {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		if m.IsPrototype {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PrevState.Size()))
	n30, err := m.PrevState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	return i, nil
}

func (m *Deactivate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deactivate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Domain.Size()))
	n31, err := m.Domain.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Request.Size()))
	n32, err := m.Request.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.PrevState.Size()))
	n33, err := m.PrevState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	return i, nil
}

func (m *PendingFilament) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingFilament) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.RecordID.Size()))
	n34, err := m.RecordID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	if m.PreviousRecord != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.PreviousRecord.Size()))
		n35, err := m.PreviousRecord.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *Virtual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Virtual) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	if m.Union != nil {
		nn36, err := m.Union.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn36
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *Virtual_Genesis) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Genesis != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Genesis.Size()))
		n37, err := m.Genesis.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	return i, nil
}
func (m *Virtual_Child) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Child != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Child.Size()))
		n38, err := m.Child.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}
func (m *Virtual_Jet) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Jet != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Jet.Size()))
		n39, err := m.Jet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	return i, nil
}
func (m *Virtual_IncomingRequest) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IncomingRequest != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.IncomingRequest.Size()))
		n40, err := m.IncomingRequest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}
func (m *Virtual_Result) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Result != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Result.Size()))
		n41, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	return i, nil
}
func (m *Virtual_Type) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Type != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Type.Size()))
		n42, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	return i, nil
}
func (m *Virtual_Code) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Code != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Code.Size()))
		n43, err := m.Code.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	return i, nil
}
func (m *Virtual_Activate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Activate != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Activate.Size()))
		n44, err := m.Activate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}
func (m *Virtual_Amend) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Amend != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Amend.Size()))
		n45, err := m.Amend.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	return i, nil
}
func (m *Virtual_Deactivate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Deactivate != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Deactivate.Size()))
		n46, err := m.Deactivate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	return i, nil
}
func (m *Virtual_PendingFilament) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PendingFilament != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.PendingFilament.Size()))
		n47, err := m.PendingFilament.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	return i, nil
}
func (m *Material) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Material) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	if m.Virtual != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Virtual.Size()))
		n48, err := m.Virtual.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.JetID.Size()))
	n49, err := m.JetID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n49
	if len(m.Signature) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0xc
		i++
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *CompositeFilamentRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompositeFilamentRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRecord(dAtA, i, uint64(m.Polymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.RecordID.Size()))
	n50, err := m.RecordID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n50
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Record.Size()))
	n51, err := m.Record.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n51
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.MetaID.Size()))
	n52, err := m.MetaID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n52
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRecord(dAtA, i, uint64(m.Meta.Size()))
	n53, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n53
	return i, nil
}

func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *Child) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.PrevChild.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Ref.Size()
	n += 2 + l + sovRecord(uint64(l))
	return n
}

func (m *Jet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	return n
}

func (m *IncomingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		n += 2 + sovRecord(uint64(m.CallType))
	}
	l = m.Caller.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.CallerPrototype.Size()
	n += 2 + l + sovRecord(uint64(l))
	if m.Nonce != 0 {
		n += 2 + sovRecord(uint64(m.Nonce))
	}
	if m.Sequence != 0 {
		n += 2 + sovRecord(uint64(m.Sequence))
	}
	if m.ReturnMode != 0 {
		n += 2 + sovRecord(uint64(m.ReturnMode))
	}
	if m.Immutable {
		n += 3
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	if m.Prototype != nil {
		l = m.Prototype.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = len(m.Arguments)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.Sender.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.APIRequestID)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.Reason.Size()
	n += 2 + l + sovRecord(uint64(l))
	return n
}

func (m *OutgoingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	if m.CallType != 0 {
		n += 2 + sovRecord(uint64(m.CallType))
	}
	l = m.Caller.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.CallerPrototype.Size()
	n += 2 + l + sovRecord(uint64(l))
	if m.Nonce != 0 {
		n += 2 + sovRecord(uint64(m.Nonce))
	}
	if m.Sequence != 0 {
		n += 2 + sovRecord(uint64(m.Sequence))
	}
	if m.ReturnMode != 0 {
		n += 2 + sovRecord(uint64(m.ReturnMode))
	}
	if m.Immutable {
		n += 3
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	if m.Prototype != nil {
		l = m.Prototype.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = len(m.Arguments)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.Sender.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.APIRequestID)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.Reason.Size()
	n += 2 + l + sovRecord(uint64(l))
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.Object.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.Domain.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.TypeDeclaration)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.Domain.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.Code)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	if m.MachineType != 0 {
		n += 2 + sovRecord(uint64(m.MachineType))
	}
	return n
}

func (m *Activate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.Domain.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.Memory)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.Image.Size()
	n += 2 + l + sovRecord(uint64(l))
	if m.IsPrototype {
		n += 3
	}
	l = m.Parent.Size()
	n += 2 + l + sovRecord(uint64(l))
	if m.IsDelegate {
		n += 3
	}
	return n
}

func (m *Amend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.Domain.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.Memory)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.Image.Size()
	n += 2 + l + sovRecord(uint64(l))
	if m.IsPrototype {
		n += 3
	}
	l = m.PrevState.Size()
	n += 2 + l + sovRecord(uint64(l))
	return n
}

func (m *Deactivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.Domain.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Request.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.PrevState.Size()
	n += 2 + l + sovRecord(uint64(l))
	return n
}

func (m *PendingFilament) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.RecordID.Size()
	n += 2 + l + sovRecord(uint64(l))
	if m.PreviousRecord != nil {
		l = m.PreviousRecord.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *Virtual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	if m.Union != nil {
		n += m.Union.Size()
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *Virtual_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Genesis != nil {
		l = m.Genesis.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Child) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Child != nil {
		l = m.Child.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Jet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Jet != nil {
		l = m.Jet.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_IncomingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncomingRequest != nil {
		l = m.IncomingRequest.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Type) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Code) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != nil {
		l = m.Code.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Activate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Activate != nil {
		l = m.Activate.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Amend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amend != nil {
		l = m.Amend.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_Deactivate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deactivate != nil {
		l = m.Deactivate.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Virtual_PendingFilament) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PendingFilament != nil {
		l = m.PendingFilament.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}
func (m *Material) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	if m.Virtual != nil {
		l = m.Virtual.Size()
		n += 2 + l + sovRecord(uint64(l))
	}
	l = m.JetID.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovRecord(uint64(l))
	}
	return n
}

func (m *CompositeFilamentRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovRecord(uint64(m.Polymorph))
	}
	l = m.RecordID.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Record.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.MetaID.Size()
	n += 2 + l + sovRecord(uint64(l))
	l = m.Meta.Size()
	n += 2 + l + sovRecord(uint64(l))
	return n
}

func sovRecord(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Genesis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Genesis{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Child) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Child{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`PrevChild:` + fmt.Sprintf("%v", this.PrevChild) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Jet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Jet{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IncomingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IncomingRequest{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`Caller:` + fmt.Sprintf("%v", this.Caller) + `,`,
		`CallerPrototype:` + fmt.Sprintf("%v", this.CallerPrototype) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`ReturnMode:` + fmt.Sprintf("%v", this.ReturnMode) + `,`,
		`Immutable:` + fmt.Sprintf("%v", this.Immutable) + `,`,
		`Base:` + fmt.Sprintf("%v", this.Base) + `,`,
		`Object:` + fmt.Sprintf("%v", this.Object) + `,`,
		`Prototype:` + fmt.Sprintf("%v", this.Prototype) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Arguments:` + fmt.Sprintf("%v", this.Arguments) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`APIRequestID:` + fmt.Sprintf("%v", this.APIRequestID) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutgoingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutgoingRequest{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`CallType:` + fmt.Sprintf("%v", this.CallType) + `,`,
		`Caller:` + fmt.Sprintf("%v", this.Caller) + `,`,
		`CallerPrototype:` + fmt.Sprintf("%v", this.CallerPrototype) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`ReturnMode:` + fmt.Sprintf("%v", this.ReturnMode) + `,`,
		`Immutable:` + fmt.Sprintf("%v", this.Immutable) + `,`,
		`Base:` + fmt.Sprintf("%v", this.Base) + `,`,
		`Object:` + fmt.Sprintf("%v", this.Object) + `,`,
		`Prototype:` + fmt.Sprintf("%v", this.Prototype) + `,`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Arguments:` + fmt.Sprintf("%v", this.Arguments) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`APIRequestID:` + fmt.Sprintf("%v", this.APIRequestID) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Result{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Object:` + fmt.Sprintf("%v", this.Object) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Type{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`TypeDeclaration:` + fmt.Sprintf("%v", this.TypeDeclaration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Code) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Code{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`MachineType:` + fmt.Sprintf("%v", this.MachineType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Activate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Activate{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`IsPrototype:` + fmt.Sprintf("%v", this.IsPrototype) + `,`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`IsDelegate:` + fmt.Sprintf("%v", this.IsDelegate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Amend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Amend{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Memory:` + fmt.Sprintf("%v", this.Memory) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`IsPrototype:` + fmt.Sprintf("%v", this.IsPrototype) + `,`,
		`PrevState:` + fmt.Sprintf("%v", this.PrevState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Deactivate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Deactivate{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`PrevState:` + fmt.Sprintf("%v", this.PrevState) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PendingFilament) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PendingFilament{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`RecordID:` + fmt.Sprintf("%v", this.RecordID) + `,`,
		`PreviousRecord:` + fmt.Sprintf("%v", this.PreviousRecord) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Union:` + fmt.Sprintf("%v", this.Union) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Genesis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Genesis{`,
		`Genesis:` + strings.Replace(fmt.Sprintf("%v", this.Genesis), "Genesis", "Genesis", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Child) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Child{`,
		`Child:` + strings.Replace(fmt.Sprintf("%v", this.Child), "Child", "Child", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Jet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Jet{`,
		`Jet:` + strings.Replace(fmt.Sprintf("%v", this.Jet), "Jet", "Jet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_IncomingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_IncomingRequest{`,
		`IncomingRequest:` + strings.Replace(fmt.Sprintf("%v", this.IncomingRequest), "IncomingRequest", "IncomingRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Result{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "Result", "Result", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Type) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Type{`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "Type", "Type", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Code) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Code{`,
		`Code:` + strings.Replace(fmt.Sprintf("%v", this.Code), "Code", "Code", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Activate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Activate{`,
		`Activate:` + strings.Replace(fmt.Sprintf("%v", this.Activate), "Activate", "Activate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Amend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Amend{`,
		`Amend:` + strings.Replace(fmt.Sprintf("%v", this.Amend), "Amend", "Amend", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_Deactivate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_Deactivate{`,
		`Deactivate:` + strings.Replace(fmt.Sprintf("%v", this.Deactivate), "Deactivate", "Deactivate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Virtual_PendingFilament) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Virtual_PendingFilament{`,
		`PendingFilament:` + strings.Replace(fmt.Sprintf("%v", this.PendingFilament), "PendingFilament", "PendingFilament", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Material) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Material{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Virtual:` + strings.Replace(fmt.Sprintf("%v", this.Virtual), "Virtual", "Virtual", 1) + `,`,
		`JetID:` + fmt.Sprintf("%v", this.JetID) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CompositeFilamentRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CompositeFilamentRecord{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`RecordID:` + fmt.Sprintf("%v", this.RecordID) + `,`,
		`Record:` + strings.Replace(strings.Replace(this.Record.String(), "Material", "Material", 1), `&`, ``, 1) + `,`,
		`MetaID:` + fmt.Sprintf("%v", this.MetaID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Material", "Material", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRecord(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Genesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Genesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Genesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Child) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Child: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Child: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevChild", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ref.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Jet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Jet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Jet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerPrototype", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallerPrototype.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMode", wireType)
			}
			m.ReturnMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnMode |= ReturnMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Immutable = bool(v != 0)
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.Base = &v
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.Object = &v
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prototype", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.Prototype = &v
			if err := m.Prototype.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments[:0], dAtA[iNdEx:postIndex]...)
			if m.Arguments == nil {
				m.Arguments = []byte{}
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIRequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIRequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallType", wireType)
			}
			m.CallType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallType |= CallType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Caller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerPrototype", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CallerPrototype.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMode", wireType)
			}
			m.ReturnMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnMode |= ReturnMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Immutable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Immutable = bool(v != 0)
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.Base = &v
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.Object = &v
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prototype", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.Prototype = &v
			if err := m.Prototype.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arguments = append(m.Arguments[:0], dAtA[iNdEx:postIndex]...)
			if m.Arguments == nil {
				m.Arguments = []byte{}
			}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIRequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIRequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeDeclaration", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeDeclaration = append(m.TypeDeclaration[:0], dAtA[iNdEx:postIndex]...)
			if m.TypeDeclaration == nil {
				m.TypeDeclaration = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Code) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Code: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Code: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			m.MachineType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MachineType |= github_com_insolar_insolar_insolar.MachineType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Activate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory[:0], dAtA[iNdEx:postIndex]...)
			if m.Memory == nil {
				m.Memory = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrototype", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrototype = bool(v != 0)
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDelegate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDelegate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Amend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Amend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Amend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memory = append(m.Memory[:0], dAtA[iNdEx:postIndex]...)
			if m.Memory == nil {
				m.Memory = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrototype", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrototype = bool(v != 0)
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deactivate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deactivate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deactivate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Domain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrevState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingFilament) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingFilament: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingFilament: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousRecord", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.ID
			m.PreviousRecord = &v
			if err := m.PreviousRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Virtual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Virtual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Virtual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Genesis{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Genesis{v}
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Child{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Child{v}
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Jet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Jet{v}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IncomingRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_IncomingRequest{v}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Result{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Result{v}
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Type{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Type{v}
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Code{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Code{v}
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Activate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Activate{v}
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Amend{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Amend{v}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Deactivate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_Deactivate{v}
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingFilament", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PendingFilament{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Union = &Virtual_PendingFilament{v}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Material) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Material: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Material: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Virtual == nil {
				m.Virtual = &Virtual{}
			}
			if err := m.Virtual.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JetID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 200:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompositeFilamentRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompositeFilamentRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompositeFilamentRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RecordID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MetaID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRecord
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRecord
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRecord(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRecord
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRecord = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord   = fmt.Errorf("proto: integer overflow")
)
