package store

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// JetIndexAccessorMock implements JetIndexAccessor
type JetIndexAccessorMock struct {
	t minimock.Tester

	funcFor func(jetID insolar.JetID) (m1 map[insolar.ID]struct {
	})
	inspectFuncFor   func(jetID insolar.JetID)
	afterForCounter  uint64
	beforeForCounter uint64
	ForMock          mJetIndexAccessorMockFor
}

// NewJetIndexAccessorMock returns a mock for JetIndexAccessor
func NewJetIndexAccessorMock(t minimock.Tester) *JetIndexAccessorMock {
	m := &JetIndexAccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ForMock = mJetIndexAccessorMockFor{mock: m}
	m.ForMock.callArgs = []*JetIndexAccessorMockForParams{}

	return m
}

type mJetIndexAccessorMockFor struct {
	mock               *JetIndexAccessorMock
	defaultExpectation *JetIndexAccessorMockForExpectation
	expectations       []*JetIndexAccessorMockForExpectation

	callArgs []*JetIndexAccessorMockForParams
	mutex    sync.RWMutex
}

// JetIndexAccessorMockForExpectation specifies expectation struct of the JetIndexAccessor.For
type JetIndexAccessorMockForExpectation struct {
	mock    *JetIndexAccessorMock
	params  *JetIndexAccessorMockForParams
	results *JetIndexAccessorMockForResults
	Counter uint64
}

// JetIndexAccessorMockForParams contains parameters of the JetIndexAccessor.For
type JetIndexAccessorMockForParams struct {
	jetID insolar.JetID
}

// JetIndexAccessorMockForResults contains results of the JetIndexAccessor.For
type JetIndexAccessorMockForResults struct {
	m1 map[insolar.ID]struct {
	}
}

// Expect sets up expected params for JetIndexAccessor.For
func (mmFor *mJetIndexAccessorMockFor) Expect(jetID insolar.JetID) *mJetIndexAccessorMockFor {
	if mmFor.mock.funcFor != nil {
		mmFor.mock.t.Fatalf("JetIndexAccessorMock.For mock is already set by Set")
	}

	if mmFor.defaultExpectation == nil {
		mmFor.defaultExpectation = &JetIndexAccessorMockForExpectation{}
	}

	mmFor.defaultExpectation.params = &JetIndexAccessorMockForParams{jetID}
	for _, e := range mmFor.expectations {
		if minimock.Equal(e.params, mmFor.defaultExpectation.params) {
			mmFor.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmFor.defaultExpectation.params)
		}
	}

	return mmFor
}

// Inspect accepts an inspector function that has same arguments as the JetIndexAccessor.For
func (mmFor *mJetIndexAccessorMockFor) Inspect(f func(jetID insolar.JetID)) *mJetIndexAccessorMockFor {
	if mmFor.mock.inspectFuncFor != nil {
		mmFor.mock.t.Fatalf("Inspect function is already set for JetIndexAccessorMock.For")
	}

	mmFor.mock.inspectFuncFor = f

	return mmFor
}

// Return sets up results that will be returned by JetIndexAccessor.For
func (mmFor *mJetIndexAccessorMockFor) Return(m1 map[insolar.ID]struct {
}) *JetIndexAccessorMock {
	if mmFor.mock.funcFor != nil {
		mmFor.mock.t.Fatalf("JetIndexAccessorMock.For mock is already set by Set")
	}

	if mmFor.defaultExpectation == nil {
		mmFor.defaultExpectation = &JetIndexAccessorMockForExpectation{mock: mmFor.mock}
	}
	mmFor.defaultExpectation.results = &JetIndexAccessorMockForResults{m1}
	return mmFor.mock
}

//Set uses given function f to mock the JetIndexAccessor.For method
func (mmFor *mJetIndexAccessorMockFor) Set(f func(jetID insolar.JetID) (m1 map[insolar.ID]struct {
})) *JetIndexAccessorMock {
	if mmFor.defaultExpectation != nil {
		mmFor.mock.t.Fatalf("Default expectation is already set for the JetIndexAccessor.For method")
	}

	if len(mmFor.expectations) > 0 {
		mmFor.mock.t.Fatalf("Some expectations are already set for the JetIndexAccessor.For method")
	}

	mmFor.mock.funcFor = f
	return mmFor.mock
}

// When sets expectation for the JetIndexAccessor.For which will trigger the result defined by the following
// Then helper
func (mmFor *mJetIndexAccessorMockFor) When(jetID insolar.JetID) *JetIndexAccessorMockForExpectation {
	if mmFor.mock.funcFor != nil {
		mmFor.mock.t.Fatalf("JetIndexAccessorMock.For mock is already set by Set")
	}

	expectation := &JetIndexAccessorMockForExpectation{
		mock:   mmFor.mock,
		params: &JetIndexAccessorMockForParams{jetID},
	}
	mmFor.expectations = append(mmFor.expectations, expectation)
	return expectation
}

// Then sets up JetIndexAccessor.For return parameters for the expectation previously defined by the When method
func (e *JetIndexAccessorMockForExpectation) Then(m1 map[insolar.ID]struct {
}) *JetIndexAccessorMock {
	e.results = &JetIndexAccessorMockForResults{m1}
	return e.mock
}

// For implements JetIndexAccessor
func (mmFor *JetIndexAccessorMock) For(jetID insolar.JetID) (m1 map[insolar.ID]struct {
}) {
	mm_atomic.AddUint64(&mmFor.beforeForCounter, 1)
	defer mm_atomic.AddUint64(&mmFor.afterForCounter, 1)

	if mmFor.inspectFuncFor != nil {
		mmFor.inspectFuncFor(jetID)
	}

	params := &JetIndexAccessorMockForParams{jetID}

	// Record call args
	mmFor.ForMock.mutex.Lock()
	mmFor.ForMock.callArgs = append(mmFor.ForMock.callArgs, params)
	mmFor.ForMock.mutex.Unlock()

	for _, e := range mmFor.ForMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1
		}
	}

	if mmFor.ForMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmFor.ForMock.defaultExpectation.Counter, 1)
		want := mmFor.ForMock.defaultExpectation.params
		got := JetIndexAccessorMockForParams{jetID}
		if want != nil && !minimock.Equal(*want, got) {
			mmFor.t.Errorf("JetIndexAccessorMock.For got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmFor.ForMock.defaultExpectation.results
		if results == nil {
			mmFor.t.Fatal("No results are set for the JetIndexAccessorMock.For")
		}
		return (*results).m1
	}
	if mmFor.funcFor != nil {
		return mmFor.funcFor(jetID)
	}
	mmFor.t.Fatalf("Unexpected call to JetIndexAccessorMock.For. %v", jetID)
	return
}

// ForAfterCounter returns a count of finished JetIndexAccessorMock.For invocations
func (mmFor *JetIndexAccessorMock) ForAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFor.afterForCounter)
}

// ForBeforeCounter returns a count of JetIndexAccessorMock.For invocations
func (mmFor *JetIndexAccessorMock) ForBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmFor.beforeForCounter)
}

// Calls returns a list of arguments used in each call to JetIndexAccessorMock.For.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmFor *mJetIndexAccessorMockFor) Calls() []*JetIndexAccessorMockForParams {
	mmFor.mutex.RLock()

	argCopy := make([]*JetIndexAccessorMockForParams, len(mmFor.callArgs))
	copy(argCopy, mmFor.callArgs)

	mmFor.mutex.RUnlock()

	return argCopy
}

// MinimockForDone returns true if the count of the For invocations corresponds
// the number of defined expectations
func (m *JetIndexAccessorMock) MinimockForDone() bool {
	for _, e := range m.ForMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFor != nil && mm_atomic.LoadUint64(&m.afterForCounter) < 1 {
		return false
	}
	return true
}

// MinimockForInspect logs each unmet expectation
func (m *JetIndexAccessorMock) MinimockForInspect() {
	for _, e := range m.ForMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to JetIndexAccessorMock.For with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForCounter) < 1 {
		if m.ForMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to JetIndexAccessorMock.For")
		} else {
			m.t.Errorf("Expected call to JetIndexAccessorMock.For with params: %#v", *m.ForMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcFor != nil && mm_atomic.LoadUint64(&m.afterForCounter) < 1 {
		m.t.Error("Expected call to JetIndexAccessorMock.For")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *JetIndexAccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockForInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *JetIndexAccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *JetIndexAccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockForDone()
}
