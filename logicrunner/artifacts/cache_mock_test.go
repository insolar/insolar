package artifacts

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// CacheMock implements cache
type CacheMock struct {
	t minimock.Tester

	funcget          func(ref insolar.Reference, getter func() (val interface{}, err error)) (val interface{}, err error)
	inspectFuncget   func(ref insolar.Reference, getter func() (val interface{}, err error))
	aftergetCounter  uint64
	beforegetCounter uint64
	getMock          mCacheMockget
}

// NewCacheMock returns a mock for cache
func NewCacheMock(t minimock.Tester) *CacheMock {
	m := &CacheMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.getMock = mCacheMockget{mock: m}
	m.getMock.callArgs = []*CacheMockgetParams{}

	return m
}

type mCacheMockget struct {
	mock               *CacheMock
	defaultExpectation *CacheMockgetExpectation
	expectations       []*CacheMockgetExpectation

	callArgs []*CacheMockgetParams
	mutex    sync.RWMutex
}

// CacheMockgetExpectation specifies expectation struct of the cache.get
type CacheMockgetExpectation struct {
	mock    *CacheMock
	params  *CacheMockgetParams
	results *CacheMockgetResults
	Counter uint64
}

// CacheMockgetParams contains parameters of the cache.get
type CacheMockgetParams struct {
	ref    insolar.Reference
	getter func() (val interface{}, err error)
}

// CacheMockgetResults contains results of the cache.get
type CacheMockgetResults struct {
	val interface{}
	err error
}

// Expect sets up expected params for cache.get
func (mmget *mCacheMockget) Expect(ref insolar.Reference, getter func() (val interface{}, err error)) *mCacheMockget {
	if mmget.mock.funcget != nil {
		mmget.mock.t.Fatalf("CacheMock.get mock is already set by Set")
	}

	if mmget.defaultExpectation == nil {
		mmget.defaultExpectation = &CacheMockgetExpectation{}
	}

	mmget.defaultExpectation.params = &CacheMockgetParams{ref, getter}
	for _, e := range mmget.expectations {
		if minimock.Equal(e.params, mmget.defaultExpectation.params) {
			mmget.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmget.defaultExpectation.params)
		}
	}

	return mmget
}

// Inspect accepts an inspector function that has same arguments as the cache.get
func (mmget *mCacheMockget) Inspect(f func(ref insolar.Reference, getter func() (val interface{}, err error))) *mCacheMockget {
	if mmget.mock.inspectFuncget != nil {
		mmget.mock.t.Fatalf("Inspect function is already set for CacheMock.get")
	}

	mmget.mock.inspectFuncget = f

	return mmget
}

// Return sets up results that will be returned by cache.get
func (mmget *mCacheMockget) Return(val interface{}, err error) *CacheMock {
	if mmget.mock.funcget != nil {
		mmget.mock.t.Fatalf("CacheMock.get mock is already set by Set")
	}

	if mmget.defaultExpectation == nil {
		mmget.defaultExpectation = &CacheMockgetExpectation{mock: mmget.mock}
	}
	mmget.defaultExpectation.results = &CacheMockgetResults{val, err}
	return mmget.mock
}

//Set uses given function f to mock the cache.get method
func (mmget *mCacheMockget) Set(f func(ref insolar.Reference, getter func() (val interface{}, err error)) (val interface{}, err error)) *CacheMock {
	if mmget.defaultExpectation != nil {
		mmget.mock.t.Fatalf("Default expectation is already set for the cache.get method")
	}

	if len(mmget.expectations) > 0 {
		mmget.mock.t.Fatalf("Some expectations are already set for the cache.get method")
	}

	mmget.mock.funcget = f
	return mmget.mock
}

// When sets expectation for the cache.get which will trigger the result defined by the following
// Then helper
func (mmget *mCacheMockget) When(ref insolar.Reference, getter func() (val interface{}, err error)) *CacheMockgetExpectation {
	if mmget.mock.funcget != nil {
		mmget.mock.t.Fatalf("CacheMock.get mock is already set by Set")
	}

	expectation := &CacheMockgetExpectation{
		mock:   mmget.mock,
		params: &CacheMockgetParams{ref, getter},
	}
	mmget.expectations = append(mmget.expectations, expectation)
	return expectation
}

// Then sets up cache.get return parameters for the expectation previously defined by the When method
func (e *CacheMockgetExpectation) Then(val interface{}, err error) *CacheMock {
	e.results = &CacheMockgetResults{val, err}
	return e.mock
}

// get implements cache
func (mmget *CacheMock) get(ref insolar.Reference, getter func() (val interface{}, err error)) (val interface{}, err error) {
	mm_atomic.AddUint64(&mmget.beforegetCounter, 1)
	defer mm_atomic.AddUint64(&mmget.aftergetCounter, 1)

	if mmget.inspectFuncget != nil {
		mmget.inspectFuncget(ref, getter)
	}

	params := &CacheMockgetParams{ref, getter}

	// Record call args
	mmget.getMock.mutex.Lock()
	mmget.getMock.callArgs = append(mmget.getMock.callArgs, params)
	mmget.getMock.mutex.Unlock()

	for _, e := range mmget.getMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.val, e.results.err
		}
	}

	if mmget.getMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmget.getMock.defaultExpectation.Counter, 1)
		want := mmget.getMock.defaultExpectation.params
		got := CacheMockgetParams{ref, getter}
		if want != nil && !minimock.Equal(*want, got) {
			mmget.t.Errorf("CacheMock.get got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmget.getMock.defaultExpectation.results
		if results == nil {
			mmget.t.Fatal("No results are set for the CacheMock.get")
		}
		return (*results).val, (*results).err
	}
	if mmget.funcget != nil {
		return mmget.funcget(ref, getter)
	}
	mmget.t.Fatalf("Unexpected call to CacheMock.get. %v %v", ref, getter)
	return
}

// getAfterCounter returns a count of finished CacheMock.get invocations
func (mmget *CacheMock) getAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmget.aftergetCounter)
}

// getBeforeCounter returns a count of CacheMock.get invocations
func (mmget *CacheMock) getBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmget.beforegetCounter)
}

// Calls returns a list of arguments used in each call to CacheMock.get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmget *mCacheMockget) Calls() []*CacheMockgetParams {
	mmget.mutex.RLock()

	argCopy := make([]*CacheMockgetParams, len(mmget.callArgs))
	copy(argCopy, mmget.callArgs)

	mmget.mutex.RUnlock()

	return argCopy
}

// MinimockgetDone returns true if the count of the get invocations corresponds
// the number of defined expectations
func (m *CacheMock) MinimockgetDone() bool {
	for _, e := range m.getMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.getMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.aftergetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcget != nil && mm_atomic.LoadUint64(&m.aftergetCounter) < 1 {
		return false
	}
	return true
}

// MinimockgetInspect logs each unmet expectation
func (m *CacheMock) MinimockgetInspect() {
	for _, e := range m.getMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheMock.get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.getMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.aftergetCounter) < 1 {
		if m.getMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheMock.get")
		} else {
			m.t.Errorf("Expected call to CacheMock.get with params: %#v", *m.getMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcget != nil && mm_atomic.LoadUint64(&m.aftergetCounter) < 1 {
		m.t.Error("Expected call to CacheMock.get")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockgetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockgetDone()
}
