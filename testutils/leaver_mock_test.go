package testutils

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	mm_insolar "github.com/insolar/insolar/insolar"
)

// LeaverMock implements insolar.Leaver
type LeaverMock struct {
	t minimock.Tester

	funcLeave          func(ctx context.Context, ETA mm_insolar.PulseNumber)
	inspectFuncLeave   func(ctx context.Context, ETA mm_insolar.PulseNumber)
	afterLeaveCounter  uint64
	beforeLeaveCounter uint64
	LeaveMock          mLeaverMockLeave
}

// NewLeaverMock returns a mock for insolar.Leaver
func NewLeaverMock(t minimock.Tester) *LeaverMock {
	m := &LeaverMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LeaveMock = mLeaverMockLeave{mock: m}
	m.LeaveMock.callArgs = []*LeaverMockLeaveParams{}

	return m
}

type mLeaverMockLeave struct {
	mock               *LeaverMock
	defaultExpectation *LeaverMockLeaveExpectation
	expectations       []*LeaverMockLeaveExpectation

	callArgs []*LeaverMockLeaveParams
	mutex    sync.RWMutex
}

// LeaverMockLeaveExpectation specifies expectation struct of the Leaver.Leave
type LeaverMockLeaveExpectation struct {
	mock   *LeaverMock
	params *LeaverMockLeaveParams

	Counter uint64
}

// LeaverMockLeaveParams contains parameters of the Leaver.Leave
type LeaverMockLeaveParams struct {
	ctx context.Context
	ETA mm_insolar.PulseNumber
}

// Expect sets up expected params for Leaver.Leave
func (mmLeave *mLeaverMockLeave) Expect(ctx context.Context, ETA mm_insolar.PulseNumber) *mLeaverMockLeave {
	if mmLeave.mock.funcLeave != nil {
		mmLeave.mock.t.Fatalf("LeaverMock.Leave mock is already set by Set")
	}

	if mmLeave.defaultExpectation == nil {
		mmLeave.defaultExpectation = &LeaverMockLeaveExpectation{}
	}

	mmLeave.defaultExpectation.params = &LeaverMockLeaveParams{ctx, ETA}
	for _, e := range mmLeave.expectations {
		if minimock.Equal(e.params, mmLeave.defaultExpectation.params) {
			mmLeave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLeave.defaultExpectation.params)
		}
	}

	return mmLeave
}

// Inspect accepts an inspector function that has same arguments as the Leaver.Leave
func (mmLeave *mLeaverMockLeave) Inspect(f func(ctx context.Context, ETA mm_insolar.PulseNumber)) *mLeaverMockLeave {
	if mmLeave.mock.inspectFuncLeave != nil {
		mmLeave.mock.t.Fatalf("Inspect function is already set for LeaverMock.Leave")
	}

	mmLeave.mock.inspectFuncLeave = f

	return mmLeave
}

// Return sets up results that will be returned by Leaver.Leave
func (mmLeave *mLeaverMockLeave) Return() *LeaverMock {
	if mmLeave.mock.funcLeave != nil {
		mmLeave.mock.t.Fatalf("LeaverMock.Leave mock is already set by Set")
	}

	if mmLeave.defaultExpectation == nil {
		mmLeave.defaultExpectation = &LeaverMockLeaveExpectation{mock: mmLeave.mock}
	}

	return mmLeave.mock
}

//Set uses given function f to mock the Leaver.Leave method
func (mmLeave *mLeaverMockLeave) Set(f func(ctx context.Context, ETA mm_insolar.PulseNumber)) *LeaverMock {
	if mmLeave.defaultExpectation != nil {
		mmLeave.mock.t.Fatalf("Default expectation is already set for the Leaver.Leave method")
	}

	if len(mmLeave.expectations) > 0 {
		mmLeave.mock.t.Fatalf("Some expectations are already set for the Leaver.Leave method")
	}

	mmLeave.mock.funcLeave = f
	return mmLeave.mock
}

// Leave implements insolar.Leaver
func (mmLeave *LeaverMock) Leave(ctx context.Context, ETA mm_insolar.PulseNumber) {
	mm_atomic.AddUint64(&mmLeave.beforeLeaveCounter, 1)
	defer mm_atomic.AddUint64(&mmLeave.afterLeaveCounter, 1)

	if mmLeave.inspectFuncLeave != nil {
		mmLeave.inspectFuncLeave(ctx, ETA)
	}

	params := &LeaverMockLeaveParams{ctx, ETA}

	// Record call args
	mmLeave.LeaveMock.mutex.Lock()
	mmLeave.LeaveMock.callArgs = append(mmLeave.LeaveMock.callArgs, params)
	mmLeave.LeaveMock.mutex.Unlock()

	for _, e := range mmLeave.LeaveMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmLeave.LeaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLeave.LeaveMock.defaultExpectation.Counter, 1)
		want := mmLeave.LeaveMock.defaultExpectation.params
		got := LeaverMockLeaveParams{ctx, ETA}
		if want != nil && !minimock.Equal(*want, got) {
			mmLeave.t.Errorf("LeaverMock.Leave got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmLeave.funcLeave != nil {
		mmLeave.funcLeave(ctx, ETA)
		return
	}
	mmLeave.t.Fatalf("Unexpected call to LeaverMock.Leave. %v %v", ctx, ETA)

}

// LeaveAfterCounter returns a count of finished LeaverMock.Leave invocations
func (mmLeave *LeaverMock) LeaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLeave.afterLeaveCounter)
}

// LeaveBeforeCounter returns a count of LeaverMock.Leave invocations
func (mmLeave *LeaverMock) LeaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLeave.beforeLeaveCounter)
}

// Calls returns a list of arguments used in each call to LeaverMock.Leave.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLeave *mLeaverMockLeave) Calls() []*LeaverMockLeaveParams {
	mmLeave.mutex.RLock()

	argCopy := make([]*LeaverMockLeaveParams, len(mmLeave.callArgs))
	copy(argCopy, mmLeave.callArgs)

	mmLeave.mutex.RUnlock()

	return argCopy
}

// MinimockLeaveDone returns true if the count of the Leave invocations corresponds
// the number of defined expectations
func (m *LeaverMock) MinimockLeaveDone() bool {
	for _, e := range m.LeaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LeaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLeaveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLeave != nil && mm_atomic.LoadUint64(&m.afterLeaveCounter) < 1 {
		return false
	}
	return true
}

// MinimockLeaveInspect logs each unmet expectation
func (m *LeaverMock) MinimockLeaveInspect() {
	for _, e := range m.LeaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LeaverMock.Leave with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LeaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLeaveCounter) < 1 {
		if m.LeaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LeaverMock.Leave")
		} else {
			m.t.Errorf("Expected call to LeaverMock.Leave with params: %#v", *m.LeaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLeave != nil && mm_atomic.LoadUint64(&m.afterLeaveCounter) < 1 {
		m.t.Error("Expected call to LeaverMock.Leave")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LeaverMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockLeaveInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LeaverMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LeaverMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLeaveDone()
}
