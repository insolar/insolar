package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/hostnetwork/host"
)

// RoutingTableMock implements network.RoutingTable
type RoutingTableMock struct {
	t minimock.Tester

	funcResolve          func(r1 insolar.Reference) (hp1 *host.Host, err error)
	inspectFuncResolve   func(r1 insolar.Reference)
	afterResolveCounter  uint64
	beforeResolveCounter uint64
	ResolveMock          mRoutingTableMockResolve
}

// NewRoutingTableMock returns a mock for network.RoutingTable
func NewRoutingTableMock(t minimock.Tester) *RoutingTableMock {
	m := &RoutingTableMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ResolveMock = mRoutingTableMockResolve{mock: m}
	m.ResolveMock.callArgs = []*RoutingTableMockResolveParams{}

	return m
}

type mRoutingTableMockResolve struct {
	mock               *RoutingTableMock
	defaultExpectation *RoutingTableMockResolveExpectation
	expectations       []*RoutingTableMockResolveExpectation

	callArgs []*RoutingTableMockResolveParams
	mutex    sync.RWMutex
}

// RoutingTableMockResolveExpectation specifies expectation struct of the RoutingTable.Resolve
type RoutingTableMockResolveExpectation struct {
	mock    *RoutingTableMock
	params  *RoutingTableMockResolveParams
	results *RoutingTableMockResolveResults
	Counter uint64
}

// RoutingTableMockResolveParams contains parameters of the RoutingTable.Resolve
type RoutingTableMockResolveParams struct {
	r1 insolar.Reference
}

// RoutingTableMockResolveResults contains results of the RoutingTable.Resolve
type RoutingTableMockResolveResults struct {
	hp1 *host.Host
	err error
}

// Expect sets up expected params for RoutingTable.Resolve
func (mmResolve *mRoutingTableMockResolve) Expect(r1 insolar.Reference) *mRoutingTableMockResolve {
	if mmResolve.mock.funcResolve != nil {
		mmResolve.mock.t.Fatalf("RoutingTableMock.Resolve mock is already set by Set")
	}

	if mmResolve.defaultExpectation == nil {
		mmResolve.defaultExpectation = &RoutingTableMockResolveExpectation{}
	}

	mmResolve.defaultExpectation.params = &RoutingTableMockResolveParams{r1}
	for _, e := range mmResolve.expectations {
		if minimock.Equal(e.params, mmResolve.defaultExpectation.params) {
			mmResolve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmResolve.defaultExpectation.params)
		}
	}

	return mmResolve
}

// Inspect accepts an inspector function that has same arguments as the RoutingTable.Resolve
func (mmResolve *mRoutingTableMockResolve) Inspect(f func(r1 insolar.Reference)) *mRoutingTableMockResolve {
	if mmResolve.mock.inspectFuncResolve != nil {
		mmResolve.mock.t.Fatalf("Inspect function is already set for RoutingTableMock.Resolve")
	}

	mmResolve.mock.inspectFuncResolve = f

	return mmResolve
}

// Return sets up results that will be returned by RoutingTable.Resolve
func (mmResolve *mRoutingTableMockResolve) Return(hp1 *host.Host, err error) *RoutingTableMock {
	if mmResolve.mock.funcResolve != nil {
		mmResolve.mock.t.Fatalf("RoutingTableMock.Resolve mock is already set by Set")
	}

	if mmResolve.defaultExpectation == nil {
		mmResolve.defaultExpectation = &RoutingTableMockResolveExpectation{mock: mmResolve.mock}
	}
	mmResolve.defaultExpectation.results = &RoutingTableMockResolveResults{hp1, err}
	return mmResolve.mock
}

//Set uses given function f to mock the RoutingTable.Resolve method
func (mmResolve *mRoutingTableMockResolve) Set(f func(r1 insolar.Reference) (hp1 *host.Host, err error)) *RoutingTableMock {
	if mmResolve.defaultExpectation != nil {
		mmResolve.mock.t.Fatalf("Default expectation is already set for the RoutingTable.Resolve method")
	}

	if len(mmResolve.expectations) > 0 {
		mmResolve.mock.t.Fatalf("Some expectations are already set for the RoutingTable.Resolve method")
	}

	mmResolve.mock.funcResolve = f
	return mmResolve.mock
}

// When sets expectation for the RoutingTable.Resolve which will trigger the result defined by the following
// Then helper
func (mmResolve *mRoutingTableMockResolve) When(r1 insolar.Reference) *RoutingTableMockResolveExpectation {
	if mmResolve.mock.funcResolve != nil {
		mmResolve.mock.t.Fatalf("RoutingTableMock.Resolve mock is already set by Set")
	}

	expectation := &RoutingTableMockResolveExpectation{
		mock:   mmResolve.mock,
		params: &RoutingTableMockResolveParams{r1},
	}
	mmResolve.expectations = append(mmResolve.expectations, expectation)
	return expectation
}

// Then sets up RoutingTable.Resolve return parameters for the expectation previously defined by the When method
func (e *RoutingTableMockResolveExpectation) Then(hp1 *host.Host, err error) *RoutingTableMock {
	e.results = &RoutingTableMockResolveResults{hp1, err}
	return e.mock
}

// Resolve implements network.RoutingTable
func (mmResolve *RoutingTableMock) Resolve(r1 insolar.Reference) (hp1 *host.Host, err error) {
	mm_atomic.AddUint64(&mmResolve.beforeResolveCounter, 1)
	defer mm_atomic.AddUint64(&mmResolve.afterResolveCounter, 1)

	if mmResolve.inspectFuncResolve != nil {
		mmResolve.inspectFuncResolve(r1)
	}

	params := &RoutingTableMockResolveParams{r1}

	// Record call args
	mmResolve.ResolveMock.mutex.Lock()
	mmResolve.ResolveMock.callArgs = append(mmResolve.ResolveMock.callArgs, params)
	mmResolve.ResolveMock.mutex.Unlock()

	for _, e := range mmResolve.ResolveMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.hp1, e.results.err
		}
	}

	if mmResolve.ResolveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmResolve.ResolveMock.defaultExpectation.Counter, 1)
		want := mmResolve.ResolveMock.defaultExpectation.params
		got := RoutingTableMockResolveParams{r1}
		if want != nil && !minimock.Equal(*want, got) {
			mmResolve.t.Errorf("RoutingTableMock.Resolve got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmResolve.ResolveMock.defaultExpectation.results
		if results == nil {
			mmResolve.t.Fatal("No results are set for the RoutingTableMock.Resolve")
		}
		return (*results).hp1, (*results).err
	}
	if mmResolve.funcResolve != nil {
		return mmResolve.funcResolve(r1)
	}
	mmResolve.t.Fatalf("Unexpected call to RoutingTableMock.Resolve. %v", r1)
	return
}

// ResolveAfterCounter returns a count of finished RoutingTableMock.Resolve invocations
func (mmResolve *RoutingTableMock) ResolveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResolve.afterResolveCounter)
}

// ResolveBeforeCounter returns a count of RoutingTableMock.Resolve invocations
func (mmResolve *RoutingTableMock) ResolveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmResolve.beforeResolveCounter)
}

// Calls returns a list of arguments used in each call to RoutingTableMock.Resolve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmResolve *mRoutingTableMockResolve) Calls() []*RoutingTableMockResolveParams {
	mmResolve.mutex.RLock()

	argCopy := make([]*RoutingTableMockResolveParams, len(mmResolve.callArgs))
	copy(argCopy, mmResolve.callArgs)

	mmResolve.mutex.RUnlock()

	return argCopy
}

// MinimockResolveDone returns true if the count of the Resolve invocations corresponds
// the number of defined expectations
func (m *RoutingTableMock) MinimockResolveDone() bool {
	for _, e := range m.ResolveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResolveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResolve != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		return false
	}
	return true
}

// MinimockResolveInspect logs each unmet expectation
func (m *RoutingTableMock) MinimockResolveInspect() {
	for _, e := range m.ResolveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RoutingTableMock.Resolve with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ResolveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		if m.ResolveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RoutingTableMock.Resolve")
		} else {
			m.t.Errorf("Expected call to RoutingTableMock.Resolve with params: %#v", *m.ResolveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcResolve != nil && mm_atomic.LoadUint64(&m.afterResolveCounter) < 1 {
		m.t.Error("Expected call to RoutingTableMock.Resolve")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RoutingTableMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockResolveInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RoutingTableMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RoutingTableMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockResolveDone()
}
