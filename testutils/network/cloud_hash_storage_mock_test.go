package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// CloudHashStorageMock implements storage.CloudHashStorage
type CloudHashStorageMock struct {
	t minimock.Tester

	funcAppend          func(pulse insolar.PulseNumber, cloudHash []byte) (err error)
	inspectFuncAppend   func(pulse insolar.PulseNumber, cloudHash []byte)
	afterAppendCounter  uint64
	beforeAppendCounter uint64
	AppendMock          mCloudHashStorageMockAppend

	funcForPulseNumber          func(pulse insolar.PulseNumber) (ba1 []byte, err error)
	inspectFuncForPulseNumber   func(pulse insolar.PulseNumber)
	afterForPulseNumberCounter  uint64
	beforeForPulseNumberCounter uint64
	ForPulseNumberMock          mCloudHashStorageMockForPulseNumber
}

// NewCloudHashStorageMock returns a mock for storage.CloudHashStorage
func NewCloudHashStorageMock(t minimock.Tester) *CloudHashStorageMock {
	m := &CloudHashStorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AppendMock = mCloudHashStorageMockAppend{mock: m}
	m.AppendMock.callArgs = []*CloudHashStorageMockAppendParams{}

	m.ForPulseNumberMock = mCloudHashStorageMockForPulseNumber{mock: m}
	m.ForPulseNumberMock.callArgs = []*CloudHashStorageMockForPulseNumberParams{}

	return m
}

type mCloudHashStorageMockAppend struct {
	mock               *CloudHashStorageMock
	defaultExpectation *CloudHashStorageMockAppendExpectation
	expectations       []*CloudHashStorageMockAppendExpectation

	callArgs []*CloudHashStorageMockAppendParams
	mutex    sync.RWMutex
}

// CloudHashStorageMockAppendExpectation specifies expectation struct of the CloudHashStorage.Append
type CloudHashStorageMockAppendExpectation struct {
	mock    *CloudHashStorageMock
	params  *CloudHashStorageMockAppendParams
	results *CloudHashStorageMockAppendResults
	Counter uint64
}

// CloudHashStorageMockAppendParams contains parameters of the CloudHashStorage.Append
type CloudHashStorageMockAppendParams struct {
	pulse     insolar.PulseNumber
	cloudHash []byte
}

// CloudHashStorageMockAppendResults contains results of the CloudHashStorage.Append
type CloudHashStorageMockAppendResults struct {
	err error
}

// Expect sets up expected params for CloudHashStorage.Append
func (mmAppend *mCloudHashStorageMockAppend) Expect(pulse insolar.PulseNumber, cloudHash []byte) *mCloudHashStorageMockAppend {
	if mmAppend.mock.funcAppend != nil {
		mmAppend.mock.t.Fatalf("CloudHashStorageMock.Append mock is already set by Set")
	}

	if mmAppend.defaultExpectation == nil {
		mmAppend.defaultExpectation = &CloudHashStorageMockAppendExpectation{}
	}

	mmAppend.defaultExpectation.params = &CloudHashStorageMockAppendParams{pulse, cloudHash}
	for _, e := range mmAppend.expectations {
		if minimock.Equal(e.params, mmAppend.defaultExpectation.params) {
			mmAppend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAppend.defaultExpectation.params)
		}
	}

	return mmAppend
}

// Inspect accepts an inspector function that has same arguments as the CloudHashStorage.Append
func (mmAppend *mCloudHashStorageMockAppend) Inspect(f func(pulse insolar.PulseNumber, cloudHash []byte)) *mCloudHashStorageMockAppend {
	if mmAppend.mock.inspectFuncAppend != nil {
		mmAppend.mock.t.Fatalf("Inspect function is already set for CloudHashStorageMock.Append")
	}

	mmAppend.mock.inspectFuncAppend = f

	return mmAppend
}

// Return sets up results that will be returned by CloudHashStorage.Append
func (mmAppend *mCloudHashStorageMockAppend) Return(err error) *CloudHashStorageMock {
	if mmAppend.mock.funcAppend != nil {
		mmAppend.mock.t.Fatalf("CloudHashStorageMock.Append mock is already set by Set")
	}

	if mmAppend.defaultExpectation == nil {
		mmAppend.defaultExpectation = &CloudHashStorageMockAppendExpectation{mock: mmAppend.mock}
	}
	mmAppend.defaultExpectation.results = &CloudHashStorageMockAppendResults{err}
	return mmAppend.mock
}

//Set uses given function f to mock the CloudHashStorage.Append method
func (mmAppend *mCloudHashStorageMockAppend) Set(f func(pulse insolar.PulseNumber, cloudHash []byte) (err error)) *CloudHashStorageMock {
	if mmAppend.defaultExpectation != nil {
		mmAppend.mock.t.Fatalf("Default expectation is already set for the CloudHashStorage.Append method")
	}

	if len(mmAppend.expectations) > 0 {
		mmAppend.mock.t.Fatalf("Some expectations are already set for the CloudHashStorage.Append method")
	}

	mmAppend.mock.funcAppend = f
	return mmAppend.mock
}

// When sets expectation for the CloudHashStorage.Append which will trigger the result defined by the following
// Then helper
func (mmAppend *mCloudHashStorageMockAppend) When(pulse insolar.PulseNumber, cloudHash []byte) *CloudHashStorageMockAppendExpectation {
	if mmAppend.mock.funcAppend != nil {
		mmAppend.mock.t.Fatalf("CloudHashStorageMock.Append mock is already set by Set")
	}

	expectation := &CloudHashStorageMockAppendExpectation{
		mock:   mmAppend.mock,
		params: &CloudHashStorageMockAppendParams{pulse, cloudHash},
	}
	mmAppend.expectations = append(mmAppend.expectations, expectation)
	return expectation
}

// Then sets up CloudHashStorage.Append return parameters for the expectation previously defined by the When method
func (e *CloudHashStorageMockAppendExpectation) Then(err error) *CloudHashStorageMock {
	e.results = &CloudHashStorageMockAppendResults{err}
	return e.mock
}

// Append implements storage.CloudHashStorage
func (mmAppend *CloudHashStorageMock) Append(pulse insolar.PulseNumber, cloudHash []byte) (err error) {
	mm_atomic.AddUint64(&mmAppend.beforeAppendCounter, 1)
	defer mm_atomic.AddUint64(&mmAppend.afterAppendCounter, 1)

	if mmAppend.inspectFuncAppend != nil {
		mmAppend.inspectFuncAppend(pulse, cloudHash)
	}

	params := &CloudHashStorageMockAppendParams{pulse, cloudHash}

	// Record call args
	mmAppend.AppendMock.mutex.Lock()
	mmAppend.AppendMock.callArgs = append(mmAppend.AppendMock.callArgs, params)
	mmAppend.AppendMock.mutex.Unlock()

	for _, e := range mmAppend.AppendMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAppend.AppendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAppend.AppendMock.defaultExpectation.Counter, 1)
		want := mmAppend.AppendMock.defaultExpectation.params
		got := CloudHashStorageMockAppendParams{pulse, cloudHash}
		if want != nil && !minimock.Equal(*want, got) {
			mmAppend.t.Errorf("CloudHashStorageMock.Append got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmAppend.AppendMock.defaultExpectation.results
		if results == nil {
			mmAppend.t.Fatal("No results are set for the CloudHashStorageMock.Append")
		}
		return (*results).err
	}
	if mmAppend.funcAppend != nil {
		return mmAppend.funcAppend(pulse, cloudHash)
	}
	mmAppend.t.Fatalf("Unexpected call to CloudHashStorageMock.Append. %v %v", pulse, cloudHash)
	return
}

// AppendAfterCounter returns a count of finished CloudHashStorageMock.Append invocations
func (mmAppend *CloudHashStorageMock) AppendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAppend.afterAppendCounter)
}

// AppendBeforeCounter returns a count of CloudHashStorageMock.Append invocations
func (mmAppend *CloudHashStorageMock) AppendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAppend.beforeAppendCounter)
}

// Calls returns a list of arguments used in each call to CloudHashStorageMock.Append.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAppend *mCloudHashStorageMockAppend) Calls() []*CloudHashStorageMockAppendParams {
	mmAppend.mutex.RLock()

	argCopy := make([]*CloudHashStorageMockAppendParams, len(mmAppend.callArgs))
	copy(argCopy, mmAppend.callArgs)

	mmAppend.mutex.RUnlock()

	return argCopy
}

// MinimockAppendDone returns true if the count of the Append invocations corresponds
// the number of defined expectations
func (m *CloudHashStorageMock) MinimockAppendDone() bool {
	for _, e := range m.AppendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AppendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAppend != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		return false
	}
	return true
}

// MinimockAppendInspect logs each unmet expectation
func (m *CloudHashStorageMock) MinimockAppendInspect() {
	for _, e := range m.AppendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CloudHashStorageMock.Append with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AppendMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		if m.AppendMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CloudHashStorageMock.Append")
		} else {
			m.t.Errorf("Expected call to CloudHashStorageMock.Append with params: %#v", *m.AppendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAppend != nil && mm_atomic.LoadUint64(&m.afterAppendCounter) < 1 {
		m.t.Error("Expected call to CloudHashStorageMock.Append")
	}
}

type mCloudHashStorageMockForPulseNumber struct {
	mock               *CloudHashStorageMock
	defaultExpectation *CloudHashStorageMockForPulseNumberExpectation
	expectations       []*CloudHashStorageMockForPulseNumberExpectation

	callArgs []*CloudHashStorageMockForPulseNumberParams
	mutex    sync.RWMutex
}

// CloudHashStorageMockForPulseNumberExpectation specifies expectation struct of the CloudHashStorage.ForPulseNumber
type CloudHashStorageMockForPulseNumberExpectation struct {
	mock    *CloudHashStorageMock
	params  *CloudHashStorageMockForPulseNumberParams
	results *CloudHashStorageMockForPulseNumberResults
	Counter uint64
}

// CloudHashStorageMockForPulseNumberParams contains parameters of the CloudHashStorage.ForPulseNumber
type CloudHashStorageMockForPulseNumberParams struct {
	pulse insolar.PulseNumber
}

// CloudHashStorageMockForPulseNumberResults contains results of the CloudHashStorage.ForPulseNumber
type CloudHashStorageMockForPulseNumberResults struct {
	ba1 []byte
	err error
}

// Expect sets up expected params for CloudHashStorage.ForPulseNumber
func (mmForPulseNumber *mCloudHashStorageMockForPulseNumber) Expect(pulse insolar.PulseNumber) *mCloudHashStorageMockForPulseNumber {
	if mmForPulseNumber.mock.funcForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("CloudHashStorageMock.ForPulseNumber mock is already set by Set")
	}

	if mmForPulseNumber.defaultExpectation == nil {
		mmForPulseNumber.defaultExpectation = &CloudHashStorageMockForPulseNumberExpectation{}
	}

	mmForPulseNumber.defaultExpectation.params = &CloudHashStorageMockForPulseNumberParams{pulse}
	for _, e := range mmForPulseNumber.expectations {
		if minimock.Equal(e.params, mmForPulseNumber.defaultExpectation.params) {
			mmForPulseNumber.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForPulseNumber.defaultExpectation.params)
		}
	}

	return mmForPulseNumber
}

// Inspect accepts an inspector function that has same arguments as the CloudHashStorage.ForPulseNumber
func (mmForPulseNumber *mCloudHashStorageMockForPulseNumber) Inspect(f func(pulse insolar.PulseNumber)) *mCloudHashStorageMockForPulseNumber {
	if mmForPulseNumber.mock.inspectFuncForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("Inspect function is already set for CloudHashStorageMock.ForPulseNumber")
	}

	mmForPulseNumber.mock.inspectFuncForPulseNumber = f

	return mmForPulseNumber
}

// Return sets up results that will be returned by CloudHashStorage.ForPulseNumber
func (mmForPulseNumber *mCloudHashStorageMockForPulseNumber) Return(ba1 []byte, err error) *CloudHashStorageMock {
	if mmForPulseNumber.mock.funcForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("CloudHashStorageMock.ForPulseNumber mock is already set by Set")
	}

	if mmForPulseNumber.defaultExpectation == nil {
		mmForPulseNumber.defaultExpectation = &CloudHashStorageMockForPulseNumberExpectation{mock: mmForPulseNumber.mock}
	}
	mmForPulseNumber.defaultExpectation.results = &CloudHashStorageMockForPulseNumberResults{ba1, err}
	return mmForPulseNumber.mock
}

//Set uses given function f to mock the CloudHashStorage.ForPulseNumber method
func (mmForPulseNumber *mCloudHashStorageMockForPulseNumber) Set(f func(pulse insolar.PulseNumber) (ba1 []byte, err error)) *CloudHashStorageMock {
	if mmForPulseNumber.defaultExpectation != nil {
		mmForPulseNumber.mock.t.Fatalf("Default expectation is already set for the CloudHashStorage.ForPulseNumber method")
	}

	if len(mmForPulseNumber.expectations) > 0 {
		mmForPulseNumber.mock.t.Fatalf("Some expectations are already set for the CloudHashStorage.ForPulseNumber method")
	}

	mmForPulseNumber.mock.funcForPulseNumber = f
	return mmForPulseNumber.mock
}

// When sets expectation for the CloudHashStorage.ForPulseNumber which will trigger the result defined by the following
// Then helper
func (mmForPulseNumber *mCloudHashStorageMockForPulseNumber) When(pulse insolar.PulseNumber) *CloudHashStorageMockForPulseNumberExpectation {
	if mmForPulseNumber.mock.funcForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("CloudHashStorageMock.ForPulseNumber mock is already set by Set")
	}

	expectation := &CloudHashStorageMockForPulseNumberExpectation{
		mock:   mmForPulseNumber.mock,
		params: &CloudHashStorageMockForPulseNumberParams{pulse},
	}
	mmForPulseNumber.expectations = append(mmForPulseNumber.expectations, expectation)
	return expectation
}

// Then sets up CloudHashStorage.ForPulseNumber return parameters for the expectation previously defined by the When method
func (e *CloudHashStorageMockForPulseNumberExpectation) Then(ba1 []byte, err error) *CloudHashStorageMock {
	e.results = &CloudHashStorageMockForPulseNumberResults{ba1, err}
	return e.mock
}

// ForPulseNumber implements storage.CloudHashStorage
func (mmForPulseNumber *CloudHashStorageMock) ForPulseNumber(pulse insolar.PulseNumber) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmForPulseNumber.beforeForPulseNumberCounter, 1)
	defer mm_atomic.AddUint64(&mmForPulseNumber.afterForPulseNumberCounter, 1)

	if mmForPulseNumber.inspectFuncForPulseNumber != nil {
		mmForPulseNumber.inspectFuncForPulseNumber(pulse)
	}

	params := &CloudHashStorageMockForPulseNumberParams{pulse}

	// Record call args
	mmForPulseNumber.ForPulseNumberMock.mutex.Lock()
	mmForPulseNumber.ForPulseNumberMock.callArgs = append(mmForPulseNumber.ForPulseNumberMock.callArgs, params)
	mmForPulseNumber.ForPulseNumberMock.mutex.Unlock()

	for _, e := range mmForPulseNumber.ForPulseNumberMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmForPulseNumber.ForPulseNumberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForPulseNumber.ForPulseNumberMock.defaultExpectation.Counter, 1)
		want := mmForPulseNumber.ForPulseNumberMock.defaultExpectation.params
		got := CloudHashStorageMockForPulseNumberParams{pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmForPulseNumber.t.Errorf("CloudHashStorageMock.ForPulseNumber got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmForPulseNumber.ForPulseNumberMock.defaultExpectation.results
		if results == nil {
			mmForPulseNumber.t.Fatal("No results are set for the CloudHashStorageMock.ForPulseNumber")
		}
		return (*results).ba1, (*results).err
	}
	if mmForPulseNumber.funcForPulseNumber != nil {
		return mmForPulseNumber.funcForPulseNumber(pulse)
	}
	mmForPulseNumber.t.Fatalf("Unexpected call to CloudHashStorageMock.ForPulseNumber. %v", pulse)
	return
}

// ForPulseNumberAfterCounter returns a count of finished CloudHashStorageMock.ForPulseNumber invocations
func (mmForPulseNumber *CloudHashStorageMock) ForPulseNumberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForPulseNumber.afterForPulseNumberCounter)
}

// ForPulseNumberBeforeCounter returns a count of CloudHashStorageMock.ForPulseNumber invocations
func (mmForPulseNumber *CloudHashStorageMock) ForPulseNumberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForPulseNumber.beforeForPulseNumberCounter)
}

// Calls returns a list of arguments used in each call to CloudHashStorageMock.ForPulseNumber.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForPulseNumber *mCloudHashStorageMockForPulseNumber) Calls() []*CloudHashStorageMockForPulseNumberParams {
	mmForPulseNumber.mutex.RLock()

	argCopy := make([]*CloudHashStorageMockForPulseNumberParams, len(mmForPulseNumber.callArgs))
	copy(argCopy, mmForPulseNumber.callArgs)

	mmForPulseNumber.mutex.RUnlock()

	return argCopy
}

// MinimockForPulseNumberDone returns true if the count of the ForPulseNumber invocations corresponds
// the number of defined expectations
func (m *CloudHashStorageMock) MinimockForPulseNumberDone() bool {
	for _, e := range m.ForPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForPulseNumber != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		return false
	}
	return true
}

// MinimockForPulseNumberInspect logs each unmet expectation
func (m *CloudHashStorageMock) MinimockForPulseNumberInspect() {
	for _, e := range m.ForPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CloudHashStorageMock.ForPulseNumber with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		if m.ForPulseNumberMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CloudHashStorageMock.ForPulseNumber")
		} else {
			m.t.Errorf("Expected call to CloudHashStorageMock.ForPulseNumber with params: %#v", *m.ForPulseNumberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForPulseNumber != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		m.t.Error("Expected call to CloudHashStorageMock.ForPulseNumber")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CloudHashStorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAppendInspect()

		m.MinimockForPulseNumberInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CloudHashStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CloudHashStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAppendDone() &&
		m.MinimockForPulseNumberDone()
}
