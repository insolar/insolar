package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// PulseRangeHasherMock implements storage.PulseRangeHasher
type PulseRangeHasherMock struct {
	t minimock.Tester

	funcGetRangeHash          func(p1 insolar.PulseRange) (ba1 []byte, err error)
	inspectFuncGetRangeHash   func(p1 insolar.PulseRange)
	afterGetRangeHashCounter  uint64
	beforeGetRangeHashCounter uint64
	GetRangeHashMock          mPulseRangeHasherMockGetRangeHash

	funcValidateRangeHash          func(p1 insolar.PulseRange, ba1 []byte) (b1 bool, err error)
	inspectFuncValidateRangeHash   func(p1 insolar.PulseRange, ba1 []byte)
	afterValidateRangeHashCounter  uint64
	beforeValidateRangeHashCounter uint64
	ValidateRangeHashMock          mPulseRangeHasherMockValidateRangeHash
}

// NewPulseRangeHasherMock returns a mock for storage.PulseRangeHasher
func NewPulseRangeHasherMock(t minimock.Tester) *PulseRangeHasherMock {
	m := &PulseRangeHasherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetRangeHashMock = mPulseRangeHasherMockGetRangeHash{mock: m}
	m.GetRangeHashMock.callArgs = []*PulseRangeHasherMockGetRangeHashParams{}

	m.ValidateRangeHashMock = mPulseRangeHasherMockValidateRangeHash{mock: m}
	m.ValidateRangeHashMock.callArgs = []*PulseRangeHasherMockValidateRangeHashParams{}

	return m
}

type mPulseRangeHasherMockGetRangeHash struct {
	mock               *PulseRangeHasherMock
	defaultExpectation *PulseRangeHasherMockGetRangeHashExpectation
	expectations       []*PulseRangeHasherMockGetRangeHashExpectation

	callArgs []*PulseRangeHasherMockGetRangeHashParams
	mutex    sync.RWMutex
}

// PulseRangeHasherMockGetRangeHashExpectation specifies expectation struct of the PulseRangeHasher.GetRangeHash
type PulseRangeHasherMockGetRangeHashExpectation struct {
	mock    *PulseRangeHasherMock
	params  *PulseRangeHasherMockGetRangeHashParams
	results *PulseRangeHasherMockGetRangeHashResults
	Counter uint64
}

// PulseRangeHasherMockGetRangeHashParams contains parameters of the PulseRangeHasher.GetRangeHash
type PulseRangeHasherMockGetRangeHashParams struct {
	p1 insolar.PulseRange
}

// PulseRangeHasherMockGetRangeHashResults contains results of the PulseRangeHasher.GetRangeHash
type PulseRangeHasherMockGetRangeHashResults struct {
	ba1 []byte
	err error
}

// Expect sets up expected params for PulseRangeHasher.GetRangeHash
func (mmGetRangeHash *mPulseRangeHasherMockGetRangeHash) Expect(p1 insolar.PulseRange) *mPulseRangeHasherMockGetRangeHash {
	if mmGetRangeHash.mock.funcGetRangeHash != nil {
		mmGetRangeHash.mock.t.Fatalf("PulseRangeHasherMock.GetRangeHash mock is already set by Set")
	}

	if mmGetRangeHash.defaultExpectation == nil {
		mmGetRangeHash.defaultExpectation = &PulseRangeHasherMockGetRangeHashExpectation{}
	}

	mmGetRangeHash.defaultExpectation.params = &PulseRangeHasherMockGetRangeHashParams{p1}
	for _, e := range mmGetRangeHash.expectations {
		if minimock.Equal(e.params, mmGetRangeHash.defaultExpectation.params) {
			mmGetRangeHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRangeHash.defaultExpectation.params)
		}
	}

	return mmGetRangeHash
}

// Inspect accepts an inspector function that has same arguments as the PulseRangeHasher.GetRangeHash
func (mmGetRangeHash *mPulseRangeHasherMockGetRangeHash) Inspect(f func(p1 insolar.PulseRange)) *mPulseRangeHasherMockGetRangeHash {
	if mmGetRangeHash.mock.inspectFuncGetRangeHash != nil {
		mmGetRangeHash.mock.t.Fatalf("Inspect function is already set for PulseRangeHasherMock.GetRangeHash")
	}

	mmGetRangeHash.mock.inspectFuncGetRangeHash = f

	return mmGetRangeHash
}

// Return sets up results that will be returned by PulseRangeHasher.GetRangeHash
func (mmGetRangeHash *mPulseRangeHasherMockGetRangeHash) Return(ba1 []byte, err error) *PulseRangeHasherMock {
	if mmGetRangeHash.mock.funcGetRangeHash != nil {
		mmGetRangeHash.mock.t.Fatalf("PulseRangeHasherMock.GetRangeHash mock is already set by Set")
	}

	if mmGetRangeHash.defaultExpectation == nil {
		mmGetRangeHash.defaultExpectation = &PulseRangeHasherMockGetRangeHashExpectation{mock: mmGetRangeHash.mock}
	}
	mmGetRangeHash.defaultExpectation.results = &PulseRangeHasherMockGetRangeHashResults{ba1, err}
	return mmGetRangeHash.mock
}

//Set uses given function f to mock the PulseRangeHasher.GetRangeHash method
func (mmGetRangeHash *mPulseRangeHasherMockGetRangeHash) Set(f func(p1 insolar.PulseRange) (ba1 []byte, err error)) *PulseRangeHasherMock {
	if mmGetRangeHash.defaultExpectation != nil {
		mmGetRangeHash.mock.t.Fatalf("Default expectation is already set for the PulseRangeHasher.GetRangeHash method")
	}

	if len(mmGetRangeHash.expectations) > 0 {
		mmGetRangeHash.mock.t.Fatalf("Some expectations are already set for the PulseRangeHasher.GetRangeHash method")
	}

	mmGetRangeHash.mock.funcGetRangeHash = f
	return mmGetRangeHash.mock
}

// When sets expectation for the PulseRangeHasher.GetRangeHash which will trigger the result defined by the following
// Then helper
func (mmGetRangeHash *mPulseRangeHasherMockGetRangeHash) When(p1 insolar.PulseRange) *PulseRangeHasherMockGetRangeHashExpectation {
	if mmGetRangeHash.mock.funcGetRangeHash != nil {
		mmGetRangeHash.mock.t.Fatalf("PulseRangeHasherMock.GetRangeHash mock is already set by Set")
	}

	expectation := &PulseRangeHasherMockGetRangeHashExpectation{
		mock:   mmGetRangeHash.mock,
		params: &PulseRangeHasherMockGetRangeHashParams{p1},
	}
	mmGetRangeHash.expectations = append(mmGetRangeHash.expectations, expectation)
	return expectation
}

// Then sets up PulseRangeHasher.GetRangeHash return parameters for the expectation previously defined by the When method
func (e *PulseRangeHasherMockGetRangeHashExpectation) Then(ba1 []byte, err error) *PulseRangeHasherMock {
	e.results = &PulseRangeHasherMockGetRangeHashResults{ba1, err}
	return e.mock
}

// GetRangeHash implements storage.PulseRangeHasher
func (mmGetRangeHash *PulseRangeHasherMock) GetRangeHash(p1 insolar.PulseRange) (ba1 []byte, err error) {
	mm_atomic.AddUint64(&mmGetRangeHash.beforeGetRangeHashCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRangeHash.afterGetRangeHashCounter, 1)

	if mmGetRangeHash.inspectFuncGetRangeHash != nil {
		mmGetRangeHash.inspectFuncGetRangeHash(p1)
	}

	params := &PulseRangeHasherMockGetRangeHashParams{p1}

	// Record call args
	mmGetRangeHash.GetRangeHashMock.mutex.Lock()
	mmGetRangeHash.GetRangeHashMock.callArgs = append(mmGetRangeHash.GetRangeHashMock.callArgs, params)
	mmGetRangeHash.GetRangeHashMock.mutex.Unlock()

	for _, e := range mmGetRangeHash.GetRangeHashMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ba1, e.results.err
		}
	}

	if mmGetRangeHash.GetRangeHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRangeHash.GetRangeHashMock.defaultExpectation.Counter, 1)
		want := mmGetRangeHash.GetRangeHashMock.defaultExpectation.params
		got := PulseRangeHasherMockGetRangeHashParams{p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetRangeHash.t.Errorf("PulseRangeHasherMock.GetRangeHash got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetRangeHash.GetRangeHashMock.defaultExpectation.results
		if results == nil {
			mmGetRangeHash.t.Fatal("No results are set for the PulseRangeHasherMock.GetRangeHash")
		}
		return (*results).ba1, (*results).err
	}
	if mmGetRangeHash.funcGetRangeHash != nil {
		return mmGetRangeHash.funcGetRangeHash(p1)
	}
	mmGetRangeHash.t.Fatalf("Unexpected call to PulseRangeHasherMock.GetRangeHash. %v", p1)
	return
}

// GetRangeHashAfterCounter returns a count of finished PulseRangeHasherMock.GetRangeHash invocations
func (mmGetRangeHash *PulseRangeHasherMock) GetRangeHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRangeHash.afterGetRangeHashCounter)
}

// GetRangeHashBeforeCounter returns a count of PulseRangeHasherMock.GetRangeHash invocations
func (mmGetRangeHash *PulseRangeHasherMock) GetRangeHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRangeHash.beforeGetRangeHashCounter)
}

// Calls returns a list of arguments used in each call to PulseRangeHasherMock.GetRangeHash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRangeHash *mPulseRangeHasherMockGetRangeHash) Calls() []*PulseRangeHasherMockGetRangeHashParams {
	mmGetRangeHash.mutex.RLock()

	argCopy := make([]*PulseRangeHasherMockGetRangeHashParams, len(mmGetRangeHash.callArgs))
	copy(argCopy, mmGetRangeHash.callArgs)

	mmGetRangeHash.mutex.RUnlock()

	return argCopy
}

// MinimockGetRangeHashDone returns true if the count of the GetRangeHash invocations corresponds
// the number of defined expectations
func (m *PulseRangeHasherMock) MinimockGetRangeHashDone() bool {
	for _, e := range m.GetRangeHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRangeHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRangeHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRangeHash != nil && mm_atomic.LoadUint64(&m.afterGetRangeHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetRangeHashInspect logs each unmet expectation
func (m *PulseRangeHasherMock) MinimockGetRangeHashInspect() {
	for _, e := range m.GetRangeHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulseRangeHasherMock.GetRangeHash with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetRangeHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetRangeHashCounter) < 1 {
		if m.GetRangeHashMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulseRangeHasherMock.GetRangeHash")
		} else {
			m.t.Errorf("Expected call to PulseRangeHasherMock.GetRangeHash with params: %#v", *m.GetRangeHashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRangeHash != nil && mm_atomic.LoadUint64(&m.afterGetRangeHashCounter) < 1 {
		m.t.Error("Expected call to PulseRangeHasherMock.GetRangeHash")
	}
}

type mPulseRangeHasherMockValidateRangeHash struct {
	mock               *PulseRangeHasherMock
	defaultExpectation *PulseRangeHasherMockValidateRangeHashExpectation
	expectations       []*PulseRangeHasherMockValidateRangeHashExpectation

	callArgs []*PulseRangeHasherMockValidateRangeHashParams
	mutex    sync.RWMutex
}

// PulseRangeHasherMockValidateRangeHashExpectation specifies expectation struct of the PulseRangeHasher.ValidateRangeHash
type PulseRangeHasherMockValidateRangeHashExpectation struct {
	mock    *PulseRangeHasherMock
	params  *PulseRangeHasherMockValidateRangeHashParams
	results *PulseRangeHasherMockValidateRangeHashResults
	Counter uint64
}

// PulseRangeHasherMockValidateRangeHashParams contains parameters of the PulseRangeHasher.ValidateRangeHash
type PulseRangeHasherMockValidateRangeHashParams struct {
	p1  insolar.PulseRange
	ba1 []byte
}

// PulseRangeHasherMockValidateRangeHashResults contains results of the PulseRangeHasher.ValidateRangeHash
type PulseRangeHasherMockValidateRangeHashResults struct {
	b1  bool
	err error
}

// Expect sets up expected params for PulseRangeHasher.ValidateRangeHash
func (mmValidateRangeHash *mPulseRangeHasherMockValidateRangeHash) Expect(p1 insolar.PulseRange, ba1 []byte) *mPulseRangeHasherMockValidateRangeHash {
	if mmValidateRangeHash.mock.funcValidateRangeHash != nil {
		mmValidateRangeHash.mock.t.Fatalf("PulseRangeHasherMock.ValidateRangeHash mock is already set by Set")
	}

	if mmValidateRangeHash.defaultExpectation == nil {
		mmValidateRangeHash.defaultExpectation = &PulseRangeHasherMockValidateRangeHashExpectation{}
	}

	mmValidateRangeHash.defaultExpectation.params = &PulseRangeHasherMockValidateRangeHashParams{p1, ba1}
	for _, e := range mmValidateRangeHash.expectations {
		if minimock.Equal(e.params, mmValidateRangeHash.defaultExpectation.params) {
			mmValidateRangeHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateRangeHash.defaultExpectation.params)
		}
	}

	return mmValidateRangeHash
}

// Inspect accepts an inspector function that has same arguments as the PulseRangeHasher.ValidateRangeHash
func (mmValidateRangeHash *mPulseRangeHasherMockValidateRangeHash) Inspect(f func(p1 insolar.PulseRange, ba1 []byte)) *mPulseRangeHasherMockValidateRangeHash {
	if mmValidateRangeHash.mock.inspectFuncValidateRangeHash != nil {
		mmValidateRangeHash.mock.t.Fatalf("Inspect function is already set for PulseRangeHasherMock.ValidateRangeHash")
	}

	mmValidateRangeHash.mock.inspectFuncValidateRangeHash = f

	return mmValidateRangeHash
}

// Return sets up results that will be returned by PulseRangeHasher.ValidateRangeHash
func (mmValidateRangeHash *mPulseRangeHasherMockValidateRangeHash) Return(b1 bool, err error) *PulseRangeHasherMock {
	if mmValidateRangeHash.mock.funcValidateRangeHash != nil {
		mmValidateRangeHash.mock.t.Fatalf("PulseRangeHasherMock.ValidateRangeHash mock is already set by Set")
	}

	if mmValidateRangeHash.defaultExpectation == nil {
		mmValidateRangeHash.defaultExpectation = &PulseRangeHasherMockValidateRangeHashExpectation{mock: mmValidateRangeHash.mock}
	}
	mmValidateRangeHash.defaultExpectation.results = &PulseRangeHasherMockValidateRangeHashResults{b1, err}
	return mmValidateRangeHash.mock
}

//Set uses given function f to mock the PulseRangeHasher.ValidateRangeHash method
func (mmValidateRangeHash *mPulseRangeHasherMockValidateRangeHash) Set(f func(p1 insolar.PulseRange, ba1 []byte) (b1 bool, err error)) *PulseRangeHasherMock {
	if mmValidateRangeHash.defaultExpectation != nil {
		mmValidateRangeHash.mock.t.Fatalf("Default expectation is already set for the PulseRangeHasher.ValidateRangeHash method")
	}

	if len(mmValidateRangeHash.expectations) > 0 {
		mmValidateRangeHash.mock.t.Fatalf("Some expectations are already set for the PulseRangeHasher.ValidateRangeHash method")
	}

	mmValidateRangeHash.mock.funcValidateRangeHash = f
	return mmValidateRangeHash.mock
}

// When sets expectation for the PulseRangeHasher.ValidateRangeHash which will trigger the result defined by the following
// Then helper
func (mmValidateRangeHash *mPulseRangeHasherMockValidateRangeHash) When(p1 insolar.PulseRange, ba1 []byte) *PulseRangeHasherMockValidateRangeHashExpectation {
	if mmValidateRangeHash.mock.funcValidateRangeHash != nil {
		mmValidateRangeHash.mock.t.Fatalf("PulseRangeHasherMock.ValidateRangeHash mock is already set by Set")
	}

	expectation := &PulseRangeHasherMockValidateRangeHashExpectation{
		mock:   mmValidateRangeHash.mock,
		params: &PulseRangeHasherMockValidateRangeHashParams{p1, ba1},
	}
	mmValidateRangeHash.expectations = append(mmValidateRangeHash.expectations, expectation)
	return expectation
}

// Then sets up PulseRangeHasher.ValidateRangeHash return parameters for the expectation previously defined by the When method
func (e *PulseRangeHasherMockValidateRangeHashExpectation) Then(b1 bool, err error) *PulseRangeHasherMock {
	e.results = &PulseRangeHasherMockValidateRangeHashResults{b1, err}
	return e.mock
}

// ValidateRangeHash implements storage.PulseRangeHasher
func (mmValidateRangeHash *PulseRangeHasherMock) ValidateRangeHash(p1 insolar.PulseRange, ba1 []byte) (b1 bool, err error) {
	mm_atomic.AddUint64(&mmValidateRangeHash.beforeValidateRangeHashCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateRangeHash.afterValidateRangeHashCounter, 1)

	if mmValidateRangeHash.inspectFuncValidateRangeHash != nil {
		mmValidateRangeHash.inspectFuncValidateRangeHash(p1, ba1)
	}

	params := &PulseRangeHasherMockValidateRangeHashParams{p1, ba1}

	// Record call args
	mmValidateRangeHash.ValidateRangeHashMock.mutex.Lock()
	mmValidateRangeHash.ValidateRangeHashMock.callArgs = append(mmValidateRangeHash.ValidateRangeHashMock.callArgs, params)
	mmValidateRangeHash.ValidateRangeHashMock.mutex.Unlock()

	for _, e := range mmValidateRangeHash.ValidateRangeHashMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.b1, e.results.err
		}
	}

	if mmValidateRangeHash.ValidateRangeHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateRangeHash.ValidateRangeHashMock.defaultExpectation.Counter, 1)
		want := mmValidateRangeHash.ValidateRangeHashMock.defaultExpectation.params
		got := PulseRangeHasherMockValidateRangeHashParams{p1, ba1}
		if want != nil && !minimock.Equal(*want, got) {
			mmValidateRangeHash.t.Errorf("PulseRangeHasherMock.ValidateRangeHash got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmValidateRangeHash.ValidateRangeHashMock.defaultExpectation.results
		if results == nil {
			mmValidateRangeHash.t.Fatal("No results are set for the PulseRangeHasherMock.ValidateRangeHash")
		}
		return (*results).b1, (*results).err
	}
	if mmValidateRangeHash.funcValidateRangeHash != nil {
		return mmValidateRangeHash.funcValidateRangeHash(p1, ba1)
	}
	mmValidateRangeHash.t.Fatalf("Unexpected call to PulseRangeHasherMock.ValidateRangeHash. %v %v", p1, ba1)
	return
}

// ValidateRangeHashAfterCounter returns a count of finished PulseRangeHasherMock.ValidateRangeHash invocations
func (mmValidateRangeHash *PulseRangeHasherMock) ValidateRangeHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateRangeHash.afterValidateRangeHashCounter)
}

// ValidateRangeHashBeforeCounter returns a count of PulseRangeHasherMock.ValidateRangeHash invocations
func (mmValidateRangeHash *PulseRangeHasherMock) ValidateRangeHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateRangeHash.beforeValidateRangeHashCounter)
}

// Calls returns a list of arguments used in each call to PulseRangeHasherMock.ValidateRangeHash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateRangeHash *mPulseRangeHasherMockValidateRangeHash) Calls() []*PulseRangeHasherMockValidateRangeHashParams {
	mmValidateRangeHash.mutex.RLock()

	argCopy := make([]*PulseRangeHasherMockValidateRangeHashParams, len(mmValidateRangeHash.callArgs))
	copy(argCopy, mmValidateRangeHash.callArgs)

	mmValidateRangeHash.mutex.RUnlock()

	return argCopy
}

// MinimockValidateRangeHashDone returns true if the count of the ValidateRangeHash invocations corresponds
// the number of defined expectations
func (m *PulseRangeHasherMock) MinimockValidateRangeHashDone() bool {
	for _, e := range m.ValidateRangeHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateRangeHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidateRangeHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateRangeHash != nil && mm_atomic.LoadUint64(&m.afterValidateRangeHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockValidateRangeHashInspect logs each unmet expectation
func (m *PulseRangeHasherMock) MinimockValidateRangeHashInspect() {
	for _, e := range m.ValidateRangeHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulseRangeHasherMock.ValidateRangeHash with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateRangeHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterValidateRangeHashCounter) < 1 {
		if m.ValidateRangeHashMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulseRangeHasherMock.ValidateRangeHash")
		} else {
			m.t.Errorf("Expected call to PulseRangeHasherMock.ValidateRangeHash with params: %#v", *m.ValidateRangeHashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateRangeHash != nil && mm_atomic.LoadUint64(&m.afterValidateRangeHashCounter) < 1 {
		m.t.Error("Expected call to PulseRangeHasherMock.ValidateRangeHash")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PulseRangeHasherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetRangeHashInspect()

		m.MinimockValidateRangeHashInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PulseRangeHasherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PulseRangeHasherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetRangeHashDone() &&
		m.MinimockValidateRangeHashDone()
}
